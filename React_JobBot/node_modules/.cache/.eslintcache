[{"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/index.js":"1","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/App.js":"2","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/UserProvider.js":"3","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/ProtectedRoutes.jsx":"4","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/Header.jsx":"5","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/login/Login.jsx":"6","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/HomeAdmin.jsx":"7","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/JobsPage.jsx":"8","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/UsersPage.jsx":"9","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/ClientHistory.jsx":"10","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/Statistics.jsx":"11","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/ConversationsPage.jsx":"12","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/OfferedJobs.jsx":"13","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/HomeClient.jsx":"14","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/UserDetails.jsx":"15","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/register/Register.jsx":"16","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/viewChatFlow.jsx":"17","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/StartChat.jsx":"18","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/logout/Logout.jsx":"19","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/About.jsx":"20","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/CardsTable.jsx":"21","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/getFlowText.js":"22","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/convert_tree_to_json.js":"23","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/config.js":"24","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/ActionProvider.js":"25","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/MessageParser.js":"26","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/ErrorMessages.jsx":"27","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/CollapsableCard.jsx":"28","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/MyCustomChatMessage.jsx":"29","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Areas.jsx":"30","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/FieldOptions.jsx":"31","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTitles.jsx":"32","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Companies.jsx":"33","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTypes.jsx":"34","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Jobs.jsx":"35","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Approval.jsx":"36","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/DisplayEmail.jsx":"37","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/DisplaySelectedJobs.jsx":"38","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/AccuracyLevels.jsx":"39","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/MoreInfo.jsx":"40","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/ExperienceLevel.jsx":"41","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Cities.jsx":"42","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Email.jsx":"43","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTitleTyping.jsx":"44","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobCard.jsx":"45"},{"size":438,"mtime":1686489831646,"results":"46","hashOfConfig":"47"},{"size":2536,"mtime":1686489831539,"results":"48","hashOfConfig":"47"},{"size":722,"mtime":1686489831569,"results":"49","hashOfConfig":"47"},{"size":363,"mtime":1686489831553,"results":"50","hashOfConfig":"47"},{"size":1440,"mtime":1686489831661,"results":"51","hashOfConfig":"47"},{"size":3689,"mtime":1686489831918,"results":"52","hashOfConfig":"47"},{"size":3584,"mtime":1686489831717,"results":"53","hashOfConfig":"47"},{"size":4281,"mtime":1686489831728,"results":"54","hashOfConfig":"47"},{"size":3363,"mtime":1686489831739,"results":"55","hashOfConfig":"47"},{"size":1743,"mtime":1686489831677,"results":"56","hashOfConfig":"47"},{"size":7067,"mtime":1686489831733,"results":"57","hashOfConfig":"47"},{"size":2770,"mtime":1686489831685,"results":"58","hashOfConfig":"47"},{"size":3069,"mtime":1686489831732,"results":"59","hashOfConfig":"47"},{"size":2696,"mtime":1686489831892,"results":"60","hashOfConfig":"47"},{"size":804,"mtime":1686489831894,"results":"61","hashOfConfig":"47"},{"size":3583,"mtime":1686489831939,"results":"62","hashOfConfig":"47"},{"size":3395,"mtime":1686489831749,"results":"63","hashOfConfig":"47"},{"size":1420,"mtime":1686489831767,"results":"64","hashOfConfig":"47"},{"size":1009,"mtime":1686489831933,"results":"65","hashOfConfig":"47"},{"size":2429,"mtime":1685628898625,"results":"66","hashOfConfig":"47"},{"size":2318,"mtime":1686489831669,"results":"67","hashOfConfig":"47"},{"size":2929,"mtime":1686489831885,"results":"68","hashOfConfig":"47"},{"size":14010,"mtime":1686489831883,"results":"69","hashOfConfig":"47"},{"size":4141,"mtime":1686489831879,"results":"70","hashOfConfig":"47"},{"size":30564,"mtime":1686489831750,"results":"71","hashOfConfig":"47"},{"size":1760,"mtime":1686489831754,"results":"72","hashOfConfig":"47"},{"size":263,"mtime":1686489831855,"results":"73","hashOfConfig":"47"},{"size":1525,"mtime":1685371810692,"results":"74","hashOfConfig":"47"},{"size":270,"mtime":1686489831757,"results":"75","hashOfConfig":"47"},{"size":1782,"mtime":1685371810717,"results":"76","hashOfConfig":"47"},{"size":1594,"mtime":1685371810721,"results":"77","hashOfConfig":"47"},{"size":1810,"mtime":1686489831867,"results":"78","hashOfConfig":"47"},{"size":1777,"mtime":1685371810719,"results":"79","hashOfConfig":"47"},{"size":1317,"mtime":1686489831869,"results":"80","hashOfConfig":"47"},{"size":3382,"mtime":1682944246368,"results":"81","hashOfConfig":"47"},{"size":1400,"mtime":1685371810715,"results":"82","hashOfConfig":"47"},{"size":1994,"mtime":1686489831838,"results":"83","hashOfConfig":"47"},{"size":1195,"mtime":1686489831846,"results":"84","hashOfConfig":"47"},{"size":2542,"mtime":1685371810714,"results":"85","hashOfConfig":"47"},{"size":641,"mtime":1686489831872,"results":"86","hashOfConfig":"47"},{"size":1375,"mtime":1686489831856,"results":"87","hashOfConfig":"47"},{"size":3207,"mtime":1686489831831,"results":"88","hashOfConfig":"47"},{"size":853,"mtime":1682188046871,"results":"89","hashOfConfig":"47"},{"size":763,"mtime":1682188046883,"results":"90","hashOfConfig":"47"},{"size":1475,"mtime":1686489831860,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oab255",{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/index.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/App.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/UserProvider.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/ProtectedRoutes.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/Header.jsx",["253"],[],"import { Link, useNavigate } from 'react-router-dom';\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport JobotLogoPNG from \"./JOBOT.png\";\r\nimport { Button } from '@mui/material';\r\n\r\nexport default function Header({userType}) {\r\n  const navigate = useNavigate()\r\n  return (\r\n    <div className=\"d-flex justify-content-between align-items-center px-5\" style={{backgroundColor:\"#59698b\",height:\"8vh\"}}>\r\n      <div>\r\n        <Button style={{width:\"45%\", height: \"8vh\"}} onClick={() => {\r\n          if (!userType || Object.keys(userType).length === 0) {\r\n            navigate(\"/\")\r\n          } else {\r\n            userType.type === \"admin\" ?  navigate(\"/homePageAdmin\") :  navigate(\"/homePage\")\r\n          }\r\n        }}>\r\n        <img src={JobotLogoPNG} style={{width:\"100%\"}}\r\n         />\r\n         </Button>\r\n      </div>\r\n      <div>\r\n       <ListItem>\r\n            <IconButton component={Link} to=\"/about\">\r\n              <ListItemIcon>\r\n                <InfoIcon color=\"primary\" fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary={false}\r\n              secondary={false}\r\n            />\r\n        </ListItem>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/login/Login.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/HomeAdmin.jsx",["254"],[],"import { Link } from 'react-router-dom';\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport LogoutOutlinedIcon from '@mui/icons-material/LogoutOutlined';\r\nimport ManageAccountsOutlinedIcon from '@mui/icons-material/ManageAccountsOutlined';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\r\nimport PieChartIcon from '@mui/icons-material/PieChart';\r\nimport PeopleIcon from '@mui/icons-material/People';\r\n\r\nimport { useUser } from \"../../UserProvider.js\"\r\n\r\n\r\nexport default function HomeAdmin() {\r\n    const { userType } = useUser()\r\n    const adminDetails = userType.details\r\n    console.log(adminDetails)\r\n\r\n    \r\n    \r\n      const dense = false;\r\n      const secondary = true;\r\n    \r\n      return (\r\n        <div style={{height: \"92vh\"}} className=\"w-100 d-flex flex-column justify-content-center align-items-center pb-5\">\r\n            <h1 style={{color: \"#309CFF\"}}>Welcome Admin!</h1>\r\n        <List dense={dense} className=\"m-3\">\r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/users\">\r\n              <ListItemIcon >\r\n                <PeopleIcon color=\"primary\" fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Users\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/jobs\">\r\n              <ListItemIcon>\r\n                <SearchOutlinedIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Jobs\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n\r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/viewChatFlow\">\r\n              <ListItemIcon>\r\n                <AccountTreeIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Chat Flow\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n\r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/statistics\">\r\n              <ListItemIcon>\r\n                <PieChartIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Statistics\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/details\" state={adminDetails}>\r\n              <ListItemIcon>\r\n                <ManageAccountsOutlinedIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Admin Details\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/logout\" state={adminDetails}>\r\n              <ListItemIcon>\r\n                <LogoutOutlinedIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Logout\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n        </List>\r\n        </div>\r\n      );\r\n    }\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/JobsPage.jsx",["255"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport Typography from \"@mui/material/Typography\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport starImage from './star.avif';\n\nimport {CardsTable} from \"./CardsTable.jsx\"\nimport ErrorMessages from \"../chatBotLogic/components/Options/ErrorMessages\"\nimport './JobsPage.css';\n\n\nfunction JobsPage() {\n  const [jobs, setJobs] = useState([]);\n  const [companySearchQuery, setCompanySearchQuery] = useState('');\n  const [jobTitleSearchQuery, setJobTitleSearchQuery] = useState('');\n  const [citySearchQuery, setCitySearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isServerDown, setIsServerDown] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true)\n    axios.post('/viewjobs')\n      .then(response => {\n        if (response.data.success) {\n          setJobs(response.data.total_list);\n          setIsLoading(false);\n        } else {\n          console.log('Error fetching jobs:', response.data.message);\n        }\n      })\n      .catch(error => {\n        setIsServerDown(true)\n        console.log('Error fetching jobs:', error.message);\n      });\n  }, []);\n\n  const filteredJobs = jobs.filter(job =>\n    job.company.toLowerCase().includes(companySearchQuery.toLowerCase()) &&\n    job.job.toLowerCase().includes(jobTitleSearchQuery.toLowerCase()) &&\n    job.city.toLowerCase().includes(citySearchQuery.toLowerCase())\n  );\n\n  function collapsed(job){\n    return (<div style={{textAlign:\"center\"}} >\n    {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n    {job.date&&<p className=\"job-date\"><AccessTimeIcon color=\"primary\" fontSize=\"\"/>{\"  \"+job.date}</p>}\n    {job.link&&<p className=\"job-link\">\n      <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        <LaunchIcon color=\"primary\"/>\n        {\"     \"+`${job.link.slice(0, 30)}...`}\n      </a>\n    </p>}\n    <p className=\"job-description\" style={{margin: \"0 2rem 2rem\"}}>{job.description}</p>\n    </div>)\n  }\n\n  const dataAsCards = filteredJobs.map((job, index) => {\n    return {\n      content: <div style={{textAlign:\"center\"}}>\n                    <h2 className=\"job-title\">{job.job}</h2>\n                    <p>{job.company}</p>\n                    <p className=\"job-location\">{job.city}</p></div>,\n      collapsableContent: collapsed(job)\n    }\n  })\n\n  return (\n    <div>\n      <Typography variant='h4' align=\"center\" m={2} fontFamily=\"Serif\">JOBOT Jobs</Typography>\n      {!isServerDown?(\n        isLoading ? <div className=\"loading\"><CircularProgress /></div>:(\n          <div>\n          <div className=\"w-50 d-flex mx-auto align-items-center justify-cotnent-center\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search jobs by company name\"\n                  value={companySearchQuery}\n                  onChange={event => setCompanySearchQuery(event.target.value)}\n                  className=\"search-input\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search jobs by title\"\n                  value={jobTitleSearchQuery}\n                  onChange={event => setJobTitleSearchQuery(event.target.value)}\n                  className=\"search-input\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search jobs by city\"\n                  value={citySearchQuery}\n                  onChange={event => setCitySearchQuery(event.target.value)}\n                  className=\"search-input\"\n                />\n          </div>\n          <div>\n          {filteredJobs.length === 0 ? (\n            <p className=\"no-jobs-found\" style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}>No jobs found.</p>\n          ) : (\n            <CardsTable data={dataAsCards} />\n          )}\n          </div>\n        </div>)\n      ):(\n        <div style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}> <ErrorMessages /></div>\n      )}\n\n    </div>\n\n  );\n}\n\nexport default JobsPage;\n\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/UsersPage.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/ClientHistory.jsx",["256"],[],"import React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport ConversationsPage from './ConversationsPage'\r\nimport OfferedJobs from './OfferedJobs'\r\n\r\n\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index } = props;\r\n\r\n  return (\r\n    <div hidden={value !== index} id={index}>\r\n      {value === index && <Typography component={'span'}>{children}</Typography>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ClientHistory() {\r\n  const location = useLocation();\r\n  const clientDetails = location.state;\r\n  console.log(clientDetails);\r\n  function BasicTabs() {\r\n    const [value, setValue] = React.useState(0);\r\n      \r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    };\r\n    return (\r\n      <>\r\n      <Typography variant='h4' align=\"center\" m={2} fontFamily=\"Serif\">History of {clientDetails.userName}</Typography>\r\n      <Tabs value={value} onChange={handleChange} centered>\r\n      <Tab label=\"Last Chat Content\" />\r\n      <Tab label=\"Last Offered Jobs\" />\r\n      <Tab label=\"Last Selected Jobs\" />\r\n      </Tabs>\r\n      <TabPanel value={value} index={0}>\r\n      <ConversationsPage propValue={clientDetails}/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n      <OfferedJobs propValue={{\"clientDetails\":clientDetails,\"jobs\":\"displayed\"}}/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <OfferedJobs propValue={{\"clientDetails\":clientDetails,\"jobs\":\"selected\"}}/>\r\n      </TabPanel>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <  BasicTabs/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClientHistory;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/Statistics.jsx",["257"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport {ArcElement } from 'chart.js';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nimport \"./statistics.css\"\r\nimport ErrorMessages from \"../chatBotLogic/components/Options/ErrorMessages\"\r\n\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n    ,ArcElement\r\n);\r\n\r\n\r\nfunction parseStatisticsData(res){\r\n    let labels = Object.keys(res[\"stat\"])\r\n    let values = Object.values(res[\"stat\"])\r\n    let statName=res[\"statName\"]\r\n    if(res[\"statName\"]===\"job Types\"){\r\n      statName=\"Job Types\"\r\n    }else if(res[\"statName\"]===\"experience level\"){\r\n      statName=\"Experience Levels\"\r\n    }else if(res[\"statName\"]===\"field\"){\r\n      statName=\"Fields\"\r\n    }else if(res[\"statName\"]===\"areas\"){\r\n      statName=\"Areas\"\r\n    }\r\n    console.log({\"statName\":statName,\"stats\":{\"labels\":labels,\"values\":values}})\r\n    return {\"statName\":statName,\"stats\":{\"labels\":labels,\"values\":values}}\r\n}\r\n\r\nfunction parseGeneralData(res){\r\n    console.log(res[\"stat\"])\r\n    let labels = Object.keys(res[\"stat\"])\r\n    let values = Object.values(res[\"stat\"])\r\n    console.log(\"values\",values)    \r\n    var list=[]\r\n    for (let i = 0; i < labels.length; i++) {\r\n        list=list.concat(parseStatisticsData({ \"statName\":labels[i], \"stat\": values[i] }));\r\n    }\r\n    return list\r\n}\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index } = props;\r\n\r\n  return (\r\n    <div hidden={value !== index} id={index}>\r\n      {value === index && <Typography component={'span'}>{children}</Typography>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Statistics = () => {\r\n    const [generalStats,setGeneralStats]=useState({})\r\n    const [list, setList] = useState([]);\r\n    const [feebackDataPie, setFeebackDataPie] = useState({});\r\n    const [isPie, setIsPie] = useState(false);\r\n    const [isClicked,setIsClicked]=useState(false)\r\n    const [isServerDown, setIsServerDown] = useState(false);\r\n\r\n\r\n\r\n\r\n    useEffect( ()=>{\r\n         fetchStatistics(\"view_general_stats\")\r\n         fetchStatistics(\"view_feedback\")\r\n    },[]);\r\n\r\n    function BasicTabs() {\r\n        const [value, setValue] = React.useState(0);\r\n      \r\n        const handleChange = (event, newValue) => {\r\n          setValue(newValue);\r\n        };\r\n      \r\n        return (\r\n          <>\r\n          <div className=\"d-flex flex-column justify-content-center align-items-center\">\r\n            <Tabs value={value} onChange={handleChange}>\r\n              <Tab label=\"Genral statistics\" />\r\n              <Tab label=\"feedbacks\" />\r\n            </Tabs>\r\n          </div>\r\n            \r\n            <TabPanel value={value} index={0}>\r\n            {(isPie)?(<div className='alldata'>\r\n              <div className='wrapper2 d-flex justify-content-center align-items-center'>\r\n                  <button className=\"update-button\" onClick={handleButtonClick} disabled={isClicked}>Update Statistics</button>\r\n                  <p className=\"date\">{generalStats[\"update date\"]?\"date: \"+generalStats[\"update date\"]:\"\"}</p>\r\n                  <p className=\"number\">{generalStats[\"users number\"]?\"users number: \"+generalStats[\"users number\"]:\"\"}</p>\r\n                  <br/>\r\n              </div>\r\n                  <div className='wrapper'>\r\n                  {list.map((opt,index) =>{\r\n                    return(\r\n                        <div key={index}>\r\n                            {opt[\"statName\"]+\":\"}\r\n                            <br/>\r\n                            <Pie data={getPieData(opt)} />\r\n                            <br/>\r\n                        </div>\r\n                    );\r\n                    },[])\r\n                  } \r\n                  </div>\r\n            </div>):<div className=\"loading\"><CircularProgress /></div>}\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n            {(isPie)?(\r\n                <div className=\"feedbacPie\">\r\n                <Pie data={feebackDataPie} />\r\n                </div>\r\n            ):(\"\")}\r\n            </TabPanel>\r\n          </>\r\n        );\r\n    }\r\n\r\n    function fetchStatistics(statName){\r\n        axios.post(\"/getStatistics\", {\r\n          goal: statName\r\n        }, {\r\n          headers: {\r\n          'Content-type': 'application/json; charset=UTF-8' } \r\n        })\r\n        .then((response) => {\r\n          if (response.data.success) {\r\n            console.log(\"Server returned statistics:\", response.data.message);\r\n            const res=response.data.message\r\n            if(statName===\"view_feedback\"){\r\n                setFeebackDataPie(getPieData(parseStatisticsData(res)))\r\n                setIsPie(true)\r\n            }else if(statName===\"view_general_stats\"||statName===\"calculate_general_stats\"){\r\n                setGeneralStats(res)\r\n                setList(parseGeneralData(res))\r\n                setIsPie(true)\r\n            }\r\n          } else {\r\n            console.log(\"Server did not return statistics: \", response.data.message);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          setIsServerDown(true)\r\n          console.log(\"Error getting statistics: \", err.message);\r\n        });\r\n    }\r\n\r\n    function getPieData(results){\r\n      const dataPie = {\r\n          labels: results[\"stats\"][\"labels\"],\r\n          datasets: [\r\n          {\r\n              label: results[\"statName\"],\r\n              data: results[\"stats\"][\"values\"],\r\n              backgroundColor: [\r\n              'rgba(255, 99, 132, 0.2)',\r\n              'rgba(54, 162, 235, 0.2)',\r\n              'rgba(255, 206, 86, 0.2)',\r\n              'rgba(75, 192, 192, 0.2)',\r\n              'rgba(153, 102, 255, 0.2)',\r\n              'rgba(255, 159, 64, 0.2)',\r\n              ],\r\n              borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 206, 86, 1)',\r\n              'rgba(75, 192, 192, 1)',\r\n              'rgba(153, 102, 255, 1)',\r\n              'rgba(255, 159, 64, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n          },\r\n          ],\r\n      }\r\n      return dataPie;\r\n    }\r\n\r\n    const handleButtonClick = () => {\r\n        fetchStatistics(\"calculate_general_stats\")\r\n        setIsPie(false)\r\n        setIsClicked(true)\r\n    };\r\n\r\n    return (\r\n    <div>\r\n      <Typography variant='h4' align=\"center\" m={2} fontFamily=\"Serif\">Statistics</Typography>\r\n      <p className=\"sentence\">The statistics here refer to the total number of <strong>chats</strong> made with JOBOT by the website's users</p>\r\n      {!isServerDown?(<  BasicTabs/>):(\r\n        <div style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}> <ErrorMessages /></div> )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/ConversationsPage.jsx",["258"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport ErrorMessages from \"../chatBotLogic/components/Options/ErrorMessages\"\n\nfunction ConversationsPage(props) {\n  const clientDetails=props.propValue\n  console.log(clientDetails);\n\n  const [historyItem, setHistoryItem] = useState(null);\n  const [result,setResult] = useState(false)\n  const [isServerDown, setIsServerDown] = useState(false);\n\n\n  useEffect(() => {\n    fetchHistory();\n  }, []);\n\n  const fetchHistory = () => {\n    axios.post('/viewhistory', { clientDetails })\n      .then(response => {\n        console.log(\"david \",response.data.content)\n        setHistoryItem(response.data.content);\n        setResult(true)\n      })\n      .catch(error => {\n        setIsServerDown(true)\n        console.error('Error fetching history:', error.message);\n      });\n  };\n\n  return (\n    <div className=\"conversations-page\">\n      {!isServerDown?(\n      (!result) ? (\n        <div className=\"loading\"><CircularProgress /></div>):(\n      (historyItem&&historyItem.length > 0)?(\n      <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}>\n        <div>\n          {historyItem.map((messageObj, index) => {\n            const sender = Object.keys(messageObj)[0];\n            const messages = messageObj[sender];\n            return (\n              <div\n                key={index}\n                style={{\n                  display: 'flex',\n                  justifyContent: sender === 'bot' ? 'flex-start' : 'flex-end',\n                  marginBottom: '1rem',\n                  marginTop: \"2rem\"\n                }}\n              >\n                <div\n                  style={{\n                    background: sender === 'bot' ? '#f5f5f5' : '#007bff',\n                    color: sender === 'bot' ? '#000' : '#fff',\n                    borderRadius: sender === 'bot' ? '15px 15px 15px 5px' : '15px 15px 5px 15px',\n                    padding: '10px',\n                    maxWidth: '70%',\n                    boxShadow: '0 2px 5px rgba(0, 0, 0, 0.1)',\n                  }}\n                >\n                  {messages.map((message, idx) => (\n                    <p key={idx}>{message}</p>\n                  ))}\n                </div>\n              </div>\n            );\n            })\n          }\n        </div>\n      </div>):(<p style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}>No history item found.</p>)\n      )\n      ):\n      (\n        <div style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}> <ErrorMessages /></div>\n      )\n      }\n    </div>\n  );\n}\n\nexport default ConversationsPage;\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/OfferedJobs.jsx",["259","260","261"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport starImage from './star.avif';\n\nimport {CardsTable} from \"./CardsTable.jsx\"\nimport ErrorMessages from \"../chatBotLogic/components/Options/ErrorMessages\"\nimport './JobsPage.css';\n\n\n\nfunction OfferedJobs(props) {\n  const state=props.propValue\n  const clientDetails = state.clientDetails;\n  console.log(clientDetails);\n\n  \n\n  const [jobs, setJobs] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isServerDown, setIsServerDown] = useState(false);\n  useEffect(() => {\n    fetchjobs();\n  }, []);\n\n  const fetchjobs = () => {\n    if(state.jobs==\"displayed\"){\n      axios.post('/offeredjobs', { clientDetails })\n      .then(response => {\n        setJobs(response.data.jobs);\n        setIsLoading(true)\n      })\n      .catch(error => {\n        setIsServerDown(true)\n        console.error('Error fetching jobs:', error.message);\n      });\n    }else{\n      axios.post('/selectededjobs', { clientDetails })\n      .then(response => {\n        setJobs(response.data.jobs);\n        setIsLoading(true)\n      })\n      .catch(error => {\n        setIsServerDown(true)\n        console.error('Error fetching jobs:', error.message);\n      });\n    }\n\n  };\n\n  function collapsed(job){\n    return (<div style={{textAlign:\"center\"}} >\n    {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n    {job.date&&<p className=\"job-date\"><AccessTimeIcon color=\"primary\" fontSize=\"\"/>{\"  \"+job.date}</p>}\n    {job.link&&<p className=\"job-link\">\n      <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        <LaunchIcon color=\"primary\"/>\n        {\"     \"+`${job.link.slice(0, 30)}...`}\n      </a>\n    </p>}\n    <p className=\"job-description\" style={{margin: \"0 2rem 2rem\"}}>{job.description}</p>\n    </div>)\n  }\n\n  const dataAsCards = jobs.map((job, index) => {\n    return {\n      content: <div style={{textAlign:\"center\"}}>\n                    <h2 className=\"job-title\">{job.job}</h2>\n                    <p>{job.company}</p>\n                    <p className=\"job-location\">{job.city}</p></div>,\n      collapsableContent: collapsed(job)\n    }\n  })\n\n  return (\n    <div>\n      {!isServerDown?(\n          (!isLoading) ? (\n            <div className=\"loading\"><CircularProgress /></div>\n          ) : (\n            <div>\n              {jobs&&jobs.length > 0 ? (\n                <div>\n                <CardsTable data={dataAsCards} />\n                </div>\n              ) : (\n                <p style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}>No jobs found.</p>\n              )}\n            </div>\n          )\n      ):(<div style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}> <ErrorMessages /></div>)}\n    </div>\n  );\n}\n\nexport default OfferedJobs;\n\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/HomeClient.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/UserDetails.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/register/Register.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/viewChatFlow.jsx",["262"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport chatFlow from \"../chatBotLogic/convert_tree_to_json\";\r\nimport ErrorMessages from \"../chatBotLogic/components/Options/ErrorMessages\"\r\nimport \"./viewChatFlow.css\"\r\n\r\nfunction ViewChatFlow() {\r\n  const [myObject, setMyObject] = useState(()=>{\r\n    try {\r\n      var obje = require('../chatBotLogic/decisionTree.json');\r\n      return obje;\r\n    } catch (error) {\r\n      obje = chatFlow;\r\n      axios.post('/write-json', obje, {\r\n          headers: {\r\n          'Content-type': 'application/json; charset=UTF-8' } \r\n        })\r\n        .then((response) => {\r\n          console.log(response.data.message);\r\n        })\r\n        .catch((error) => {\r\n          setIsServerDown(true)\r\n          console.error(error.response.data.error);\r\n        });\r\n        return obje\r\n    }});\r\n  const [isServerDown, setIsServerDown] = useState(false);\r\n\r\n  function RenderObject({ object }) {\r\n    const [editing, setEditing] = useState(false);\r\n    const [text, setText] = useState(object.text);\r\n    const [collapsed, setCollapsed] = useState(true);\r\n  \r\n    const handleSave = () => {\r\n      object.text = text;\r\n      setEditing(false);\r\n    };\r\n  \r\n    const handleCollapse = () => {\r\n      setCollapsed(!collapsed);\r\n    };\r\n  \r\n    return (\r\n      <ul>\r\n        <li className='vertix'>\r\n        <input className=\"description\" type=\"text\" value={object.title} readOnly/>\r\n          {editing ? (\r\n            <input className=\"text-content\" value={text} onChange={(e) => setText(e.target.value)} />\r\n          ) : (\r\n            <>\r\n              <button className=\"expand-button\" onClick={() => setEditing(true)}>Edit Formulation</button>\r\n              <input className=\"text-content\" type=\"text\" value={object.text} readOnly/>\r\n            </>\r\n          )}\r\n          {editing && <button className=\"expand-button\" onClick={handleSave}>Save</button>}\r\n          {object.children && object.children.length>0 && (<button className=\"expand-button\" onClick={handleCollapse}>\r\n          {collapsed ? 'Expand' : 'Collapse'}\r\n          </button>)}\r\n          </li>\r\n          <div>\r\n          {!collapsed && (\r\n            <div>\r\n              {object.children&&object.children.length>0&&(object.children.map((child,index) => (\r\n                <RenderObject key={index} object={child} />\r\n              )))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n      </ul>\r\n    );\r\n  }\r\n\r\n  const exportObject = () => {\r\n    axios.post('/write-json', myObject, {\r\n      headers: {\r\n      'Content-type': 'application/json; charset=UTF-8' } \r\n    })\r\n    .then((response) => {\r\n      console.log(response.data.message);\r\n    })\r\n    .catch((error) => {\r\n      setIsServerDown(true)\r\n      console.error(error.response.data.error);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"pedigree-tree\">\r\n      <Typography variant='h4' align=\"center\" m={2} fontFamily=\"Serif\">Decision Tree of the Chat Bot</Typography>\r\n      {!isServerDown?(\r\n        <>\r\n        <RenderObject object={myObject}/>\r\n        <button className=\"export-button\" onClick={exportObject} >Export</button>\r\n        </>\r\n      ):(<div style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}> <ErrorMessages /></div>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewChatFlow;\r\n\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/StartChat.jsx",["263"],[],"import React from \"react\";\r\nimport {useEffect} from \"react\"\r\nimport Chatbot from \"react-chatbot-kit\";\r\nimport \"react-chatbot-kit/build/main.css\";\r\n\r\nimport config from \"./config\";\r\nimport ActionProvider from \"./ActionProvider\";\r\nimport MessageParser from \"./MessageParser\";\r\nimport dec_tree from \"./getFlowText.js\"\r\nimport { useUser } from \"../../UserProvider.js\"\r\nimport \"./startChat.css\";\r\n\r\nfunction StartChat() {\r\n  const { userType } = useUser()\r\n  const clientDetails = userType.details\r\n  console.log(clientDetails)\r\n\r\n  dec_tree.setRegistrationDetails(clientDetails)\r\n\r\n  // const chatwindowconfig ={\r\n  //   width: \"350px\",\r\n  //   height: \"500px\",\r\n  //   floating: true,\r\n  // };\r\n\r\n  useEffect(()=> {\r\n    dec_tree.intialHead()\r\n    dec_tree.setRegistrationDetails(clientDetails)\r\n  }, [])\r\n\r\n  const validator = (input) => {\r\n    if((dec_tree.getIsFeedback()===1)||(dec_tree.getIsRequirements()===1)){\r\n      if(input.length > 0){\r\n        return true\r\n      }\r\n      return false;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {/* <Header/> */}\r\n    <div className=\"chatWindow\">\r\n      <div style={{ maxWidth: \"800px\" }}>\r\n      <Chatbot\r\n        config={config}\r\n        actionProvider={ActionProvider}\r\n        messageParser={MessageParser}\r\n        validator={validator}\r\n        // {...chatwindowconfig}\r\n      />\r\n      </div>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StartChat;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/logout/Logout.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/About.jsx",["264"],[],"import JobotLogoPNG from \"../JOBOT.png\";\r\n\r\nfunction About() {\r\n\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n  <div className=\"row h-100 justify-content-center align-items-center\">\r\n    <div className=\"col-md-6\">\r\n      <div >\r\n        <h2 className=\"d-flex justify-content-center align-items-center m-2\">About Us</h2>\r\n        <h5>In Short</h5>\r\n        <p>JOBOT was born out of a desire to create and define a job search platform.\r\n          A way that will try to \"score\" as close to the \"taste\" of the job seekers\r\n          and find them a job that will meet most of their requirements. JOBOT is a web application\r\n          through which you can conduct a chat with a bot. During the chat, we will receive data\r\n          from the user including the education and experience he has gained in the field\r\n          where he is interested in working and the system is looking for the jobs they can\r\n          match the data the user has provided. The goal is to find jobs\r\n          more accurate without unnecessary flooding of jobs.\r\n        </p>\r\n        <h5>Site Description</h5>\r\n        <p>The job database of JOBOT is based on the jobs on glassdoor website.<br/>\r\n        JOBOT currently focuses on 6 fields of jobs: Engineering, Marketing, Human Resources, Healthcare, Arts & Design, Finance & Accounting.\r\n        <br/>\r\n        In JOBOT chat we have chosen to present some prominent job titles' that exist in our system, but of course there is reference to other job titles' as well.\r\n        <br/>\r\n        In addition to the chat bot, the website also offers an independent job search.\r\n        You can search according to desired job, company and city filters.\r\n        </p>\r\n        <p>What details can you get about a job?\r\n        <br/>\r\n        <li>job title</li>\r\n        <li>company</li>\r\n        <li>city</li>\r\n        <li>job description</li>\r\n        <li>rating - general rating about the job</li>\r\n        <li>days - the number of days that have passed since the job was updated on the website</li>\r\n        <li>link - link for apply on employer site </li>\r\n        </p>\r\n        <br/>\r\n        <h5 className=\"d-flex justify-content-right align-items-right\" style={{color:\"blue\"}}>We come to improve your job search experience, so let's start...</h5>\r\n        <img src={JobotLogoPNG} style={{width:\"20%\"}}/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n  );\r\n}\r\n\r\nexport default About;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/CardsTable.jsx",["265","266"],[],"import {useState} from 'react'\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Pagination, Box} from \"@mui/material\"\r\nimport { CollapsableCard } from './CollapsableCard'\r\n\r\n\r\nexport const CardsTable = ({data}) => {\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 10;\r\n    const totalItems = data.length;\r\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n    const handlePageChange = (e, page) => {\r\n        setCurrentPage(page)\r\n    }\r\n\r\n    const generateTableData = (data) => {\r\n        const startIndex = (currentPage - 1) * itemsPerPage;\r\n        const endIndex = startIndex + itemsPerPage;\r\n        const currentPageData = data.slice(startIndex, endIndex)\r\n        return currentPageData\r\n    }\r\n\r\n    const tableData = generateTableData(data);\r\n\r\n    return (\r\n        <div className=\"w-50 d-flex flex-column mx-auto align-items-center justify-cotnent-center\">\r\n            <TableContainer>\r\n                <Table >\r\n                    <TableBody>\r\n                        {tableData.map((job, index)  => {\r\n                             return (\r\n                             <TableRow key={index}>\r\n                                <TableCell>\r\n                                    <CollapsableCard\r\n                                        style={{\r\n                                            display: \"flex\",\r\n                                            flexDirection: 'column',\r\n                                            alignItems: \"center\",\r\n                                            justifyContent: \"Center\",\r\n                                            width: \"100%\"\r\n                                        }}\r\n                                        content={job.content}\r\n                                        collapsableContent={job.collapsableContent}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            )\r\n                         })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            <Pagination\r\n                count={totalPages}\r\n                page={currentPage}\r\n                onChange={handlePageChange}\r\n            />\r\n        </div>\r\n    )\r\n}","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/getFlowText.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/convert_tree_to_json.js",["267","268","269"],[],"var jobTypes;\r\nvar successfulEnding;\r\nvar selfJobSearch;\r\nvar goodBy2;\r\nvar displayingAdaptedJobs;\r\nvar isAdditionalJobs;\r\nvar enterEmail;\r\nvar areas = {\r\n  title: \"\",\r\n  text: \"In which areas are you interested?\",\r\n  options: [\"South\", \"North\", \"Central\"],\r\n  children: [\r\n    {\r\n      title: \"user selected areas\",\r\n      text: \"Excellent, we will consider priority for these areas\",\r\n      children: [\r\n        (jobTypes = {\r\n          title: \"next question\",\r\n          text: \"Select a job type\",\r\n          options: [\"Full_time\", \"Part_time\"],\r\n          children: [\r\n            {\r\n              title: \"jobs scanning\",\r\n              text: \"Just a moment please, I'm looking for relevant jobs for you\",\r\n              children: [\r\n                {\r\n                  title: \"display appropriate jobs\",\r\n                  text: \"Please select appropriate jobs\",\r\n                  children: [\r\n                    {\r\n                      title: \"user selected 'Nothing fits' or up to 2 jobs\",\r\n                      text: \"Would you like to see jobs with an accurate match?\",\r\n                      options: [\"Yes\", \"No\"],\r\n                      children: [\r\n                        {\r\n                          title: \"user refused to an accurate match\",\r\n                          text: \"Why don't you want offers anymore?\",\r\n                          children: [\r\n                            (selfJobSearch = {\r\n                              title: \"send to self job search\",\r\n                              text: \"Ok, you have an opportunity to self job search from our jobs pool\",\r\n                              children: [\r\n                                (goodBy2 = {\r\n                                  title: \"goodbye\",\r\n                                  text: \"It was a pleasure to assist you. Thank you!\",\r\n                                }),\r\n                              ],\r\n                            }),\r\n                          ],\r\n                        },\r\n                        {\r\n                          title: \"user agreed to an accurate match\",\r\n                          text: \"Type your experience and education in the selected field\",\r\n                          children: [\r\n                            {\r\n                              //\r\n                              title: \"user typed his experience and education\",\r\n                              text: \"Select additional accuracy levels (Multiple choice)\",\r\n                              options: [\r\n                                \"Experience level\",\r\n                                \"Desired city\",\r\n                                \"Job title\",\r\n                                \"Other\",\r\n                              ],\r\n                              children: [\r\n                                (displayingAdaptedJobs = {\r\n                                  title:\r\n                                    \"user selected 'Other' level of accuracy\",\r\n                                  text: \"Just a moment please, I'm looking for more precise jobs for you\",\r\n                                  children: [\r\n                                    {\r\n                                      title: \"JOBOT search more precise jobs\",\r\n                                      text: \"Please select appropriate jobs\",\r\n                                      children: [\r\n                                        {\r\n                                          ...selfJobSearch,\r\n                                          title: \"user selected 'Nothing fits\",\r\n                                        },\r\n                                        (successfulEnding = {\r\n                                          title: \"user selected at least 1 job\",\r\n                                          text: \"Wonderful, how would you like to continue? (Multiple choice)\",\r\n                                          options: [\r\n                                            \"Display my choices again\",\r\n                                            \"Email them to me\",\r\n                                            \"Just keep going\",\r\n                                          ],\r\n                                          children: [\r\n                                            (isAdditionalJobs = {\r\n                                              title: \"self job search\",\r\n                                              text: \"Are you interested in viewing additional jobs in our web?\",\r\n                                              options: [\"Yes\", \"No\"],\r\n                                              children: [\r\n                                                {\r\n                                                  ...selfJobSearch,\r\n                                                  title:\r\n                                                    \"user selected 'yes' for viewing additional jobs\",\r\n                                                },\r\n                                                {\r\n                                                  ...goodBy2,\r\n                                                  title:\r\n                                                    \"user selected 'no' for viewing additional jobs\",\r\n                                                },\r\n                                              ],\r\n                                            }),\r\n                                            {\r\n                                              title:\r\n                                                \"user selected 'display choices'\",\r\n                                              text: \"There are your selected jobs\",\r\n                                              children: [isAdditionalJobs],\r\n                                            },\r\n                                            (enterEmail = {\r\n                                              title: \"user selected 'email me'\",\r\n                                              text: \"Please enter an email\",\r\n                                              children: [\r\n                                                {\r\n                                                  title: \"user sended an email\",\r\n                                                  text: \"The jobs were sent\",\r\n                                                  children: [isAdditionalJobs],\r\n                                                },\r\n                                              ],\r\n                                            }),\r\n                                          ],\r\n                                        }),\r\n                                      ],\r\n                                    },\r\n                                  ],\r\n                                }),\r\n                                {\r\n                                  title: \"user selected city accuracy\",\r\n                                  text: \"Select cities in your chosen regions\",\r\n                                  children: [\r\n                                    {\r\n                                      ...displayingAdaptedJobs,\r\n                                      title: \"user selected cities\",\r\n                                    },\r\n                                  ],\r\n                                },\r\n                                {\r\n                                  title:\r\n                                    \"user selected experience level accuracy\",\r\n                                  text: \"Select an experience level\",\r\n                                  options: [\r\n                                    \"Intern\",\r\n                                    \"Junior\",\r\n                                    \"Senior\",\r\n                                    \"Other\",\r\n                                  ],\r\n                                  children: [\r\n                                    {\r\n                                      ...displayingAdaptedJobs,\r\n                                      title:\r\n                                        \"user selected an experience level\",\r\n                                    },\r\n                                  ],\r\n                                },\r\n                                {\r\n                                  title: \"user selected job title accuracy\",\r\n                                  text: \"Enter a job title\",\r\n                                  children: [\r\n                                    {\r\n                                      ...displayingAdaptedJobs,\r\n                                      title: \"user inserted a job title\",\r\n                                    },\r\n                                  ],\r\n                                },\r\n                              ],\r\n                            }, //\r\n                          ],\r\n                        },\r\n                      ],\r\n                    },\r\n                    {\r\n                      ...successfulEnding,\r\n                      title: \"user selected 3 or more jobs\",\r\n                    },\r\n                  ],\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        }),\r\n      ],\r\n    },\r\n    // {...jobTypes,title:\"user selected 'all areas'\"}\r\n  ],\r\n};\r\n\r\nvar goodBy1;\r\nvar specificCompany;\r\nvar chatFlow = {\r\n  title: \"greeting\",\r\n  text: \"Hello, nice to meet you, I am JOBOT. I am here to help you find your dream job!\",\r\n  children: [\r\n    {\r\n      title: \"field\",\r\n      text: \"Select a field for job\",\r\n      options: [\r\n        \"Engineering\",\r\n        \"Marketing\",\r\n        \"Human Resources\",\r\n        \"Healthcare\",\r\n        \"Arts & Design\",\r\n        \"Finance & Accounting\",\r\n        \"Other\",\r\n      ],\r\n      children: [\r\n        {\r\n          title: \"user selected 'other' field\",\r\n          text: \"Sorry, there is not a job to offer you. Would you like us to save the chat details for future services?\",\r\n          options: [\"Yes\", \"No\"],\r\n          children: [\r\n            (goodBy1 = {\r\n              title: \"user agreed to save his details\",\r\n              text: \"Thank you for visiting our site.\",\r\n            }),\r\n            { ...goodBy1, title: \"user refused to save his details\" },\r\n          ],\r\n        },\r\n        {\r\n          title: \"user selected fields\",\r\n          text: \"Select a job title at this field (Multiple jobs)\",\r\n          options: [\r\n            {\r\n              Healthcare: [\r\n                \"Medical Assistant\",\r\n                \"Health representative\",\r\n                \"Production Scientist\",\r\n                \"Other\",\r\n              ],\r\n              Marketing: [\r\n                \"Product Marketing\",\r\n                \"Data Analyst\",\r\n                \"Marketing Designer\",\r\n                \"Other\",\r\n              ],\r\n              \"Arts & Design\": [\r\n                \"Designer\",\r\n                \"Chip Design Architect\",\r\n                \"Front End Developer\",\r\n                \"Other\",\r\n              ],\r\n              \"Human Resources\": [\r\n                \"Digital Key Account\",\r\n                \"Global HR Planning & Operations\",\r\n                \"Talent Acquisition Specialist\",\r\n                \"Other\",\r\n              ],\r\n              \"Finance & Accounting\": [\r\n                \"VP Finance\",\r\n                \"Business Development\",\r\n                \"Finance Controller\",\r\n                \"Other\",\r\n              ],\r\n              Engineering: [\r\n                \"QA Engineer\",\r\n                \"Network Engineer\",\r\n                \"Software Engineer\",\r\n                \"Other\",\r\n              ],\r\n            },\r\n          ],\r\n          children: [\r\n            (specificCompany = {\r\n              title: \"user selected job titles\",\r\n              text: \"Great! Do you have any specific companies that you would like to work at? (Multiple companies)\",\r\n              options: [\r\n                {\r\n                  Healthcare: [\r\n                    \"Diageo\",\r\n                    \"Edwards Lifesciences\",\r\n                    \"AstraZeneca\",\r\n                    \"Pfizer\",\r\n                    \"I'm open to any company\",\r\n                  ],\r\n                  Marketing: [\r\n                    \"Eybna Technologies\",\r\n                    \"InspHire\",\r\n                    \"Seperia\",\r\n                    \"Google\",\r\n                    \"I'm open to any company\",\r\n                  ],\r\n                  \"Arts & Design\": [\r\n                    \"Mobileye\",\r\n                    \"InspHire\",\r\n                    \"Oski Technology\",\r\n                    \"Palo Alto Networks\",\r\n                    \"I'm open to any company\",\r\n                  ],\r\n                  \"Human Resources\": [\r\n                    \"JobInfo\",\r\n                    \"ASM Global\",\r\n                    \"Adidas\",\r\n                    \"Solaredge\",\r\n                    \"I'm open to any company\",\r\n                  ],\r\n                  \"Finance & Accounting\": [\r\n                    \"Deloitte\",\r\n                    \"Mobileye\",\r\n                    \"Barclays\",\r\n                    \"Adidas\",\r\n                    \"I'm open to any company\",\r\n                  ],\r\n                  Engineering: [\r\n                    \"Google\",\r\n                    \"Deloitte\",\r\n                    \"SQLink\",\r\n                    \"Check Point Software Technologies Ltd.\",\r\n                    \"I'm open to any company\",\r\n                  ],\r\n                },\r\n              ],\r\n              children: [\r\n                {\r\n                  title: \"user selected companies\",\r\n                  text: \"Excellent, we will consider priority for these companies\",\r\n                  children: [{ ...areas, title: \"next question\" }],\r\n                },\r\n                // {...areas,title: \"user selected 'all companies'\"}\r\n              ],\r\n            }),\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\n// function writeDecisionTreeJSON(){\r\n//   const FileSystem = require(\"fs\");\r\n//   FileSystem.writeFile('React_JobBot/src/pages/chatBotLogic/decisionTree.json', JSON.stringify(chatFlow), (err) => {\r\n//      if (err) throw err;\r\n//    });\r\n// }\r\n// writeDecisionTreeJSON();\r\n\r\nexport default chatFlow;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/config.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/ActionProvider.js",["270","271","272","273","274","275","276","277","278"],[],"import axios from \"axios\";\r\nimport emailjs from \"@emailjs/browser\";\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  saveHistoryInDB = (node) => {\r\n    node.getSelected()[\"displayed jobs\"] &&\r\n      delete node.getSelected()[\"displayed jobs\"];\r\n    const current = new Date();\r\n    const date = `${current.getDate()}/${\r\n      current.getMonth() + 1\r\n    }/${current.getFullYear()}`;\r\n    var history = {\r\n      ...node.getSavedInDB(),\r\n      \"client details\": node.getRegistrationDetails(),\r\n      field: node.getSelected().field,\r\n      \"conversation content\": node.getHistoryChat(),\r\n      \"displayed jobs\": node.getSavedInDB()[\"displayed jobs\"]\r\n        ? node.getSavedInDB()[\"displayed jobs\"]\r\n        : \"-\",\r\n      \"selected jobs\": node.getSavedInDB()[\"selected jobs\"]\r\n        ? node.getSavedInDB()[\"selected jobs\"]\r\n        : \"-\",\r\n      \"experiance & education\": node.getSelected()[\"job Requirements\"]\r\n        ? node.getSelected()[\"job Requirements\"]\r\n        : \"-\",\r\n      \"feedback on termination\": node.getSavedInDB()[\"feedback on termination\"]\r\n        ? node.getSavedInDB()[\"feedback on termination\"]\r\n        : \"-\",\r\n      \"selected features\": node.getSelected(),\r\n      date: date,\r\n    };\r\n    // console.log(\"save data in DB \",history)\r\n    node.setSavedInDB(history);\r\n\r\n    //call server with 'history' var\r\n    // axios.post('/clienthistory', {\r\n    //   history: history\r\n    // }, {\r\n    //   headers: {\r\n    //   'Content-type': 'application/json; charset=UTF-8' }\r\n    // })\r\n    // .then((response) => {\r\n    //   console.log(response.data.message);\r\n    //   console.log(\"save data in DB \",history)\r\n    // })\r\n    // .catch((error) => {\r\n    //   console.error(error.response.data.error);\r\n    // });\r\n  };\r\n\r\n  errorMessages = (node, errorMessage) => {\r\n    const message = this.createChatBotMessage(errorMessage, {\r\n      widget: \"errorMessages\",\r\n    });\r\n    this.addMessageToState(message, node);\r\n  };\r\n\r\n  selfSearch = (node, Freetxt) => {\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1, {\r\n      widget: \"moreInfo\",\r\n    });\r\n    this.addMessageToState(message1, node);\r\n\r\n    //goodbye\r\n    var txt2 = node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(txt2);\r\n\r\n    //set history\r\n    if (\r\n      typeof Freetxt === \"object\" &&\r\n      Freetxt !== null &&\r\n      (Freetxt.flag === \"noJobs\" || Freetxt.flag === \"feedback\")\r\n    ) {\r\n      //adding the bot message into the end of history\r\n      var newHistoryArray = node.getHistoryChat();\r\n      var lastBotHistory = newHistoryArray.pop();\r\n      lastBotHistory.bot.push(txt1, txt2);\r\n      var updatedBotHistory = { bot: lastBotHistory.bot };\r\n      node.setHistoryChat([...newHistoryArray, updatedBotHistory]);\r\n    } else {\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: [Freetxt] },\r\n        { bot: [txt1, txt2] },\r\n      ]);\r\n    }\r\n    console.log(\"history \", node.getHistoryChat());\r\n    node.setIsFeedback(0);\r\n    this.addMessageToState(message2, node);\r\n    this.saveHistoryInDB(node);\r\n  };\r\n\r\n  responseToFeedback = (node, feedback, JOBOTresponse) => {\r\n    const message = this.createChatBotMessage(JOBOTresponse);\r\n    this.addMessageToState(message, node);\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: [feedback] },\r\n      { bot: [JOBOTresponse] },\r\n    ]);\r\n    node.setSelected({ ...node.getSelected(), feedback: feedback });\r\n  };\r\n\r\n  handleField = (node, opt) => {\r\n    // console.log(\"Thank you god!\",node.getRegistrationDetails())\r\n    var txt = node.getNextResponse().children[0].children[1].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"jobTitles\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), field: opt });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      {\r\n        bot: [\r\n          node.getNextResponse().text,\r\n          node.getNextResponse().children[0].text,\r\n        ],\r\n      },\r\n      { user: [opt] },\r\n      { bot: [txt] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[1]);\r\n    this.addMessageToState(message, node);\r\n  };\r\n\r\n  handleOtherField = (node, opt) => {\r\n    var txt = node.getNextResponse().children[0].children[0].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"approval\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), field: opt });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      {\r\n        bot: [\r\n          node.getNextResponse().text,\r\n          node.getNextResponse().children[0].text,\r\n        ],\r\n      },\r\n      { user: [opt] },\r\n      { bot: [txt] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n    this.addMessageToState(message, node);\r\n  };\r\n\r\n  handleApproval(node, opt) {\r\n    //case of asking for saving chat details in our system\r\n    if (node.getNextResponse().title === \"user selected 'other' field\") {\r\n      var txt = node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"moreInfo\",\r\n      });\r\n      node.setSelected({ ...node.getSelected(), approval: opt });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: [opt] },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      this.addMessageToState(message, node);\r\n      if (opt === \"Yes\") {\r\n        this.saveHistoryInDB(node);\r\n      }\r\n    }\r\n    //case of asking for self job search\r\n    else if (node.getNextResponse().title.includes(\"self job search\")) {\r\n      if (opt === \"Yes\") {\r\n        this.selfSearch(node, opt);\r\n      } else {\r\n        var txt = node.getNextResponse().children[1].text;\r\n        const message = this.createChatBotMessage(txt);\r\n        node.setHistoryChat([\r\n          ...node.getHistoryChat(),\r\n          { user: [opt] },\r\n          { bot: [txt] },\r\n        ]);\r\n        console.log(\"history \", node.getHistoryChat());\r\n        this.addMessageToState(message, node);\r\n        this.saveHistoryInDB(node);\r\n      }\r\n    }\r\n    //case of asking for accurate match\r\n    else if (\r\n      node.getNextResponse().title ===\r\n      \"user selected 'Nothing fits' or up to 2 jobs\"\r\n    ) {\r\n      //user want an accurate match\r\n      if (opt === \"Yes\") {\r\n        node.setHistoryChat([...node.getHistoryChat(), { user: [opt] }]);\r\n        document.documentElement.style.setProperty(\r\n          \"--button-visibility\",\r\n          \"visible\"\r\n        );\r\n        this.requirementsWidget(node);\r\n      } else {\r\n        //user did not want an accurate match\r\n        var txt = node.getNextResponse().children[0].text;\r\n        const message = this.createChatBotMessage(txt);\r\n        node.setHistoryChat([\r\n          ...node.getHistoryChat(),\r\n          { user: [opt] },\r\n          { bot: [txt] },\r\n        ]);\r\n        console.log(\"history \", node.getHistoryChat());\r\n        node.setIsFeedback(1);\r\n        node.setNextResponse(node.getNextResponse().children[0]);\r\n        this.addMessageToState(message, node);\r\n        document.documentElement.style.setProperty(\r\n          \"--button-visibility\",\r\n          \"visible\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  handleJobTitle = (node, opts) => {\r\n    var txt = node.getNextResponse().children[0].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"companies\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), JobTitles: opts });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: opts },\r\n      { bot: [txt] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0]);\r\n    this.addMessageToState(message, node);\r\n  };\r\n\r\n  handleCompany = (node, opts) => {\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    var txt2 = node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(txt2, {\r\n      widget: \"areas\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), companies: opts });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: opts },\r\n      { bot: [txt1, txt2] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n    this.addMessageToState(message2, node);\r\n  };\r\n\r\n  handleArea(node, opts) {\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    var txt2 = node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(txt2, {\r\n      widget: \"jobTypes\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), areas: opts });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: opts },\r\n      { bot: [txt1, txt2] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n    this.addMessageToState(message2, node);\r\n  }\r\n\r\n  handleJobType(node, opts) {\r\n    //asking to wait\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    //server calculating jobs...\r\n    node.setSelected({ ...node.getSelected(), \"job Types\": opts });\r\n    var responses = {\r\n      ...node.getSelected(),\r\n      \"client details\": node.getRegistrationDetails(),\r\n    };\r\n    axios\r\n      .post(\r\n        \"/getfirstjobs\",\r\n        {\r\n          responses: responses,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          console.log(\r\n            \"Server returned matching jobs:\",\r\n            response.data.list_jobs\r\n          );\r\n          node.setJobs(response.data.list_jobs);\r\n\r\n          if (node.getSavedInDB()[\"displayed jobs\"]) {\r\n            node.setSavedInDB({\r\n              ...node.getSavedInDB(),\r\n              \"displayed jobs\": node\r\n                .getSavedInDB()\r\n                [\"displayed jobs\"].concat(node.getJobs()),\r\n            });\r\n          } else {\r\n            node.setSavedInDB({\r\n              ...node.getSavedInDB(),\r\n              \"displayed jobs\": node.getJobs(),\r\n            });\r\n          }\r\n\r\n          //continute\r\n          if (response.data.list_jobs.length !== 0) {\r\n            var txt2 = node.getNextResponse().children[0].children[0].text;\r\n            const message2 = this.createChatBotMessage(txt2, {\r\n              widget: \"jobs\",\r\n            });\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { user: opts },\r\n              { bot: [txt1, txt2] },\r\n            ]);\r\n            node.setSelected({\r\n              ...node.getSelected(),\r\n              \"displayed jobs\": response.data.list_jobs,\r\n            });\r\n            console.log(\"history \", node.getHistoryChat());\r\n            node.setNextResponse(\r\n              node.getNextResponse().children[0].children[0]\r\n            );\r\n            this.addMessageToState(message2, node);\r\n          } else {\r\n            var txt2 = \"No jobs found\";\r\n            const message2 = this.createChatBotMessage(txt2);\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { user: opts },\r\n              { bot: [txt1, txt2] },\r\n            ]);\r\n            console.log(\"history \", node.getHistoryChat());\r\n            node.setNextResponse(\r\n              node.getNextResponse().children[0].children[0]\r\n            );\r\n            this.addMessageToState(message2, node);\r\n            //continute to accuracy phase\r\n\r\n            node.incCountNotFits(node.getCountNotFits());\r\n            this.handleJob(node, [\"No jobs\"]);\r\n          }\r\n        } else {\r\n          console.log(\"Error getting matching jobs: \", response.data.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this.errorMessages(node, err.message);\r\n        console.log(\"Error getting matching jobs: \", err.message);\r\n      });\r\n  }\r\n\r\n  handleJob(node, opts) {\r\n    var isJobs = 1;\r\n    if (opts[0] === \"No jobs\") {\r\n      opts[0] = \"Nothing fits\";\r\n      isJobs = 0;\r\n    }\r\n    if (opts[0] === \"Nothing fits\") {\r\n      if (node.getCountNotFits() === 1) {\r\n        var txt = node.getNextResponse().children[0].text;\r\n        const message = this.createChatBotMessage(txt, {\r\n          widget: \"approval\",\r\n        });\r\n        this.addMessageToState(message, node);\r\n\r\n        //adding the bot message into the end of history\r\n        if (isJobs === 1) {\r\n          //check if it is a case that user selected 1 or 2 jobs in the first matching jobs\r\n          if (node.getSelectedJobs().length > 0) {\r\n            opts = node.getSelectedJobs();\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { user: opts },\r\n              { bot: [txt] },\r\n            ]);\r\n          } else {\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { user: opts },\r\n              { bot: [txt] },\r\n            ]);\r\n          }\r\n        } else {\r\n          var newHistoryArray = node.getHistoryChat();\r\n          var lastBotHistory = newHistoryArray.pop();\r\n          lastBotHistory.bot.push(txt);\r\n          var updatedBotHistory = { bot: lastBotHistory.bot };\r\n          node.setHistoryChat([...newHistoryArray, updatedBotHistory]);\r\n        }\r\n        node.setNextResponse(node.getNextResponse().children[0]);\r\n      } else if (node.getCountNotFits() === 2) {\r\n        if (isJobs === 1) {\r\n          this.selfSearch(node, opts[0]);\r\n        } else {\r\n          this.selfSearch(node, { flag: \"noJobs\" });\r\n        }\r\n      }\r\n      //client selected up to 2 jobs before the first jobs round\r\n    } else if (opts.length <= 2 && node.getIsJobAccuracy() === 0) {\r\n      var txt = node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"approval\",\r\n      });\r\n      this.addMessageToState(message, node);\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt] },\r\n      ]);\r\n      node.setNextResponse(node.getNextResponse().children[0]);\r\n      //client selected 3 or more jobs\r\n    } else {\r\n      txt = node.getNextResponse().children[1].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"displayEmail\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"I chose jobs  \", node.getSelectedJobs());\r\n      node.setNextResponse(node.getNextResponse().children[1]);\r\n      this.addMessageToState(message, node);\r\n    }\r\n  }\r\n\r\n  handleDisplayEmail(node, opts) {\r\n    //user selected 'Just keep going'\r\n    if (opts[0] === \"Just keep going\") {\r\n      var txt = node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"approval\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0]);\r\n      this.addMessageToState(message, node);\r\n    }\r\n    //user selected 'Display choices'\r\n    else if (opts.length === 1 && opts.includes(\"Display my choices again\")) {\r\n      var txt1 = node.getNextResponse().children[1].text;\r\n      const message1 = this.createChatBotMessage(txt1, {\r\n        widget: \"displaySelectedJobs\",\r\n      });\r\n      this.addMessageToState(message1, node);\r\n      var txt2 = node.getNextResponse().children[1].children[0].text;\r\n      const message2 = this.createChatBotMessage(txt2, {\r\n        widget: \"approval\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt1, txt2] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[1].children[0]);\r\n      this.addMessageToState(message2, node);\r\n    }\r\n    //user selected 'Email them to me'\r\n    else if (opts.length === 1 && opts.includes(\"Email them to me\")) {\r\n      var txt = node.getNextResponse().children[2].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"email\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[2]);\r\n      this.addMessageToState(message, node);\r\n    }\r\n    //user selected 'Display choices and Email them to me'\r\n    else {\r\n      var txt1 = node.getNextResponse().children[1].text;\r\n      const message1 = this.createChatBotMessage(txt1, {\r\n        widget: \"displaySelectedJobs\",\r\n      });\r\n      this.addMessageToState(message1, node);\r\n\r\n      var txt2 = node.getNextResponse().children[2].text;\r\n      const message2 = this.createChatBotMessage(txt2, {\r\n        widget: \"email\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt1, txt2] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[2]);\r\n      this.addMessageToState(message2, node);\r\n    }\r\n  }\r\n\r\n  filterObjectsById(objects, selectedObjects) {\r\n    let filteredObjects = [];\r\n    objects.map((obj) => {\r\n      if (selectedObjects.includes(obj._id)) {\r\n        filteredObjects.push(obj);\r\n      }\r\n    });\r\n    return filteredObjects;\r\n  }\r\n\r\n  dataForEmail(node) {\r\n    const displayedJobs = node.getSavedInDB()[\"displayed jobs\"];\r\n    const selectedJobs = node.getSavedInDB()[\"selected jobs\"];\r\n    const selectedJobsDetails = this.filterObjectsById(\r\n      displayedJobs,\r\n      selectedJobs\r\n    );\r\n    const message = selectedJobsDetails\r\n      .map((job) => {\r\n        let details = \"\";\r\n\r\n        if (job.job) {\r\n          details += `Job: ${job.job}\\n`;\r\n        }\r\n\r\n        if (job.company) {\r\n          details += `Company: ${job.company}\\n`;\r\n        }\r\n\r\n        if (job.city) {\r\n          details += `City: ${job.city}\\n`;\r\n        }\r\n\r\n        if (job.link) {\r\n          details += `Link for apply: ${job.link.substring(0, 25)}${\r\n            job.link.length > 25 ? \"...\" : \"\"\r\n          }\\n`;\r\n        }\r\n\r\n        if (job.rating) {\r\n          details += `Rating: ${job.rating} stars\\n`;\r\n        }\r\n\r\n        if (job.date) {\r\n          details += `Elapsed time since update: ${job.date}\\n`;\r\n        }\r\n\r\n        // if (job.description) {\r\n        //   details += `Description: ${job.description}\\n`;\r\n        // }\r\n\r\n        return details;\r\n      })\r\n      .join(\"\\n\\n\");\r\n\r\n    return message;\r\n  }\r\n\r\n  nextBotMessagesAfterEmail = (node, email, txt1) => {\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    var txt2 = node.getNextResponse().children[0].children[0].text;\r\n    console.log(\"text after \", node.getNextResponse().text);\r\n    const message2 = this.createChatBotMessage(txt2, {\r\n      widget: \"approval\",\r\n    });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: email },\r\n      { bot: [txt1, txt2] },\r\n    ]);\r\n    console.log(\"history \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n    this.addMessageToState(message2, node);\r\n  };\r\n\r\n  handleEmail(node, email) {\r\n    if (email === \"\") {\r\n      var txt = node.getNextResponse().children[0].children[0].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"approval\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: email },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n      this.addMessageToState(message, node);\r\n    } else {\r\n      const Emailmessage = this.dataForEmail(node);\r\n      const data = {\r\n        to_name: node.getRegistrationDetails().userName,\r\n        from_name: \"JOBOT\",\r\n        to_email: email,\r\n        message: Emailmessage,\r\n      };\r\n      emailjs\r\n        .send(\"service_0sya75j\", \"template_fkjypxk\", data, \"zH-UqP85Fm0Jcaud3\")\r\n        .then(\r\n          (result) => {\r\n            console.log(\"Sended\");\r\n            console.log(result.text);\r\n            this.nextBotMessagesAfterEmail(\r\n              node,\r\n              email,\r\n              node.getNextResponse().children[0].text\r\n            );\r\n          },\r\n          (error) => {\r\n            console.log(\"NOT Sended\");\r\n            console.log(error.text);\r\n            const txt1 = \"Apologies, the email could not be sent.\";\r\n            this.nextBotMessagesAfterEmail(node, email, txt1);\r\n          }\r\n        );\r\n    }\r\n  }\r\n\r\n  handleAccuracyLevel(node, opts) {\r\n    var tempNodeObject = { ...node.getAccuracyNode() };\r\n    node.setNextResponse(tempNodeObject);\r\n    if (opts.includes(\"Experience level\")) {\r\n      this.experienceWidget(node);\r\n    } else if (opts.includes(\"Desired city\")) {\r\n      this.cityWidget(node);\r\n    } else if (opts.includes(\"Job title\")) {\r\n      this.jobTitleTypingWidget(node);\r\n    } else {\r\n      console.log(\"server match\");\r\n      this.accurateJobsWidget(node);\r\n    }\r\n  }\r\n\r\n  experienceWidget(node) {\r\n    var txt = node.getNextResponse().children[2].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"experienceLevel\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    node.setNextResponse(node.getNextResponse().children[2]);\r\n    this.addMessageToState(message, node);\r\n  }\r\n\r\n  handleExperienceLevel(node, opts) {\r\n    if (opts[0] !== \"Other\") {\r\n      node.setIsJobAccuracy(1);\r\n    }\r\n    node.setSelected({ ...node.getSelected(), \"experience level\": opts });\r\n    node.setHistoryChat([...node.getHistoryChat(), { user: opts }]);\r\n    console.log(\"history in hanExp \", node.getHistoryChat());\r\n    //remove 'Experience level' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(\r\n      node\r\n        .getAccuracyOptions()\r\n        .filter((selectedOption) => selectedOption !== \"Experience level\")\r\n    );\r\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\r\n  }\r\n\r\n  cityWidget(node) {\r\n    var txt = node.getNextResponse().children[1].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"cities\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    node.setNextResponse(node.getNextResponse().children[1]);\r\n    console.log(\"history in cityWidget \", node.getHistoryChat());\r\n    this.addMessageToState(message, node);\r\n  }\r\n\r\n  handleCities(node, opts) {\r\n    if (opts[0] !== \"Other\") {\r\n      node.setIsJobAccuracy(1);\r\n    }\r\n    node.setSelected({ ...node.getSelected(), cities: opts });\r\n    node.setHistoryChat([...node.getHistoryChat(), { user: opts }]);\r\n    console.log(\"history in hanCities \", node.getHistoryChat());\r\n    //remove 'Desired city' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(\r\n      node\r\n        .getAccuracyOptions()\r\n        .filter((selectedOption) => selectedOption !== \"Desired city\")\r\n    );\r\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\r\n  }\r\n\r\n  requirementsWidget(node) {\r\n    var txt = node.getNextResponse().children[1].text;\r\n    const message = this.createChatBotMessage(txt);\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    node.setNextResponse(node.getNextResponse().children[1]);\r\n    console.log(\"history in requirementsWidget \", node.getHistoryChat());\r\n    node.setIsRequirements(1);\r\n    this.addMessageToState(message, node);\r\n  }\r\n\r\n  handleRequirements(node, msg) {\r\n    document.documentElement.style.setProperty(\"--button-visibility\", \"hidden\");\r\n    //typing about job requirements is stopped\r\n    node.setIsRequirements(0);\r\n    //flag that the client need job accuracy\r\n    node.setIsJobAccuracy(1);\r\n\r\n    node.setSelected({ ...node.getSelected(), \"job Requirements\": msg });\r\n    node.setHistoryChat([...node.getHistoryChat(), { user: [msg] }]);\r\n    console.log(\"history in handleRequirements \", node.getHistoryChat());\r\n    console.log(\"selected in handleRequirements \", node.getSelected());\r\n    var txt = node.getNextResponse().children[0].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"accuracyLevel\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    console.log(\"history \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0]);\r\n    this.addMessageToState(message, node);\r\n  }\r\n\r\n  jobTitleTypingWidget(node) {\r\n    var txt = node.getNextResponse().children[3].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"jobTitleTyping\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    node.setNextResponse(node.getNextResponse().children[3]);\r\n    console.log(\r\n      \"history in jobTitleTypingWidgetTyping \",\r\n      node.getHistoryChat()\r\n    );\r\n    this.addMessageToState(message, node);\r\n  }\r\n  handleJobTitleTyping(node, msg) {\r\n    //flag that the client need job accuracy\r\n    node.setIsJobAccuracy(1);\r\n\r\n    if (msg !== \"\") {\r\n      node.setSelected({ ...node.getSelected(), \"additional job title\": msg });\r\n    }\r\n    node.setHistoryChat([...node.getHistoryChat(), { user: [msg] }]);\r\n    console.log(\"history in handleIsJobTitleTyping \", node.getHistoryChat());\r\n    console.log(\"selected in handleIsJobTitleTyping \", node.getSelected());\r\n    //remove 'Job title' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(\r\n      node\r\n        .getAccuracyOptions()\r\n        .filter((selectedOption) => selectedOption !== \"Job title\")\r\n    );\r\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\r\n  }\r\n\r\n  accurateJobsWidget(node) {\r\n    //asking to wait\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    //server calculating jobs...\r\n    console.log(\"new selected \", node.getSelected());\r\n    var responses = {\r\n      ...node.getSelected(),\r\n      \"client details\": node.getRegistrationDetails(),\r\n    };\r\n    axios\r\n      .post(\r\n        \"/getsecondjobs\",\r\n        {\r\n          responses: responses,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n          },\r\n        }\r\n      )\r\n\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          console.log(\r\n            \"Server returned matching jobs:\",\r\n            response.data.list_jobs\r\n          );\r\n          node.setJobs(response.data.list_jobs);\r\n          if (node.getSavedInDB()[\"displayed jobs\"]) {\r\n            node.setSavedInDB({\r\n              ...node.getSavedInDB(),\r\n              \"displayed jobs\": node\r\n                .getSavedInDB()\r\n                [\"displayed jobs\"].concat(node.getJobs()),\r\n            });\r\n          } else {\r\n            node.setSavedInDB({\r\n              ...node.getSavedInDB(),\r\n              \"displayed jobs\": node.getJobs(),\r\n            });\r\n          }\r\n\r\n          //UNIT TEST//\r\n          //continute\r\n          if (response.data.list_jobs.length !== 0) {\r\n            if (response.data.list_jobs.length > 1) {\r\n              var txt2 = `With all the information you provided me, I find for you these top ${response.data.list_jobs.length} jobs`;\r\n              const message2 = this.createChatBotMessage(txt2);\r\n              this.addMessageToState(message2, node);\r\n            }\r\n            var txt3 = node.getNextResponse().children[0].children[0].text;\r\n            const message3 = this.createChatBotMessage(txt3, {\r\n              widget: \"jobs\",\r\n            });\r\n            if (response.data.list_jobs.length > 1) {\r\n              node.setHistoryChat([\r\n                ...node.getHistoryChat(),\r\n                { bot: [txt1, txt2, txt3] },\r\n              ]);\r\n            } else {\r\n              node.setHistoryChat([\r\n                ...node.getHistoryChat(),\r\n                { bot: [txt1, txt3] },\r\n              ]);\r\n            }\r\n            console.log(\r\n              \"history in accurate jobs handle \",\r\n              node.getHistoryChat()\r\n            );\r\n            node.setNextResponse(\r\n              node.getNextResponse().children[0].children[0]\r\n            );\r\n            this.addMessageToState(message3, node);\r\n          } else {\r\n            var txt2 = \"No jobs found\";\r\n            const message2 = this.createChatBotMessage(txt2);\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { bot: [txt1, txt2] },\r\n            ]);\r\n            console.log(\"history \", node.getHistoryChat());\r\n            node.setNextResponse(\r\n              node.getNextResponse().children[0].children[0]\r\n            );\r\n            this.addMessageToState(message2, node);\r\n\r\n            //continute to accuracy phase\r\n            node.incCountNotFits(node.getCountNotFits());\r\n            this.handleJob(node, [\"No jobs\"]);\r\n          }\r\n        } else {\r\n          console.log(\"Error getting matching jobs: \", response.data.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this.errorMessages(node, err.message);\r\n        console.log(\"Error getting matching jobs: \", err.message);\r\n      });\r\n  }\r\n\r\n  addMessageToState = (message, node) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        messages: [...prevState.messages, message],\r\n        head: node,\r\n      };\r\n    });\r\n  };\r\n}\r\n\r\nexport default ActionProvider;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/MessageParser.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/ErrorMessages.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/CollapsableCard.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/MyCustomChatMessage.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Areas.jsx",["279"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Areas = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.length===3){\r\n      props.actionProvider.handleArea(props.node,[\"All\"]);\r\n    }else{\r\n      props.actionProvider.handleArea(props.node,selectedOptions);\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange}/>\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Areas;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/FieldOptions.jsx",["280"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst FieldOptions = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Engineering\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().children[0].options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options radio: \", selectedOption);\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    switch(selectedOption) {\r\n      case \"Other\":\r\n        props.actionProvider.handleOtherField(props.node,selectedOption);\r\n        break;\r\n      default:\r\n        props.actionProvider.handleField(props.node,selectedOption);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"field\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default FieldOptions;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTitles.jsx",["281"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst JobTitles = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  useEffect(\r\n    ()=>{\r\n        var selectedField=props.node.getSelected().field;\r\n        setOptions(props.node.getNextResponse().options[0][selectedField])\r\n    }\r\n    ,[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    props.actionProvider.handleJobTitle(props.node,selectedOptions);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default JobTitles;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Companies.jsx",["282"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Companies = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n\r\n  useEffect(\r\n    ()=>{\r\n        var selectedField=props.node.getSelected().field;\r\n        setOptions(props.node.getNextResponse().options[0][selectedField])\r\n    }\r\n    ,[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    props.actionProvider.handleCompany(props.node,selectedOptions);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Companies;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTypes.jsx",["283"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst JobTypes = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Full_time\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleJobType(props.node,[selectedOption])\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"jobType\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default JobTypes;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Jobs.jsx",["284"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport JobCard from \"./JobCard.jsx\"\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Jobs = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [selectedJobId, setSelectedJobId] = useState(null);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  useEffect(()=>{setOptions([...props.node.getJobs(),{_id:\"Nothing fits\"}])},[]);\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options1: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Nothing fits\")){\r\n      props.node.incCountNotFits(props.node.getCountNotFits());\r\n      console.log(\"count \",props.node.getCountNotFits())\r\n      props.actionProvider.handleJob(props.node,[\"Nothing fits\"]);\r\n    }else if((selectedOptions.length<=2)&&props.node.getCountNotFits()===0){\r\n      props.node.incCountNotFits(props.node.getCountNotFits());\r\n      //update selected jobs in state\r\n      if(props.node.getSavedInDB()[\"selected jobs\"]){\r\n        props.node.setSavedInDB({...props.node.getSavedInDB(),\"selected jobs\":props.node.getSavedInDB()[\"selected jobs\"].concat(selectedOptions)});\r\n      }else{\r\n        props.node.setSavedInDB({...props.node.getSavedInDB(),\"selected jobs\":selectedOptions});\r\n      }\r\n      //\r\n      props.node.setSelectedJobs(selectedOptions)\r\n      console.log(\"selected jobs \",props.node.getSelectedJobs())\r\n      props.actionProvider.handleJob(props.node,[\"Nothing fits\"]);\r\n    }else{\r\n      //update selected jobs in state\r\n      if(props.node.getSavedInDB()[\"selected jobs\"]){\r\n        props.node.setSavedInDB({...props.node.getSavedInDB(),\"selected jobs\":props.node.getSavedInDB()[\"selected jobs\"].concat(selectedOptions)});\r\n      }else{\r\n        props.node.setSavedInDB({...props.node.getSavedInDB(),\"selected jobs\":selectedOptions});\r\n      }\r\n      //\r\n      props.node.setSelectedJobs(selectedOptions)\r\n      props.actionProvider.handleJob(props.node,selectedOptions);\r\n    }\r\n  };\r\n\r\n  const onCardClick = (id) => {\r\n    setSelectedJobId(selectedJobId === id ? null : id);\r\n  };\r\n    \r\n  return(\r\n   <form onSubmit={handleSubmit}>\r\n    {options.map((job,index) => (\r\n      <div key={index}>\r\n          <input\r\n          className=\"checkbox\"\r\n          type=\"checkbox\"\r\n          value={job._id}\r\n          onChange={handleOptionChange}\r\n          disabled={(job._id!==\"Nothing fits\")&&selectedOptions.includes(\"Nothing fits\")}\r\n          />\r\n          {/* {job._id} */}\r\n\r\n          <JobCard\r\n          key={index}\r\n          job={job}\r\n          isSelected={job._id === selectedJobId}\r\n          onCardClick={onCardClick}\r\n          />\r\n      </div>\r\n      ))\r\n    }\r\n    <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n   </form>\r\n  );\r\n};\r\n\r\nexport default Jobs;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Approval.jsx",["285"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Approval = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Yes\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Y/N radio: \", selectedOption);\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleApproval(props.node,selectedOption)\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"approval\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default Approval;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/DisplayEmail.jsx",["286"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst DisplayEmail = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  useEffect(\r\n    ()=>{\r\n      setOptions(props.node.getNextResponse().options)\r\n    }\r\n    ,[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options1: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Just keep going\")){\r\n      props.actionProvider.handleDisplayEmail(props.node,[\"Just keep going\"]);\r\n    }else{\r\n      props.actionProvider.handleDisplayEmail(props.node,selectedOptions);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange}\r\n            disabled={(opt!==\"Just keep going\")&&selectedOptions.includes(\"Just keep going\")} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default DisplayEmail;\r\n\r\n\r\n\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/DisplaySelectedJobs.jsx",["287","288"],[],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport JobCard from \"./JobCard.jsx\";\r\n\r\nconst filterObjectsById = (objects, selectedObjects) => {\r\n  let filteredObjects = [];\r\n  objects.map((obj) => {\r\n    if (selectedObjects.includes(obj._id)) {\r\n      filteredObjects.push(obj);\r\n    }\r\n  });\r\n  return filteredObjects;\r\n};\r\n\r\nconst DisplaySelectedJobs = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedJobId, setSelectedJobId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    var jobs = props.node.getSavedInDB()[\"displayed jobs\"];\r\n    var selectedJobs = props.node.getSavedInDB()[\"selected jobs\"];\r\n    const selectedJobsDetails = filterObjectsById(jobs, selectedJobs);\r\n    setOptions(selectedJobsDetails);\r\n  }, []);\r\n\r\n  const onCardClick = (id) => {\r\n    setSelectedJobId(selectedJobId === id ? null : id);\r\n  };\r\n\r\n  const buttonsMarkup = options.map(\r\n    (job, index) => (\r\n      <JobCard\r\n        key={index}\r\n        job={job}\r\n        isSelected={job._id === selectedJobId}\r\n        onCardClick={onCardClick}\r\n      />\r\n    ),\r\n    []\r\n  );\r\n\r\n  return <div>{buttonsMarkup}</div>;\r\n};\r\n\r\nexport default DisplaySelectedJobs;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/AccuracyLevels.jsx",["289"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst AccuracyLevels = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options in accu: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Other\")){\r\n      //קריאה לסיום\r\n      // props.actionProvider.selfSearch(props.node,[\"Other\"]);\r\n\r\n      //set the accuracy node\r\n      props.node.setAccuracyNode({...props.node.getNextResponse()})\r\n      //set in history list\r\n      props.node.setHistoryChat([...props.node.getHistoryChat(),{user:[\"Other\"]}])\r\n      //call handler\r\n      props.actionProvider.handleAccuracyLevel(props.node,[\"Other\"]);\r\n    }else{\r\n      //set the accuracy node and options\r\n      props.node.setAccuracyOptions(selectedOptions)\r\n      props.node.setAccuracyNode({...props.node.getNextResponse()})\r\n      //set in history list\r\n      props.node.setHistoryChat([...props.node.getHistoryChat(),{user:selectedOptions}])\r\n      //call handler\r\n      props.actionProvider.handleAccuracyLevel(props.node,selectedOptions);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange}\r\n            disabled={(opt!==\"Other\")&&selectedOptions.includes(\"Other\")} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AccuracyLevels;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/MoreInfo.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/ExperienceLevel.jsx",["290"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst ExperienceLevel = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Intern\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleExperienceLevel(props.node,[selectedOption]);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"experience\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default ExperienceLevel;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Cities.jsx",["291"],[],"import axios from \"axios\";\r\nimport React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport ErrorMessages from \"./ErrorMessages\"\r\nimport \"./Options.css\";\r\n\r\nconst Cities = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n  const [isServerDown, setIsServerDown] = useState(false);\r\n\r\n  //set the updated existing cities from the jobs DB\r\n  useEffect(\r\n    ()=>{\r\n      axios.post(\"/cities\",{\r\n        areas:props.node.getSelected().areas\r\n      }, {\r\n        headers: {\r\n        'Content-type': 'application/json; charset=UTF-8' } \r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          setOptions([...response.data.cities,\"Other\"])\r\n        } else {\r\n          console.log(\"Server did not returned cities\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsServerDown(true)\r\n        console.log(\"Error getting cities\", err.message);\r\n      });\r\n    }\r\n    ,[]);\r\n  \r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options1: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Other\")){\r\n      props.actionProvider.handleCities(props.node,[\"Other\"]);\r\n    }else{\r\n      props.actionProvider.handleCities(props.node,selectedOptions);\r\n    }\r\n  };\r\n  //We used chatGpt to divide the cities into 3 columns\r\n  const columnSize = Math.ceil(options.length / 3);\r\n  const columns = [\r\n    options.slice(0, columnSize),\r\n    options.slice(columnSize, columnSize * 2),\r\n    options.slice(columnSize * 2),\r\n  ];\r\n\r\n  const renderCheckbox = (opt) => (\r\n    <div key={opt} className=\"cities\">\r\n      <label>\r\n      <input\r\n      className=\"checkbox\"\r\n      type=\"checkbox\"\r\n      value={opt}\r\n      onChange={handleOptionChange}\r\n      disabled={(opt!==\"Other\")&&selectedOptions.includes(\"Other\")} />\r\n      {opt}\r\n      </label>\r\n    </div>\r\n  );\r\n\r\n  const renderColumns = (columnCities,index) => (\r\n    <div key={index}>\r\n      {columnCities.map(city => renderCheckbox(city))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n    {(!isServerDown)?(<form onSubmit={handleSubmit}>\r\n      <label>\r\n        <div style={{ display: 'flex' }}>\r\n        {\r\n          columns.map((columnCities,index) => renderColumns(columnCities,index))\r\n        }\r\n        </div>\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>):\r\n    (\r\n      <div style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}> <ErrorMessages /></div>\r\n    )}\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Cities;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Email.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTitleTyping.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobCard.jsx",["292"],[],"import starImage from '../../../adminArea/star.avif';\r\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\r\nimport LaunchIcon from '@mui/icons-material/Launch';\r\n\r\nconst JobCard = ({ job, isSelected, onCardClick }) => {\r\n    if (job._id===\"Nothing fits\"){\r\n      return(\r\n      <div className={`job-card ${isSelected ? \"selected\" : \"\"}`}>\r\n      <strong>Nothing Fits</strong>\r\n      </div>\r\n      );\r\n    }\r\n  \r\n    return (\r\n    <div className=\"job\">\r\n      <div className={`job-card ${isSelected ? \"selected\" : \"\"}`} onClick={() => onCardClick(job._id)}>\r\n        <h3 className=\"job-title-font\">{job.job}</h3>\r\n        <p>{job.company}</p>\r\n        <p>{job.city}</p>\r\n        {isSelected?\"-\":\"+\"}\r\n      </div>\r\n      {isSelected && (\r\n          <div style={{textAlign:\"center\"}} >\r\n          {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\r\n          {job.date&&<p className=\"job-date\"><AccessTimeIcon color=\"primary\" fontSize=\"\"/>{\"  \"+job.date}</p>}\r\n          {job.link&&<p className=\"job-link\">\r\n            <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <LaunchIcon color=\"primary\"/>\r\n              {\"     \"+`${job.link.slice(0, 30)}...`}\r\n            </a>\r\n          </p>}\r\n          <p className=\"job-description\" style={{margin: \"0 2rem 2rem\"}}>{job.description}</p>\r\n          </div>\r\n        )}\r\n    </div>\r\n    );\r\n  };\r\n\r\n  export default JobCard;",{"ruleId":"293","severity":1,"message":"294","line":22,"column":9,"nodeType":"295","endLine":23,"endColumn":12},{"ruleId":"296","severity":1,"message":"297","line":25,"column":13,"nodeType":"298","messageId":"299","endLine":25,"endColumn":22},{"ruleId":"300","severity":1,"message":"301","line":52,"column":17,"nodeType":"302","messageId":"303","endLine":52,"endColumn":18},{"ruleId":"296","severity":1,"message":"304","line":2,"column":23,"nodeType":"298","messageId":"299","endLine":2,"endColumn":34},{"ruleId":"305","severity":1,"message":"306","line":87,"column":7,"nodeType":"307","endLine":87,"endColumn":9,"suggestions":"308"},{"ruleId":"305","severity":1,"message":"309","line":18,"column":6,"nodeType":"307","endLine":18,"endColumn":8,"suggestions":"310"},{"ruleId":"305","severity":1,"message":"311","line":26,"column":6,"nodeType":"307","endLine":26,"endColumn":8,"suggestions":"312"},{"ruleId":"313","severity":1,"message":"314","line":29,"column":18,"nodeType":"302","messageId":"315","endLine":29,"endColumn":20},{"ruleId":"300","severity":1,"message":"301","line":60,"column":17,"nodeType":"302","messageId":"303","endLine":60,"endColumn":18},{"ruleId":"296","severity":1,"message":"316","line":10,"column":20,"nodeType":"298","messageId":"299","endLine":10,"endColumn":31},{"ruleId":"305","severity":1,"message":"317","line":29,"column":6,"nodeType":"307","endLine":29,"endColumn":8,"suggestions":"318"},{"ruleId":"293","severity":1,"message":"294","line":42,"column":9,"nodeType":"295","endLine":42,"endColumn":56},{"ruleId":"296","severity":1,"message":"319","line":2,"column":55,"nodeType":"298","messageId":"299","endLine":2,"endColumn":64},{"ruleId":"296","severity":1,"message":"320","line":2,"column":88,"nodeType":"298","messageId":"299","endLine":2,"endColumn":91},{"ruleId":"296","severity":1,"message":"321","line":17,"column":10,"nodeType":"298","messageId":"299","endLine":17,"endColumn":18},{"ruleId":"296","severity":1,"message":"322","line":111,"column":46,"nodeType":"298","messageId":"299","endLine":111,"endColumn":56},{"ruleId":"296","severity":1,"message":"323","line":263,"column":14,"nodeType":"298","messageId":"299","endLine":263,"endColumn":29},{"ruleId":"324","severity":1,"message":"325","line":179,"column":13,"nodeType":"298","messageId":"326","endLine":179,"endColumn":16},{"ruleId":"324","severity":1,"message":"325","line":206,"column":13,"nodeType":"298","messageId":"326","endLine":206,"endColumn":16},{"ruleId":"324","severity":1,"message":"327","line":348,"column":17,"nodeType":"298","messageId":"326","endLine":348,"endColumn":21},{"ruleId":"324","severity":1,"message":"325","line":423,"column":11,"nodeType":"298","messageId":"326","endLine":423,"endColumn":14},{"ruleId":"324","severity":1,"message":"325","line":489,"column":11,"nodeType":"298","messageId":"326","endLine":489,"endColumn":14},{"ruleId":"324","severity":1,"message":"328","line":504,"column":11,"nodeType":"298","messageId":"326","endLine":504,"endColumn":15},{"ruleId":"324","severity":1,"message":"327","line":510,"column":11,"nodeType":"298","messageId":"326","endLine":510,"endColumn":15},{"ruleId":"329","severity":1,"message":"330","line":527,"column":23,"nodeType":"331","messageId":"332","endLine":527,"endColumn":25},{"ruleId":"324","severity":1,"message":"327","line":855,"column":17,"nodeType":"298","messageId":"326","endLine":855,"endColumn":21},{"ruleId":"305","severity":1,"message":"333","line":12,"column":68,"nodeType":"307","endLine":12,"endColumn":70,"suggestions":"334"},{"ruleId":"305","severity":1,"message":"333","line":11,"column":80,"nodeType":"307","endLine":11,"endColumn":82,"suggestions":"335"},{"ruleId":"305","severity":1,"message":"333","line":16,"column":6,"nodeType":"307","endLine":16,"endColumn":8,"suggestions":"336"},{"ruleId":"305","severity":1,"message":"333","line":17,"column":6,"nodeType":"307","endLine":17,"endColumn":8,"suggestions":"337"},{"ruleId":"305","severity":1,"message":"333","line":11,"column":68,"nodeType":"307","endLine":11,"endColumn":70,"suggestions":"338"},{"ruleId":"305","severity":1,"message":"333","line":14,"column":78,"nodeType":"307","endLine":14,"endColumn":80,"suggestions":"339"},{"ruleId":"305","severity":1,"message":"333","line":11,"column":68,"nodeType":"307","endLine":11,"endColumn":70,"suggestions":"340"},{"ruleId":"305","severity":1,"message":"333","line":15,"column":6,"nodeType":"307","endLine":15,"endColumn":8,"suggestions":"341"},{"ruleId":"329","severity":1,"message":"330","line":8,"column":21,"nodeType":"331","messageId":"332","endLine":8,"endColumn":23},{"ruleId":"305","severity":1,"message":"342","line":25,"column":6,"nodeType":"307","endLine":25,"endColumn":8,"suggestions":"343"},{"ruleId":"305","severity":1,"message":"333","line":11,"column":68,"nodeType":"307","endLine":11,"endColumn":70,"suggestions":"344"},{"ruleId":"305","severity":1,"message":"333","line":11,"column":68,"nodeType":"307","endLine":11,"endColumn":70,"suggestions":"345"},{"ruleId":"305","severity":1,"message":"342","line":35,"column":6,"nodeType":"307","endLine":35,"endColumn":8,"suggestions":"346"},{"ruleId":"300","severity":1,"message":"301","line":29,"column":23,"nodeType":"302","messageId":"303","endLine":29,"endColumn":24},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'secondary' is assigned a value but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'useNavigate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchStatistics'. Either include it or remove the dependency array.","ArrayExpression",["347"],"React Hook useEffect has a missing dependency: 'fetchHistory'. Either include it or remove the dependency array.",["348"],"React Hook useEffect has a missing dependency: 'fetchjobs'. Either include it or remove the dependency array.",["349"],"eqeqeq","Expected '===' and instead saw '=='.","unexpected","'setMyObject' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'clientDetails'. Either include it or remove the dependency array.",["350"],"'TableHead' is defined but never used.","'Box' is defined but never used.","'jobTypes' is assigned a value but never used.","'enterEmail' is assigned a value but never used.","'specificCompany' is assigned a value but never used.","no-redeclare","'txt' is already defined.","redeclared","'txt2' is already defined.","'txt1' is already defined.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'props.node'. Either include it or remove the dependency array. If 'setOptions' needs the current value of 'props.node', you can also switch to useReducer instead of useState and read 'props.node' in the reducer.",["351"],["352"],["353"],["354"],["355"],["356"],["357"],["358"],"React Hook useEffect has a missing dependency: 'props.node'. Either include it or remove the dependency array.",["359"],["360"],["361"],["362"],{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"371","fix":"373"},{"desc":"371","fix":"374"},{"desc":"371","fix":"375"},{"desc":"371","fix":"376"},{"desc":"371","fix":"377"},{"desc":"371","fix":"378"},{"desc":"371","fix":"379"},{"desc":"371","fix":"380"},{"desc":"371","fix":"381"},{"desc":"371","fix":"382"},{"desc":"371","fix":"383"},"Update the dependencies array to be: [fetchStatistics]",{"range":"384","text":"385"},"Update the dependencies array to be: [fetchHistory]",{"range":"386","text":"387"},"Update the dependencies array to be: [fetchjobs]",{"range":"388","text":"389"},"Update the dependencies array to be: [clientDetails]",{"range":"390","text":"391"},"Update the dependencies array to be: [props.node]",{"range":"392","text":"393"},{"range":"394","text":"393"},{"range":"395","text":"393"},{"range":"396","text":"393"},{"range":"397","text":"393"},{"range":"398","text":"393"},{"range":"399","text":"393"},{"range":"400","text":"393"},{"range":"401","text":"393"},{"range":"402","text":"393"},{"range":"403","text":"393"},{"range":"404","text":"393"},[2446,2448],"[fetchStatistics]",[533,535],"[fetchHistory]",[777,779],"[fetchjobs]",[798,800],"[clientDetails]",[359,361],"[props.node]",[386,388],[466,468],[468,470],[368,370],[466,468],[362,364],[390,392],[774,776],[366,368],[372,374],[1042,1044]]