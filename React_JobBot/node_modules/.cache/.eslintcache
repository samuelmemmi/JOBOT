[{"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\viewChatFlow.jsx":"1","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\UpdatedChatFlow.js":"2","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\convert_tree_to_json.js":"3","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\index.js":"4","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\App.js":"5","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\login\\Login.jsx":"6","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\register\\Register.jsx":"7","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\clientArea\\HomeClient.jsx":"8","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\HomeAdmin.jsx":"9","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\StartChat.jsx":"10","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\getFlowText.js":"11","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\config.js":"12","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\ActionProvider.js":"13","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\MessageParser.js":"14","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\DisplaySelectedJobs.jsx":"15","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\Approval.jsx":"16","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\FieldOptions.jsx":"17","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\Companies.jsx":"18","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\JobTitles.jsx":"19","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\Areas.jsx":"20","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\EmailDisplay.jsx":"21","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\JobTypes.jsx":"22","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\Jobs.jsx":"23","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Quiz\\Quiz.jsx":"24","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Quiz\\FlashCard.jsx":"25","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\viewChatFlow11.jsx":"26","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\UsersPage.jsx":"27","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\JobsPage.jsx":"28"},{"size":2370,"mtime":1679407615986,"results":"29","hashOfConfig":"30"},{"size":346,"mtime":1678698047264,"results":"31","hashOfConfig":"30"},{"size":9755,"mtime":1679489492336,"results":"32","hashOfConfig":"30"},{"size":334,"mtime":1677426580123,"results":"33","hashOfConfig":"30"},{"size":1079,"mtime":1679487597122,"results":"34","hashOfConfig":"30"},{"size":2406,"mtime":1679468216510,"results":"35","hashOfConfig":"30"},{"size":2310,"mtime":1677691512285,"results":"36","hashOfConfig":"30"},{"size":754,"mtime":1679468102459,"results":"37","hashOfConfig":"30"},{"size":941,"mtime":1679468009681,"results":"38","hashOfConfig":"30"},{"size":1616,"mtime":1677691512231,"results":"39","hashOfConfig":"30"},{"size":1805,"mtime":1679490260968,"results":"40","hashOfConfig":"30"},{"size":3470,"mtime":1678311446848,"results":"41","hashOfConfig":"30"},{"size":9488,"mtime":1679490118132,"results":"42","hashOfConfig":"30"},{"size":458,"mtime":1677426580126,"results":"43","hashOfConfig":"30"},{"size":564,"mtime":1678311591612,"results":"44","hashOfConfig":"30"},{"size":1368,"mtime":1678357947785,"results":"45","hashOfConfig":"30"},{"size":1556,"mtime":1678357142878,"results":"46","hashOfConfig":"30"},{"size":1516,"mtime":1677691512238,"results":"47","hashOfConfig":"30"},{"size":1648,"mtime":1678196876601,"results":"48","hashOfConfig":"30"},{"size":1502,"mtime":1678196562786,"results":"49","hashOfConfig":"30"},{"size":1595,"mtime":1679474561523,"results":"50","hashOfConfig":"30"},{"size":1510,"mtime":1678196743754,"results":"51","hashOfConfig":"30"},{"size":1887,"mtime":1679475088296,"results":"52","hashOfConfig":"30"},{"size":584,"mtime":1677426580133,"results":"53","hashOfConfig":"30"},{"size":669,"mtime":1677426580132,"results":"54","hashOfConfig":"30"},{"size":1995,"mtime":1678789172585,"results":"55","hashOfConfig":"30"},{"size":815,"mtime":1679488507946,"results":"56","hashOfConfig":"30"},{"size":956,"mtime":1679488504945,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},"3v18ks",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\viewChatFlow.jsx",["153"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport \"./viewChatFlow.css\"\r\n\r\nfunction ViewChatFlow() {\r\n  const [myObject, setMyObject] = useState(require('../chatBotLogic/decisionTree.json'));\r\n\r\n  function RenderObject({ object }) {\r\n    const [editing, setEditing] = useState(false);\r\n    const [text, setText] = useState(object.text);\r\n    const [collapsed, setCollapsed] = useState(true);\r\n  \r\n    const handleSave = () => {\r\n      object.text = text;\r\n      setEditing(false);\r\n    };\r\n  \r\n    const handleCollapse = () => {\r\n      setCollapsed(!collapsed);\r\n    };\r\n  \r\n    return (\r\n      <ul>\r\n        <li className='vertix'>\r\n        <input className=\"description\" type=\"text\" value={object.title} readOnly/>\r\n          {editing ? (\r\n            <input className=\"text-content\" value={text} onChange={(e) => setText(e.target.value)} />\r\n          ) : (\r\n            <>\r\n              <button className=\"expand-button\" onClick={() => setEditing(true)}>Edit Formulation</button>\r\n              <input className=\"text-content\" type=\"text\" value={object.text} readOnly/>\r\n            </>\r\n          )}\r\n          {editing && <button className=\"expand-button\" onClick={handleSave}>Save</button>}\r\n          {object.children && object.children.length>0 && (<button className=\"expand-button\" onClick={handleCollapse}>\r\n          {collapsed ? 'Expand' : 'Collapse'}\r\n          </button>)}\r\n          </li>\r\n          <div>\r\n          {!collapsed && (\r\n            <div>\r\n              {object.children&&object.children.length>0&&(object.children.map((child,index) => (\r\n                <RenderObject key={index} object={child} />\r\n              )))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n      </ul>\r\n    );\r\n  }\r\n\r\n  const exportObject = () => {\r\n    // const json = JSON.stringify(myObject);\r\n    // console.log(json);\r\n\r\n    axios.post('/write-json', myObject, {\r\n      headers: {\r\n      'Content-type': 'application/json; charset=UTF-8' } \r\n    })\r\n    .then((response) => {\r\n      console.log(response.data.message);\r\n    })\r\n    .catch((error) => {\r\n      console.error(error.response.data.error);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"pedigree-tree\">\r\n      <RenderObject object={myObject}/>\r\n      <button onClick={exportObject}>Export</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewChatFlow;\r\n",[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\UpdatedChatFlow.js",[],[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\convert_tree_to_json.js",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\index.js",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\App.js",[],[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\login\\Login.jsx",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\register\\Register.jsx",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\clientArea\\HomeClient.jsx",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\HomeAdmin.jsx",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\StartChat.jsx",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\getFlowText.js",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\config.js",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\ActionProvider.js",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\MessageParser.js",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\DisplaySelectedJobs.jsx",["154"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst DisplaySelectedJobs = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    setOptions(props.node.getSelectedJobs())\r\n  },[]);//maybe props.node_if_options>0\r\n\r\n\r\n  var i=1;\r\n  const buttonsMarkup = options.map((opt) => (\r\n    <button key={i++} className=\"option-button\">\r\n      {opt}\r\n    </button>\r\n  ),[]);\r\n\r\n  return <div className=\"options-container\">{buttonsMarkup}</div>;\r\n};\r\n\r\nexport default DisplaySelectedJobs;\r\n\r\n","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\Approval.jsx",["155"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Approval = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Yes\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Y/N radio: \", selectedOption);\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleApproval(props.node,selectedOption)\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"approval\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default Approval;\r\n\r\n","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\FieldOptions.jsx",["156"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst FieldOptions = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Other\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().children[0].options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options radio: \", selectedOption);\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    switch(selectedOption) {\r\n      case \"Other\":\r\n        props.actionProvider.handleOtherField(props.node,selectedOption);\r\n        break;\r\n      default:\r\n        props.actionProvider.handleField(props.node,selectedOption);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"field\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default FieldOptions;\r\n","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\Companies.jsx",["157"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Companies = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n\r\n  useEffect(\r\n    ()=>{\r\n        var selectedField=props.node.getSelected().field;\r\n        setOptions(props.node.getNextResponse().options[0][selectedField])\r\n    }\r\n    ,[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    props.actionProvider.handleCompany(props.node,selectedOptions);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Companies;\r\n","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\JobTitles.jsx",["158"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst JobTitles = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(\r\n    ()=>{\r\n        var selectedField=props.node.getSelected().field;\r\n        setOptions(props.node.getNextResponse().options[0][selectedField])\r\n    }\r\n    ,[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleJobTitle(props.node,selectedOptions);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default JobTitles;\r\n","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\Areas.jsx",["159"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Areas = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleArea(props.node,selectedOptions);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange}/>\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Areas;\r\n\r\n","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\EmailDisplay.jsx",["160"],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\JobTypes.jsx",["161"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst JobTypes = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleJobType(props.node,selectedOptions);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default JobTypes;\r\n\r\n","C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Options\\Jobs.jsx",["162"],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Quiz\\Quiz.jsx",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\chatBotLogic\\components\\Quiz\\FlashCard.jsx",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\viewChatFlow11.jsx",["163"],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\UsersPage.jsx",[],[],"C:\\Users\\Rachel\\source\\repos\\JOBOT\\JOBOT\\React_JobBot\\src\\pages\\adminArea\\JobsPage.jsx",[],[],{"ruleId":"164","severity":1,"message":"165","line":7,"column":20,"nodeType":"166","messageId":"167","endLine":7,"endColumn":31},{"ruleId":"168","severity":1,"message":"169","line":11,"column":5,"nodeType":"170","endLine":11,"endColumn":7,"suggestions":"171"},{"ruleId":"168","severity":1,"message":"169","line":11,"column":68,"nodeType":"170","endLine":11,"endColumn":70,"suggestions":"172"},{"ruleId":"168","severity":1,"message":"169","line":11,"column":80,"nodeType":"170","endLine":11,"endColumn":82,"suggestions":"173"},{"ruleId":"168","severity":1,"message":"169","line":15,"column":6,"nodeType":"170","endLine":15,"endColumn":8,"suggestions":"174"},{"ruleId":"168","severity":1,"message":"169","line":16,"column":6,"nodeType":"170","endLine":16,"endColumn":8,"suggestions":"175"},{"ruleId":"168","severity":1,"message":"169","line":12,"column":68,"nodeType":"170","endLine":12,"endColumn":70,"suggestions":"176"},{"ruleId":"168","severity":1,"message":"169","line":14,"column":5,"nodeType":"170","endLine":14,"endColumn":7,"suggestions":"177"},{"ruleId":"168","severity":1,"message":"169","line":11,"column":68,"nodeType":"170","endLine":11,"endColumn":70,"suggestions":"178"},{"ruleId":"168","severity":1,"message":"169","line":15,"column":6,"nodeType":"170","endLine":15,"endColumn":8,"suggestions":"179"},{"ruleId":"164","severity":1,"message":"180","line":11,"column":11,"nodeType":"166","messageId":"167","endLine":11,"endColumn":23},"no-unused-vars","'setMyObject' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.node'. Either include it or remove the dependency array. If 'setOptions' needs the current value of 'props.node', you can also switch to useReducer instead of useState and read 'props.node' in the reducer.","ArrayExpression",["181"],["182"],["183"],["184"],["185"],["186"],["187"],["188"],["189"],"'exportObject' is assigned a value but never used.",{"desc":"190","fix":"191"},{"desc":"190","fix":"192"},{"desc":"190","fix":"193"},{"desc":"190","fix":"194"},{"desc":"190","fix":"195"},{"desc":"190","fix":"196"},{"desc":"190","fix":"197"},{"desc":"190","fix":"198"},{"desc":"190","fix":"199"},"Update the dependencies array to be: [props.node]",{"range":"200","text":"201"},{"range":"202","text":"201"},{"range":"203","text":"201"},{"range":"204","text":"201"},{"range":"205","text":"201"},{"range":"206","text":"201"},{"range":"207","text":"201"},{"range":"208","text":"201"},{"range":"209","text":"201"},[260,262],"[props.node]",[362,364],[380,382],[416,418],[467,469],[360,362],[437,439],[361,363],[369,371]]