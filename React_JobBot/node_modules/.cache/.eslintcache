[{"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/index.js":"1","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/App.js":"2","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/login/Login.jsx":"3","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/register/Register.jsx":"4","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/StartChat.jsx":"5","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/viewChatFlow.jsx":"6","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/UsersPage.jsx":"7","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/HomeAdmin.jsx":"8","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/JobsPage.jsx":"9","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/HomeClient.jsx":"10","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/getFlowText.js":"11","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/ActionProvider.js":"12","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/MessageParser.js":"13","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/config.js":"14","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/convert_tree_to_json.js":"15","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Approval.jsx":"16","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTitles.jsx":"17","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/FieldOptions.jsx":"18","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Areas.jsx":"19","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Companies.jsx":"20","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Jobs.jsx":"21","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTypes.jsx":"22","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/EmailDisplay.jsx":"23","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/DisplaySelectedJobs.jsx":"24","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Quiz/Quiz.jsx":"25","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Quiz/FlashCard.jsx":"26","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/logout/Logout.jsx":"27","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/AccuracyLevels.jsx":"28","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/MoreInfo.jsx":"29","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/ExperienceLevel.jsx":"30","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Cities.jsx":"31","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Email.jsx":"32","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTitleTyping.jsx":"33","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobCard.jsx":"34","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/ClientHistory.jsx":"35","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/UserDetails.jsx":"36","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/MyCustomChatMessage.jsx":"37","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/ConversationsPage.jsx":"38","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/OfferedJobs.jsx":"39","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/Statistics.jsx":"40","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/UserProvider.js":"41","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/ProtectedRoutes.jsx":"42","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/Header.jsx":"43","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/About.jsx":"44","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/CardsTable.jsx":"45","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/CollapsableCard.jsx":"46"},{"size":430,"mtime":1685371810685,"results":"47","hashOfConfig":"48"},{"size":3471,"mtime":1685371810680,"results":"49","hashOfConfig":"48"},{"size":4076,"mtime":1685371810732,"results":"50","hashOfConfig":"48"},{"size":3440,"mtime":1685371810742,"results":"51","hashOfConfig":"48"},{"size":1316,"mtime":1685371810709,"results":"52","hashOfConfig":"48"},{"size":3054,"mtime":1684668014574,"results":"53","hashOfConfig":"48"},{"size":2952,"mtime":1685371810704,"results":"54","hashOfConfig":"48"},{"size":5084,"mtime":1685371810697,"results":"55","hashOfConfig":"48"},{"size":11102,"mtime":1685371810700,"results":"56","hashOfConfig":"48"},{"size":2823,"mtime":1685371810730,"results":"57","hashOfConfig":"48"},{"size":3224,"mtime":1682602741116,"results":"58","hashOfConfig":"48"},{"size":30799,"mtime":1685371810708,"results":"59","hashOfConfig":"48"},{"size":1749,"mtime":1683817112944,"results":"60","hashOfConfig":"48"},{"size":4897,"mtime":1682602741115,"results":"61","hashOfConfig":"48"},{"size":11975,"mtime":1683817112945,"results":"62","hashOfConfig":"48"},{"size":1400,"mtime":1685371810715,"results":"63","hashOfConfig":"48"},{"size":1852,"mtime":1685371810726,"results":"64","hashOfConfig":"48"},{"size":1594,"mtime":1685371810721,"results":"65","hashOfConfig":"48"},{"size":1782,"mtime":1685371810717,"results":"66","hashOfConfig":"48"},{"size":1777,"mtime":1685371810719,"results":"67","hashOfConfig":"48"},{"size":3382,"mtime":1682944246368,"results":"68","hashOfConfig":"48"},{"size":3124,"mtime":1683728331673,"results":"69","hashOfConfig":"48"},{"size":3719,"mtime":1685371810719,"results":"70","hashOfConfig":"48"},{"size":1096,"mtime":1682944246356,"results":"71","hashOfConfig":"48"},{"size":752,"mtime":1682602741114,"results":"72","hashOfConfig":"48"},{"size":669,"mtime":1682188046900,"results":"73","hashOfConfig":"48"},{"size":1069,"mtime":1685371810736,"results":"74","hashOfConfig":"48"},{"size":2542,"mtime":1685371810714,"results":"75","hashOfConfig":"48"},{"size":634,"mtime":1685371810726,"results":"76","hashOfConfig":"48"},{"size":1414,"mtime":1685371810720,"results":"77","hashOfConfig":"48"},{"size":2898,"mtime":1685371810718,"results":"78","hashOfConfig":"48"},{"size":853,"mtime":1682188046871,"results":"79","hashOfConfig":"48"},{"size":763,"mtime":1682188046883,"results":"80","hashOfConfig":"48"},{"size":887,"mtime":1685371810725,"results":"81","hashOfConfig":"48"},{"size":2270,"mtime":1685371810691,"results":"82","hashOfConfig":"48"},{"size":865,"mtime":1685371810731,"results":"83","hashOfConfig":"48"},{"size":297,"mtime":1682602741107,"results":"84","hashOfConfig":"48"},{"size":2602,"mtime":1685441483986,"results":"85","hashOfConfig":"48"},{"size":2925,"mtime":1685371810701,"results":"86","hashOfConfig":"48"},{"size":6902,"mtime":1685371810702,"results":"87","hashOfConfig":"48"},{"size":478,"mtime":1685371810681,"results":"88","hashOfConfig":"48"},{"size":344,"mtime":1685371810680,"results":"89","hashOfConfig":"48"},{"size":2246,"mtime":1685371810687,"results":"90","hashOfConfig":"48"},{"size":1070,"mtime":1685450739632,"results":"91","hashOfConfig":"48"},{"size":2961,"mtime":1685371810689,"results":"92","hashOfConfig":"48"},{"size":1525,"mtime":1685371810692,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kco8gj",{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"114"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"114"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"114"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237"},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/index.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/App.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/login/Login.jsx",["259"],[],"import React from \"react\";\r\n// import \"./login.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n// import { useHistory } from 'react-router-dom';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { useUser } from \"../../UserProvider\";\r\n\r\n\r\nexport default function Login({setUserType}) {\r\n  //const {setUserType} = useUser()\r\n  // const history = useHistory();\r\n  let navigate = useNavigate();\r\n  const routeChange = () => {\r\n    navigate(\"/./register\");\r\n  };\r\n\r\n  console.log(setUserType)\r\n\r\n  const moveToChat = () => {\r\n    var userName = document.getElementById(\"LoginUserName\").value;\r\n    var Password = document.getElementById(\"LoginPassword\").value;\r\n    \r\n    // Envoi de la demande POST à votre serveur Flask\r\n    axios.post(\"/login\", {\r\n      userName: userName,\r\n      Password: Password,\r\n    }, {\r\n      headers: {\r\n      'Content-type': 'application/json; charset=UTF-8' } \r\n    })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          if (response.data.message === \"Admin login success\"){\r\n            // setUserType(\"admin\")$$$$$$$$$$$$$$$$$$$\r\n            setUserType({type:\"admin\",details:{userName: userName,password: Password,}})\r\n            navigate(\"/./homePageAdmin\", {\r\n              state: {\r\n                userName: userName,\r\n                password: Password,\r\n              },\r\n            });\r\n          }\r\n          else {\r\n            // setUserType(\"user\")$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n            setUserType({type:\"client\",details:{userName: userName,password: Password,}})\r\n            navigate(\"/./homePage\", {\r\n              state: {\r\n                userName: userName,\r\n                password: Password,\r\n              },\r\n            });\r\n          }\r\n        }\r\n        else {\r\n          document.getElementById(\"loginfail\").innerHTML =\r\n            response.data.message;\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div \r\n      style={{\r\n        height: \"100vh\",\r\n        backgroundColor: \"#F1F6F9\",\r\n        color: \"#212A3E\"\r\n      }}\r\n      className=\"w-100 d-flex flex-column align-items-center justify-content-center pb-5\">\r\n      <div className=\"w-50 d-flex flex-column align-items-center \">\r\n        <h1 style={{color: \"#309CFF\"}} className=\"display-1 m-0\">JOBOT</h1>\r\n        <h2 style={{color: \"#309CFF\"}} className=\"m-0\">Login</h2>\r\n        <p className=\"mt-3 mb-4\">With JOBOT you can find your dream job in seconds!</p>\r\n      </div>\r\n      <div \r\n        style={{\r\n          backgroundColor: \"#309CFF\",\r\n          color: \"#212A3E\",\r\n          width: \"35%\",\r\n          borderRadius: \"20px\",\r\n          height:\"35%\"\r\n        }}\r\n        className=\"d-flex flex-column align-items-center p-4\">\r\n        <div className=\"w-100 d-flex flex-column align-items-center\"> \r\n        <TextField\r\n          sx={{\r\n            backgroundColor: \"#F1F6F9\",\r\n            borderRadius: \"5px\",\r\n          }}\r\n          className=\"w-100\"\r\n          label=\"Username\"\r\n          type=\"text\"\r\n          id=\"LoginUserName\"\r\n        />\r\n          <TextField\r\n          sx={{\r\n            backgroundColor: \"#F1F6F9\",\r\n            borderRadius: \"5px\",\r\n          }}\r\n          className=\"mt-2 w-100\"\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          id=\"LoginPassword\"\r\n        />\r\n        </div>\r\n        <div \r\n        style={{\r\n          //backgroundColor: \"red\"\r\n        }}\r\n        className=\"w-100 d-flex flex-row justify-content-between mt-4 \">\r\n\r\n        <Button \r\n        sx={{\r\n          backgroundColor: \"#8AFA63\",\r\n          width: \"50%\"\r\n        }}\r\n        className=\"mx-2\" variant=\"contained\"  onClick={moveToChat}>Login</Button>\r\n        <Button \r\n         sx={{\r\n          backgroundColor: \"#8AFA63\",\r\n          width: \"50%\"\r\n        }}\r\n        className=\"mx-2\" variant=\"contained\" onClick={routeChange}>Register</Button>\r\n        </div>\r\n      </div>\r\n      <br/>\r\n      <div id=\"loginfail\"></div>\r\n    </div>\r\n  );\r\n}\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/register/Register.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/StartChat.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/viewChatFlow.jsx",["260"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport chatFlow from \"../chatBotLogic/convert_tree_to_json\";\r\nimport \"./viewChatFlow.css\"\r\n\r\nfunction ViewChatFlow() {\r\n  // const [myObject, setMyObject] = useState(require('../chatBotLogic/decisionTree.json'));\r\n  const [myObject, setMyObject] = useState(()=>{\r\n    try {\r\n      var obje = require('../chatBotLogic/decisionTree.json');\r\n      return obje;\r\n    } catch (error) {\r\n      //console.error(`Error loading data: ${error}`);\r\n      obje = chatFlow;\r\n      axios.post('/write-json', obje, {\r\n          headers: {\r\n          'Content-type': 'application/json; charset=UTF-8' } \r\n        })\r\n        .then((response) => {\r\n          console.log(response.data.message);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.response.data.error);\r\n        });\r\n        return obje\r\n    }});\r\n\r\n  function RenderObject({ object }) {\r\n    const [editing, setEditing] = useState(false);\r\n    const [text, setText] = useState(object.text);\r\n    const [collapsed, setCollapsed] = useState(true);\r\n  \r\n    const handleSave = () => {\r\n      object.text = text;\r\n      setEditing(false);\r\n    };\r\n  \r\n    const handleCollapse = () => {\r\n      setCollapsed(!collapsed);\r\n    };\r\n  \r\n    return (\r\n      <ul>\r\n        <li className='vertix'>\r\n        <input className=\"description\" type=\"text\" value={object.title} readOnly/>\r\n          {editing ? (\r\n            <input className=\"text-content\" value={text} onChange={(e) => setText(e.target.value)} />\r\n          ) : (\r\n            <>\r\n              <button className=\"expand-button\" onClick={() => setEditing(true)}>Edit Formulation</button>\r\n              <input className=\"text-content\" type=\"text\" value={object.text} readOnly/>\r\n            </>\r\n          )}\r\n          {editing && <button className=\"expand-button\" onClick={handleSave}>Save</button>}\r\n          {object.children && object.children.length>0 && (<button className=\"expand-button\" onClick={handleCollapse}>\r\n          {collapsed ? 'Expand' : 'Collapse'}\r\n          </button>)}\r\n          </li>\r\n          <div>\r\n          {!collapsed && (\r\n            <div>\r\n              {object.children&&object.children.length>0&&(object.children.map((child,index) => (\r\n                <RenderObject key={index} object={child} />\r\n              )))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n      </ul>\r\n    );\r\n  }\r\n\r\n  const exportObject = () => {\r\n    // const json = JSON.stringify(myObject);\r\n    // console.log(json);\r\n\r\n    axios.post('/write-json', myObject, {\r\n      headers: {\r\n      'Content-type': 'application/json; charset=UTF-8' } \r\n    })\r\n    .then((response) => {\r\n      console.log(response.data.message);\r\n    })\r\n    .catch((error) => {\r\n      console.error(error.response.data.error);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"pedigree-tree\">\r\n      <RenderObject object={myObject}/>\r\n      <button onClick={exportObject}>Export</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewChatFlow;//FINALLLLLL\r\n\r\n\r\n",[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/UsersPage.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/HomeAdmin.jsx",["261","262"],[],"import List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\n// import FolderIcon from \"@mui/icons-material/Folder\";\r\nimport SmartToyOutlinedIcon from '@mui/icons-material/SmartToyOutlined';\r\nimport LogoutOutlinedIcon from '@mui/icons-material/LogoutOutlined';\r\nimport ManageAccountsOutlinedIcon from '@mui/icons-material/ManageAccountsOutlined';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport { Link } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\r\nimport PieChartIcon from '@mui/icons-material/PieChart';\r\n// import BarChartIcon from '@mui/icons-material/BarChart';\r\nimport PeopleIcon from '@mui/icons-material/People';\r\n// import InfoIcon from '@mui/icons-material/Info';\r\n\r\nexport default function HomeAdmin() {\r\n    const location = useLocation();\r\n    const adminDetails = location.state;\r\n    console.log(adminDetails)\r\n    \r\n    \r\n      const dense = false;\r\n      const secondary = true;\r\n    \r\n      return (\r\n        <div style={{height: \"92vh\"}} className=\"w-100 d-flex flex-column justify-content-center align-items-center pb-5\">\r\n            <h1 style={{color: \"#309CFF\"}}>Welcome Admin!</h1>\r\n        <List dense={dense} className=\"m-3\">\r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/users\">\r\n              <ListItemIcon >\r\n                <PeopleIcon color=\"primary\" fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Users\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/jobs\">\r\n              <ListItemIcon>\r\n                <SearchOutlinedIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Jobs\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n\r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/viewChatFlow\">\r\n              <ListItemIcon>\r\n                <AccountTreeIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Chat Flow\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n\r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/statistics\">\r\n              <ListItemIcon>\r\n                <PieChartIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Statistics\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/details\" state={adminDetails}>\r\n              <ListItemIcon>\r\n                <ManageAccountsOutlinedIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Admin Details\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/logout\" state={adminDetails}>\r\n              <ListItemIcon>\r\n                <LogoutOutlinedIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Logout\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n        </List>\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import { useLocation } from 'react-router-dom';\r\n\r\n// function HomeAdmin() {\r\n//     const location = useLocation();\r\n//     const adminDetails = location.state;\r\n//     console.log(adminDetails)\r\n//   return (\r\n//     <div>\r\n//     <h1>JOBOT Admin</h1>\r\n//     <p>\r\n//     With JOBOT find your dream job in seconds.\r\n//     </p>\r\n//     <nav>\r\n//         <ul>\r\n//             <li>\r\n//                 <Link to=\"/logout\">Log out?</Link>\r\n//             </li>\r\n//             <li>\r\n//                 <Link to=\"/details\" state={adminDetails}>Registration details</Link>\r\n//             </li>\r\n//             <li>\r\n//                 <Link to=\"/about\">About</Link>\r\n//             </li>\r\n//             <li>\r\n//                 <Link to=\"/users\">Users</Link>\r\n//             </li>\r\n//             <li>\r\n//                 <Link to=\"/jobs\">Jobs</Link>\r\n//             </li>\r\n//             <li>\r\n//                 <Link to=\"/viewChatFlow\">Chat Flow</Link>\r\n//             </li>\r\n//             <li>\r\n//                 <Link to=\"/statistics\">Statistics</Link>\r\n//             </li>\r\n//         </ul>\r\n//     </nav>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default HomeAdmin;","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/JobsPage.jsx",["263","264"],[],"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './JobsPage.css';\n// import starImage from './star.avif';\n\n// function JobsPage() {\n//   const [jobs, setJobs] = useState([]);\n//   // const [companySearchQuery, setCompanySearchQuery] = useState('');\n//   // const [jobTitleSearchQuery, setJobTitleSearchQuery] = useState('');\n//   // const [citySearchQuery, setCitySearchQuery] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n\n\n//   useEffect(() => {\n//     setIsLoading(true)\n//     axios.post('/viewjobs')\n//       .then(response => {\n//         if (response.data.success) {\n//           setJobs(response.data.total_list);\n//           setIsLoading(false);\n//         } else {\n//           console.log('Error fetching jobs:', response.data.message);\n//         }\n//       })\n//       .catch(error => {\n//         console.log('Error fetching jobs:', error.message);\n//       });\n//   }, []);\n\n//   // const filteredJobs = jobs.filter(job =>\n//   //   job.company.toLowerCase().includes(companySearchQuery.toLowerCase()) &&\n//   //   job.job.toLowerCase().includes(jobTitleSearchQuery.toLowerCase()) &&\n//   //   job.city.toLowerCase().includes(citySearchQuery.toLowerCase())\n//   // );\n\n//   // return (\n//   //   <div>\n//   //     <h1 className=\"title\">JOBOT Jobs</h1>\n//   //     {isLoading ? (\n//   //       <p className=\"loading\">Loading...</p>\n//   //     ) : (\n//   //       <div className=\"jobs-page\">\n//   //         <div className=\"search-container\">\n//   //           <input\n//   //             type=\"text\"\n//   //             placeholder=\"Search jobs by company name\"\n//   //             value={companySearchQuery}\n//   //             onChange={event => setCompanySearchQuery(event.target.value)}\n//   //             className=\"search-input\"\n//   //           />\n//   //           <input\n//   //             type=\"text\"\n//   //             placeholder=\"Search jobs by title\"\n//   //             value={jobTitleSearchQuery}\n//   //             onChange={event => setJobTitleSearchQuery(event.target.value)}\n//   //             className=\"search-input\"\n//   //           />\n//   //           <input\n//   //             type=\"text\"\n//   //             placeholder=\"Search jobs by city\"\n//   //             value={citySearchQuery}\n//   //             onChange={event => setCitySearchQuery(event.target.value)}\n//   //             className=\"search-input\"\n//   //           />\n//   //         </div>\n//   //         <ul className=\"jobs-list\">\n//   //           {filteredJobs.map((job, index) => (\n//   //             <li key={index} className=\"job-item\">\n//   //               <h2 className=\"company-name\">{job.company}</h2>\n//   //               <p className=\"job-title\">{job.job}</p>\n//   //               <p className=\"job-location\">{job.city}</p>\n//   //               {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n//   //               <p className=\"job-date\">{job.date}</p>\n//   //               <p className=\"job-link\">\n//   //                 <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n//   //                   {job.link}\n//   //                 </a>\n//   //               </p>\n//   //               <p className=\"job-description\">{job.description}</p>\n//   //             </li>\n//   //           ))}\n//   //         </ul>\n//   //       </div>\n//   //     )}\n//   //   </div>\n\n//   // );\n\n//   const jobsPerPage = 10;\n\n//   const JobList = ({ jobs }) => {\n//     const [currentPage, setCurrentPage] = useState(1);\n//     const [selectedJob, setSelectedJob] = useState(null);\n  \n//     // Calculate total number of pages\n//     const totalPages = Math.ceil(jobs.length / jobsPerPage);\n  \n//     // Get jobs for the current page\n//     const indexOfLastJob = currentPage * jobsPerPage;\n//     const indexOfFirstJob = indexOfLastJob - jobsPerPage;\n//     const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n  \n//     // Handle pagination\n//     const handlePageClick = (pageNumber) => {\n//       setCurrentPage(pageNumber);\n//       setSelectedJob(null);\n//     };\n  \n//     // Handle drill-down\n//     const handleJobClick = (job) => {\n//       setSelectedJob(job);\n//     };\n  \n//     return (\n//       <div className=\"job-list-container\">\n//         <h1 className=\"job-list-title\">Job Listings</h1>\n//         {selectedJob ? (\n//           <div className=\"job-details\">\n//             <h2>{selectedJob.title}</h2>\n//             <p>{selectedJob.company}</p>\n//             <p>{selectedJob.city}</p>\n//             <p>{selectedJob.date}</p>\n//             <p>{selectedJob.rating}</p>\n//             <button onClick={() => setSelectedJob(null)}>Back</button>\n//           </div>\n//         ) : (\n//           <div>\n//             <ul className=\"job-list\">\n//               {currentJobs.map((job) => (\n//                 <li\n//                   key={job.id}\n//                   className=\"job-list-item\"\n//                   onClick={() => handleJobClick(job)}\n//                 >\n//                   <h3>{job.title}</h3>\n//                   <p>{job.company}</p>\n//                   <p>{job.city}</p>\n//                 </li>\n//               ))}\n//             </ul>\n//             <div className=\"pagination\">\n//               {Array.from({ length: totalPages }, (_, index) => index + 1).map(\n//                 (pageNumber) => (\n//                   <button\n//                     key={pageNumber}\n//                     onClick={() => handlePageClick(pageNumber)}\n//                     className={currentPage === pageNumber ? 'active' : ''}\n//                   >\n//                     {pageNumber}\n//                   </button>\n//                 )\n//               )}\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   };\n\n// return (\n//   jobs?<JobList jobs={jobs}/>:<div>wait...</div>\n// )\n// }\n\n// export default JobsPage;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './JobsPage.css';\nimport starImage from './star.avif';\nimport {CollapsableCard} from \"./CollapsableCard.jsx\"\nimport {CardsTable} from \"./CardsTable.jsx\"\nimport { blue } from '@mui/material/colors';\n\nfunction JobsPage() {\n  const [jobs, setJobs] = useState([]);\n  const [companySearchQuery, setCompanySearchQuery] = useState('');\n  const [jobTitleSearchQuery, setJobTitleSearchQuery] = useState('');\n  const [citySearchQuery, setCitySearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  useEffect(() => {\n    setIsLoading(true)\n    axios.post('/viewjobs')\n      .then(response => {\n        if (response.data.success) {\n          setJobs(response.data.total_list);\n          setIsLoading(false);\n        } else {\n          console.log('Error fetching jobs:', response.data.message);\n        }\n      })\n      .catch(error => {\n        console.log('Error fetching jobs:', error.message);\n      });\n  }, []);\n\n  const filteredJobs = jobs.filter(job =>\n    job.company.toLowerCase().includes(companySearchQuery.toLowerCase()) &&\n    job.job.toLowerCase().includes(jobTitleSearchQuery.toLowerCase()) &&\n    job.city.toLowerCase().includes(citySearchQuery.toLowerCase())\n  );\n\n  function collapsed(job){\n    return (<div style={{textAlign:\"center\"}} >\n    {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n    <p className=\"job-date\">{job.date}</p>\n    <p className=\"job-link\">\n      <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        {`${job.link.slice(0, 30)}...`}\n      </a>\n    </p>\n    <p className=\"job-description\" style={{margin: \"0 2rem 2rem\"}}>{job.description}</p>\n    </div>)\n  }\n\n  const dataAsCards = filteredJobs.map((job, index) => {\n    return {\n      content: <div style={{textAlign:\"center\"}}>\n                    <h2 className=\"job-title\">{job.job}</h2>\n                    <p>{job.company}</p>\n                    <p className=\"job-location\">{job.city}</p></div>,\n      collapsableContent: collapsed(job)\n    }\n  })\n\n  return (\n    <div>\n      <h1 className=\"title\">JOBOT Jobs</h1>\n      { isLoading ?  <p className=\"loading\">Loading...</p> :(\n      <div>\n      <div className=\"w-50 d-flex mx-auto align-items-center justify-cotnent-center\">\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by company name\"\n              value={companySearchQuery}\n              onChange={event => setCompanySearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by title\"\n              value={jobTitleSearchQuery}\n              onChange={event => setJobTitleSearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by city\"\n              value={citySearchQuery}\n              onChange={event => setCitySearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n      </div>\n      <div>\n      <CardsTable data={dataAsCards} />\n      </div>\n      </div>) }\n      {/* {isLoading ? (\n        <p className=\"loading\">Loading...</p>\n      ) : (\n        <div className=\"jobs-page\">\n          <div className=\"search-container\">\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by company name\"\n              value={companySearchQuery}\n              onChange={event => setCompanySearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by title\"\n              value={jobTitleSearchQuery}\n              onChange={event => setJobTitleSearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by city\"\n              value={citySearchQuery}\n              onChange={event => setCitySearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n          </div>\n          <ul className=\"jobs-list\">\n            {filteredJobs.map((job, index) => (\n              <li key={index} className=\"job-item\">\n                <h2 className=\"company-name\">{job.company}</h2>\n                <p className=\"job-title\">{job.job}</p>\n                <p className=\"job-location\">{job.city}</p>\n                {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n                <p className=\"job-date\">{job.date}</p>\n                <p className=\"job-link\">\n                  <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {job.link}\n                  </a>\n                </p>\n                <p className=\"job-description\">{job.description}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )} */}\n    </div>\n\n  );\n}\n\nexport default JobsPage;\n\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/HomeClient.jsx",["265"],[],"import List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\n// import FolderIcon from \"@mui/icons-material/Folder\";\r\nimport SmartToyOutlinedIcon from '@mui/icons-material/SmartToyOutlined';\r\nimport LogoutOutlinedIcon from '@mui/icons-material/LogoutOutlined';\r\nimport ManageAccountsOutlinedIcon from '@mui/icons-material/ManageAccountsOutlined';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport { Link } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function Home() {\r\n    const location = useLocation();\r\n    const clientDetails = location.state;\r\n    console.log(clientDetails)\r\n    \r\n    \r\n      const dense = false;\r\n      const secondary = true;\r\n    \r\n      return (\r\n        <div style={{height: \"92vh\"}} className=\"w-100 d-flex flex-column justify-content-center align-items-center pb-5\">\r\n            <h1 style={{color: \"#309CFF\"}}>Welcome!</h1>\r\n        <List dense={dense} className=\"m-3\">\r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/startChat\" state={clientDetails}>\r\n              <ListItemIcon >\r\n                <SmartToyOutlinedIcon color=\"primary\" fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Start Chat\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/jobs\">\r\n              <ListItemIcon>\r\n                <SearchOutlinedIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Self Job Search\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/details\" state={clientDetails}>\r\n              <ListItemIcon>\r\n                <ManageAccountsOutlinedIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"User Details\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n          <ListItem>\r\n            <IconButton component={Link} to=\"/logout\" state={clientDetails}>\r\n              <ListItemIcon>\r\n                <LogoutOutlinedIcon  color=\"primary\"  fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary=\"Logout\"\r\n              secondary={false}\r\n            />\r\n          </ListItem>\r\n    \r\n        </List>\r\n        </div>\r\n      );\r\n    }\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/getFlowText.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/ActionProvider.js",["266","267","268","269","270","271","272","273"],[],"import axios from \"axios\";\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  saveHistoryInDB=(node)=>{\r\n    node.getSelected()[\"displayed jobs\"] && delete node.getSelected()[\"displayed jobs\"];\r\n    // const current = new Date();\r\n    // const date = `${current.getDate()}/${current.getMonth()+1}/${current.getFullYear()}`;\r\n    // var history={\r\n    //   ...node.getSavedInDB(),\r\n    //   \"client details\":node.getRegistrationDetails(),\r\n    //   \"field\":node.getSelected().field,\r\n    //   \"conversation content\":node.getHistoryChat(),\r\n    //   \"displayed jobs\":node.getSavedInDB()[\"displayed jobs\"]?node.getSavedInDB()[\"displayed jobs\"]:\"-\",\r\n    //   \"selected jobs\":node.getSavedInDB()[\"selected jobs\"]?node.getSavedInDB()[\"selected jobs\"]:\"-\",\r\n    //   \"experiance & education\":node.getSelected()[\"job Requirements\"]?node.getSelected()[\"job Requirements\"]:\"-\",\r\n    //   \"feedback on termination\":node.getSavedInDB()[\"feedback on termination\"]?node.getSavedInDB()[\"feedback on termination\"]:\"-\",\r\n    //   \"selected features\":node.getSelected(),\r\n    //   \"date\":date\r\n    //   }\r\n    //   // console.log(\"save data in DB \",history)\r\n    // node.setSavedInDB(history);\r\n\r\n    // //call server with 'history' var\r\n    //   axios.post('/clienthistory', {\r\n    //     history: history\r\n    //   }, {\r\n    //     headers: {\r\n    //     'Content-type': 'application/json; charset=UTF-8' } \r\n    //   })\r\n    //   .then((response) => {\r\n    //     console.log(response.data.message);\r\n    //     console.log(\"save data in DB \",history)\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.error(error.response.data.error);\r\n    //   });\r\n  }\r\n\r\n  selfSearch = (node,Freetxt) => {\r\n    var txt1=node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(\r\n      txt1,\r\n      {\r\n        widget: \"moreInfo\",\r\n      }\r\n    );\r\n    this.addMessageToState(message1,node);\r\n\r\n    //goodbye\r\n    var txt2=node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(txt2);\r\n\r\n    //set history\r\n    if((typeof Freetxt === \"object\") && (Freetxt !== null) && (Freetxt.flag === \"noJobs\" || Freetxt.flag === \"feedback\")){\r\n      //adding the bot message into the end of history\r\n      var newHistoryArray=node.getHistoryChat();\r\n      var lastBotHistory=newHistoryArray.pop();\r\n      lastBotHistory.bot.push(txt1,txt2)\r\n      var updatedBotHistory={bot:lastBotHistory.bot}\r\n      node.setHistoryChat([...newHistoryArray,updatedBotHistory])\r\n    }else{\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:[Freetxt]},{bot:[txt1,txt2]}]);\r\n    }\r\n    console.log(\"history \",node.getHistoryChat());\r\n    node.setIsFeedback(0);\r\n    this.addMessageToState(message2,node);\r\n    this.saveHistoryInDB(node)\r\n  };\r\n\r\n  responseToFeedback = (node,feedback,JOBOTresponse) => {\r\n    const message = this.createChatBotMessage(JOBOTresponse);\r\n    this.addMessageToState(message,node);\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:[feedback]},{bot:[JOBOTresponse]}]);\r\n    node.setSelected({...node.getSelected(),\"feedback\":feedback})\r\n  }\r\n\r\n  handleField = (node,opt) => {\r\n    console.log(\"Thank you god!\",node.getRegistrationDetails())\r\n    var txt=node.getNextResponse().children[0].children[1].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"jobTitles\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(),field:opt})\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[node.getNextResponse().text,node.getNextResponse().children[0].text]},{user:[opt]},{bot:[txt]}])\r\n    console.log(\"how \",node.getHistoryChat())\r\n    node.setNextResponse(node.getNextResponse().children[0].children[1])\r\n    this.addMessageToState(message,node);\r\n\r\n    // var goal=\"view_feedback\"\r\n    // axios.post(\"/getStatistics\", {\r\n    //   goal: goal\r\n    // }, {\r\n    //   headers: {\r\n    //   'Content-type': 'application/json; charset=UTF-8' } \r\n    // })\r\n    // .then((response) => {\r\n    //   if (response.data.success) {\r\n    //     console.log(\"Server returned statistics:\", response.data.message);\r\n\r\n    //   } else {\r\n    //     console.log(\"Server did not return statistics: \", response.data.message);\r\n    //   }\r\n    // })\r\n    // .catch((err) => {\r\n    //   console.log(\"Error getting statistics: \", err.message);\r\n    // });\r\n\r\n    // var categories=[\"it has not job title i want\",\"it is complicated system\",\"i found jobs\",\"good jobs but it ugly display\"]\r\n    // var statName=\"rachel checking\"\r\n    // axios.post(\"/createNewStatistics\", {\r\n    //   categories: categories,\r\n    //   statName: statName\r\n    // }, {\r\n    //   headers: {\r\n    //   'Content-type': 'application/json; charset=UTF-8' } \r\n    // })\r\n    // .then((response) => {\r\n    //   if (response.data.success) {\r\n    //     console.log(\"Server returned new statistics:\", response.data.message);\r\n\r\n    //   } else {\r\n    //     console.log(\"Server did not return new statistics: \", response.data.message);\r\n    //   }\r\n    // })\r\n    // .catch((err) => {\r\n    //   console.log(\"Error getting new statistics: \", err.message);\r\n    // });\r\n\r\n  };\r\n\r\n  handleOtherField = (node,opt)=>{\r\n    var txt=node.getNextResponse().children[0].children[0].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"approval\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(),field:opt});\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[node.getNextResponse().text,node.getNextResponse().children[0].text]},{user:[opt]},{bot:[txt]}])\r\n    console.log(\"how \",node.getHistoryChat())\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n    this.addMessageToState(message,node);\r\n  };\r\n\r\n  handleApproval(node,opt){\r\n    //case of asking for saving chat details in our system\r\n    if(node.getNextResponse().title===\"user selected 'other' field\"){\r\n      var txt=node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"moreInfo\",\r\n        }\r\n      );\r\n      node.setSelected({...node.getSelected(),approval:opt});\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:[opt]},{bot:[txt]}]);\r\n      console.log(\"history \",node.getHistoryChat());\r\n      this.addMessageToState(message,node);\r\n      //קריאה לסיום לא בטוח\r\n      if(opt===\"Yes\"){\r\n        this.saveHistoryInDB(node)\r\n      }\r\n    }\r\n    //case of asking for self job search\r\n    else if(node.getNextResponse().title.includes(\"self job search\")){\r\n      if(opt===\"Yes\"){\r\n        //קריאה לסיום\r\n        this.selfSearch(node,opt)\r\n      }else{\r\n        //קריאה לסיום\r\n        var txt=node.getNextResponse().children[1].text;\r\n        const message = this.createChatBotMessage(txt);\r\n        node.setHistoryChat([...node.getHistoryChat(),{user:[opt]},{bot:[txt]}]);\r\n        console.log(\"history \",node.getHistoryChat());\r\n        this.addMessageToState(message,node);\r\n        this.saveHistoryInDB(node)\r\n      }\r\n    }\r\n    //case of asking for accurate match\r\n    else if(node.getNextResponse().title===\"user selected 'Nothing fits' or up to 2 jobs\"){\r\n      //user want an accurate match\r\n      if(opt===\"Yes\"){\r\n        node.setHistoryChat([...node.getHistoryChat(),{user:[opt]}]);\r\n        document.documentElement.style.setProperty('--button-visibility', 'visible');\r\n        this.requirementsWidget(node)\r\n      }else{\r\n        //user did not want an accurate match\r\n        var txt=node.getNextResponse().children[0].text;\r\n        const message = this.createChatBotMessage(txt);\r\n        node.setHistoryChat([...node.getHistoryChat(),{user:[opt]},{bot:[txt]}]);\r\n        console.log(\"history \",node.getHistoryChat());\r\n        node.setIsFeedback(1);\r\n        node.setNextResponse(node.getNextResponse().children[0])\r\n        this.addMessageToState(message,node);\r\n        document.documentElement.style.setProperty('--button-visibility', 'visible');\r\n      }\r\n    }\r\n  }\r\n\r\n  handleJobTitle = (node,opts) => {\r\n    var txt=node.getNextResponse().children[0].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"companies\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(),'JobTitles':opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n    console.log(\"how \",node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0])\r\n    this.addMessageToState(message,node);\r\n  };\r\n\r\n  handleCompany = (node,opts) => {\r\n    var txt1=node.getNextResponse().children[0].text;\r\n    const message1=this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1,node);\r\n    \r\n    var txt2=node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(\r\n      txt2,\r\n      {\r\n        widget: \"areas\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(),companies:opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n    console.log(\"how \",node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n    this.addMessageToState(message2,node);\r\n  };\r\n\r\n  handleArea(node,opts){\r\n    var txt1=node.getNextResponse().children[0].text;\r\n    const message1=this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1,node);\r\n\r\n    var txt2=node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(\r\n      txt2,\r\n      {\r\n        widget: \"jobTypes\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(), \"areas\":opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n    console.log(\"how \",node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n    this.addMessageToState(message2,node);\r\n  }\r\n\r\n  handleJobType(node,opts){\r\n    //asking to wait\r\n    var txt1=node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1,node);\r\n\r\n    //server calculating jobs...\r\n    node.setSelected({...node.getSelected(),'job Types':opts})\r\n    console.log(\"selected before sending to server: \",node.getSelected())\r\n    // var jobs=[\"X\",\"Y\",\"Z\",\"T\",\"W\",\"Nothing fits\"];\r\n    // node.setJobs(jobs);\r\n\r\n    //samuel\r\n    var responses = {...node.getSelected(),\"client details\":node.getRegistrationDetails()}\r\n    axios.post(\"/getfirstjobs\", {\r\n      responses: responses\r\n    }, {\r\n      headers: {\r\n      'Content-type': 'application/json; charset=UTF-8' } \r\n    })\r\n    .then((response) => {\r\n      if (response.data.success) {\r\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\r\n        // Add a message for each job to the chatbot's message history\r\n        // response.data.list_jobs.forEach((job) => {\r\n        //   const jobMessage = this.createChatBotMessage(\r\n        //     `Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}`\r\n        //   );\r\n        //   this.addMessageToState(jobMessage,node);\r\n        // });\r\n        // while(response.data.list_jobs===[]){}\r\n        \r\n        // node.setJobs(response.data.list_jobs);\r\n\r\n        node.setJobs(response.data.list_jobs);\r\n\r\n        // node.setJobs([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"Nothing fits\"]);\r\n        if(node.getSavedInDB()[\"displayed jobs\"]){\r\n          node.setSavedInDB({...node.getSavedInDB(),\"displayed jobs\":node.getSavedInDB()[\"displayed jobs\"].concat(node.getJobs())});\r\n        }else{\r\n          node.setSavedInDB({...node.getSavedInDB(),\"displayed jobs\":node.getJobs()});\r\n        }\r\n\r\n        //continute\r\n        if(response.data.list_jobs.length!==0){\r\n          var txt2=node.getNextResponse().children[0].children[0].text;\r\n          const message2 = this.createChatBotMessage(\r\n            txt2,\r\n            {\r\n              widget: \"jobs\",\r\n            }\r\n          );\r\n          node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])//ID job ADDED???\r\n          node.setSelected({...node.getSelected(),\"displayed jobs\":response.data.list_jobs})\r\n          console.log(\"history \",node.getHistoryChat());\r\n          node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n          this.addMessageToState(message2,node);\r\n        }else{\r\n          var txt2=\"No jobs found\";\r\n          const message2 = this.createChatBotMessage(txt2);\r\n          node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n          console.log(\"history \",node.getHistoryChat());\r\n          node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n          this.addMessageToState(message2,node);\r\n          //continute to accuracy phase\r\n\r\n          node.incCountNotFits(node.getCountNotFits());\r\n          this.handleJob(node,[\"No jobs\"]);\r\n        }\r\n\r\n      } else {\r\n        console.log(\"Error getting matching jobs: \", response.data.message);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error getting matching jobs: \", err.message);\r\n    });\r\n\r\n    // //continute\r\n    // var txt2=node.getNextResponse().children[0].children[0].text;\r\n    // const message2 = this.createChatBotMessage(\r\n    //   txt2,\r\n    //   {\r\n    //     widget: \"jobs\",\r\n    //   }\r\n    // );\r\n    // node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n    // console.log(\"history \",node.getHistoryChat());\r\n    // node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n    // this.addMessageToState(message2,node);\r\n  }\r\n\r\n  handleJob(node,opts){\r\n    var isJobs=1;\r\n    if(opts[0]===\"No jobs\"){\r\n      opts[0]=\"Nothing fits\";\r\n      isJobs=0;\r\n    }\r\n\r\n    if(opts[0]===\"Nothing fits\"){\r\n      if(node.getCountNotFits()===1){\r\n        var txt=node.getNextResponse().children[0].text;\r\n        const message = this.createChatBotMessage(\r\n          txt,\r\n          {\r\n            widget:\"approval\"\r\n          }\r\n          );\r\n        this.addMessageToState(message,node);\r\n\r\n        //adding the bot message into the end of history\r\n        if(isJobs===1){\r\n          //check if it is a case that user selected 1 or 2 jobs in the first matching jobs\r\n          if(node.getSelectedJobs().length>0){\r\n            opts=node.getSelectedJobs();\r\n            node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n          }else{\r\n            node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n          }\r\n        }else{\r\n          var newHistoryArray=node.getHistoryChat();\r\n          var lastBotHistory=newHistoryArray.pop();\r\n          lastBotHistory.bot.push(txt)\r\n          var updatedBotHistory={bot:lastBotHistory.bot}\r\n          node.setHistoryChat([...newHistoryArray,updatedBotHistory])\r\n        }\r\n        node.setNextResponse(node.getNextResponse().children[0])\r\n      }else if(node.getCountNotFits()===2){\r\n        if(isJobs===1){\r\n          this.selfSearch(node,opts[0]);\r\n        }else{\r\n          this.selfSearch(node,{flag:\"noJobs\"});\r\n        }\r\n      }\r\n    }else if((opts.length<=2)&&(node.getIsJobAccuracy()===0)){//#מה ההבדל בין זה ללמעלה??\r\n      var txt=node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget:\"approval\"\r\n        }\r\n        );\r\n      this.addMessageToState(message,node);\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n      node.setNextResponse(node.getNextResponse().children[0])\r\n    }else{\r\n      txt=node.getNextResponse().children[1].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"emailDisplay\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n      console.log(\"I chose jobs  \",node.getSelectedJobs());\r\n      node.setNextResponse(node.getNextResponse().children[1])\r\n      this.addMessageToState(message,node);\r\n    }\r\n  }\r\n\r\n  handleEmailDisplay(node,opts){\r\n    //user selected 'Just keep going'\r\n    if(opts[0]===\"Just keep going\"){\r\n      var txt=node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"approval\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0])\r\n      this.addMessageToState(message,node);\r\n    }\r\n    //user selected 'Display choices'\r\n    else if(opts.length===1 && opts.includes(\"Display my choices again\")){\r\n      var txt1=node.getNextResponse().children[1].text;\r\n      const message1=this.createChatBotMessage(\r\n        txt1,\r\n        {\r\n          widget: \"displaySelectedJobs\",\r\n        }\r\n      );\r\n      this.addMessageToState(message1,node);\r\n      var txt2=node.getNextResponse().children[1].children[0].text;\r\n      const message2=this.createChatBotMessage(\r\n        txt2,\r\n        {\r\n          widget: \"approval\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[1].children[0])\r\n      this.addMessageToState(message2,node);\r\n    }\r\n    //user selected 'Email them to me'\r\n    else if((opts.length===1 && opts.includes(\"Email them to me\"))){\r\n      var txt=node.getNextResponse().children[2].text;\r\n      const message=this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"email\",//enter email\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[2])\r\n      this.addMessageToState(message,node);\r\n    }\r\n    //user selected 'Display choices and Email them to me'\r\n    else {\r\n      var txt1=node.getNextResponse().children[3].text;\r\n      const message1 = this.createChatBotMessage(\r\n        txt1,\r\n        {\r\n          widget: \"displaySelectedJobs\",\r\n        }\r\n      );\r\n      this.addMessageToState(message1,node);\r\n\r\n      var txt2=node.getNextResponse().children[3].children[0].text;\r\n      const message2 = this.createChatBotMessage(\r\n        txt2,\r\n        {\r\n          widget: \"email\",//enter email\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[3].children[0])\r\n      this.addMessageToState(message2,node);\r\n    }\r\n  }\r\n\r\n  handleEmail(node,email){\r\n    console.log(\"email: \",email,\"sended\")\r\n    if(email===\"\"){\r\n      var txt=node.getNextResponse().children[0].children[0].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"approval\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:email},{bot:[txt]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n      this.addMessageToState(message,node);\r\n    }else {\r\n      // const nodemailer = require('nodemailer');\r\n  \r\n      // // create reusable transporter object using the default SMTP transport\r\n      // let transporter = nodemailer.createTransport({\r\n      //     host: 'smtp.gmail.com',\r\n      //     port: 587,\r\n      //     secure: false,\r\n      //     auth: {\r\n      //         user: 'your_email@gmail.com',\r\n      //         pass: 'your_email_password'\r\n      //     }\r\n      // });\r\n  \r\n      // // setup email data with unicode symbols\r\n      // let mailOptions = {\r\n      //     from: 'your_email@gmail.com', // sender address\r\n      //     to: 'recipient_email@example.com', // list of receivers\r\n      //     subject: 'Test email', // Subject line\r\n      //     text: 'Hello world!', // plain text body\r\n      //     html: '<b>Hello world!</b>' // html body\r\n      // };\r\n  \r\n      // // send mail with defined transport object\r\n      // transporter.sendMail(mailOptions, (error, info) => {\r\n      //     if (error) {\r\n      //         return console.log(error);\r\n      //     }\r\n      //     console.log('Message sent: %s', info.messageId);\r\n      // });\r\n      // //option 2\r\n      // axios.post('/send-email', {\r\n      //   email: email\r\n      // }, {\r\n      //   headers: {\r\n      //   'Content-type': 'application/json; charset=UTF-8' } \r\n      // })\r\n      // .then((response) => {\r\n      //   console.log(response.data.message);\r\n      // })\r\n      // .catch((error) => {\r\n      //   console.error(error.response.data.error);\r\n      // });\r\n      var txt1=node.getNextResponse().children[0].text;\r\n      const message1 = this.createChatBotMessage(txt1);\r\n      this.addMessageToState(message1,node);\r\n  \r\n      var txt2=node.getNextResponse().children[0].children[0].text;\r\n      const message2 = this.createChatBotMessage(\r\n        txt2,\r\n        {\r\n          widget: \"approval\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:email},{bot:[txt1,txt2]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n      this.addMessageToState(message2,node);\r\n    }\r\n  }\r\n\r\n  handleAccuracyLevel(node,opts){\r\n    var tempNodeObject={...node.getAccuracyNode()}\r\n    node.setNextResponse(tempNodeObject)\r\n    if(opts.includes(\"Experience level\")){\r\n      this.experienceWidget(node)\r\n    }else if(opts.includes(\"Desired city\")){\r\n      this.cityWidget(node)\r\n    }else if(opts.includes(\"Job title\")){\r\n      this.jobTitleTypingWidget(node)\r\n    }else{\r\n      console.log(\"server match\");\r\n      this.accurateJobsWidget(node)\r\n    }\r\n  }\r\n\r\n  experienceWidget(node){\r\n    var txt=node.getNextResponse().children[2].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"experienceLevel\",\r\n      }\r\n    );\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[txt]}])\r\n    // console.log(\"history \",node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[2])\r\n    this.addMessageToState(message,node);\r\n  }\r\n\r\n  handleExperienceLevel(node,opts){\r\n    if(opts[0]!==\"Other\"){\r\n      node.setIsJobAccuracy(1);\r\n    }\r\n    node.setSelected({...node.getSelected(),\"experience level\":opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts}])\r\n    console.log(\"history in hanExp \",node.getHistoryChat());\r\n    //remove 'Experience level' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(node.getAccuracyOptions().filter((selectedOption) => selectedOption !== \"Experience level\"))\r\n    this.handleAccuracyLevel(node,node.getAccuracyOptions())\r\n  }\r\n\r\n  cityWidget(node){\r\n    var txt=node.getNextResponse().children[1].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"cities\",\r\n      }\r\n    );\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[txt]}])\r\n    node.setNextResponse(node.getNextResponse().children[1])\r\n    console.log(\"history in cityWidget \",node.getHistoryChat());\r\n    this.addMessageToState(message,node);   \r\n  }\r\n\r\n  handleCities(node,opts){\r\n    if(opts[0]!==\"Other\"){\r\n      node.setIsJobAccuracy(1);\r\n    }\r\n    node.setSelected({...node.getSelected(),\"cities\":opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts}])\r\n    console.log(\"history in hanCities \",node.getHistoryChat());\r\n    //remove 'Desired city' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(node.getAccuracyOptions().filter((selectedOption) => selectedOption !== \"Desired city\"))\r\n    this.handleAccuracyLevel(node,node.getAccuracyOptions())\r\n  }\r\n\r\n  requirementsWidget(node){\r\n    var txt=node.getNextResponse().children[1].text;\r\n    const message = this.createChatBotMessage(txt);\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[txt]}])\r\n    node.setNextResponse(node.getNextResponse().children[1])\r\n    console.log(\"history in requirementsWidget \",node.getHistoryChat());\r\n    node.setIsRequirements(1);\r\n    this.addMessageToState(message,node); \r\n  }\r\n\r\n  handleRequirements(node,msg){\r\n    document.documentElement.style.setProperty('--button-visibility', 'hidden');\r\n    //typing about job requirements is stopped \r\n    node.setIsRequirements(0);\r\n\r\n    //unclear-->0 ???????\r\n    node.setIsJobAccuracy(1);\r\n\r\n    node.setSelected({...node.getSelected(),\"job Requirements\":msg})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:[msg]}])\r\n    console.log(\"history in handleRequirements \",node.getHistoryChat());\r\n    console.log(\"selected in handleRequirements \",node.getSelected());\r\n    //remove 'Job requirements' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    // node.setAccuracyOptions(node.getAccuracyOptions().filter((selectedOption) => selectedOption !== \"Job requirements\"))\r\n    // this.handleAccuracyLevel(node,node.getAccuracyOptions())\r\n\r\n    var txt=node.getNextResponse().children[0].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"accuracyLevel\",\r\n      }\r\n    );\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[txt]}]);\r\n    console.log(\"history \",node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0])\r\n    this.addMessageToState(message,node);\r\n  }\r\n\r\n  jobTitleTypingWidget(node){\r\n    var txt=node.getNextResponse().children[3].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"jobTitleTyping\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[txt]}])\r\n    node.setNextResponse(node.getNextResponse().children[3])\r\n    console.log(\"history in jobTitleTypingWidgetTyping \",node.getHistoryChat());\r\n    this.addMessageToState(message,node); \r\n  }\r\n  handleJobTitleTyping(node,msg){\r\n    //unclear-->0 ???????\r\n    node.setIsJobAccuracy(1);\r\n    if (msg!==\"\"){\r\n      node.setSelected({...node.getSelected(),\"additional job title\":msg})\r\n    }\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:[msg]}])\r\n    console.log(\"history in handleIsJobTitleTyping \",node.getHistoryChat());\r\n    console.log(\"selected in handleIsJobTitleTyping \",node.getSelected());\r\n    //remove 'Job title' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(node.getAccuracyOptions().filter((selectedOption) => selectedOption !== \"Job title\"))\r\n    this.handleAccuracyLevel(node,node.getAccuracyOptions())\r\n  }\r\n\r\n  accurateJobsWidget(node){\r\n    //asking to wait\r\n    var txt1=node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1,node);\r\n\r\n    //server calculating jobs...\r\n    console.log(\"new selected \",node.getSelected())\r\n    var responses = {...node.getSelected(),\"client details\":node.getRegistrationDetails()}\r\n    axios.post(\"/getsecondjobs\", {\r\n      responses: responses\r\n    }, {\r\n      headers: {\r\n      'Content-type': 'application/json; charset=UTF-8' } \r\n    })\r\n    \r\n    .then((response) => {\r\n      if (response.data.success) {\r\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\r\n        // Add a message for each job to the chatbot's message history\r\n        // response.data.list_jobs.forEach((job) => {\r\n        //   const jobMessage = this.createChatBotMessage(\r\n        //     `Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}`\r\n        //   );\r\n        //   this.addMessageToState(jobMessage,node);\r\n        // });\r\n        // while(response.data.list_jobs===[]){}\r\n\r\n        // node.setJobs(response.data.list_jobs);\r\n        \r\n        node.setJobs(response.data.list_jobs);\r\n        //node.setJobs([\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"Nothing fits\"]);\r\n        if(node.getSavedInDB()[\"displayed jobs\"]){\r\n          node.setSavedInDB({...node.getSavedInDB(),\"displayed jobs\":node.getSavedInDB()[\"displayed jobs\"].concat(node.getJobs())});\r\n        }else{\r\n          node.setSavedInDB({...node.getSavedInDB(),\"displayed jobs\":node.getJobs()});\r\n        }\r\n\r\n        //UNIT TEST//\r\n        \r\n        //לא לשכוח לשרשר את העבודות החדשות שהוצעו????????אולי לעשות רשימה חדשה שהיא העבודות סבב 2\r\n        //continute\r\n        if(response.data.list_jobs.length!==0){\r\n          if(response.data.list_jobs.length>1){\r\n            var txt2=`With all the information you provided me, I find for you these top ${response.data.list_jobs.length} jobs`;\r\n            const message2 = this.createChatBotMessage(txt2)\r\n            this.addMessageToState(message2,node);\r\n          }\r\n          var txt3=node.getNextResponse().children[0].children[0].text;\r\n          const message3 = this.createChatBotMessage(\r\n            txt3,\r\n            {\r\n              widget: \"jobs\",\r\n            }\r\n          );\r\n          if(response.data.list_jobs.length>1){\r\n            node.setHistoryChat([...node.getHistoryChat(),{bot:[txt1,txt2,txt3]}])\r\n          }else{\r\n            node.setHistoryChat([...node.getHistoryChat(),{bot:[txt1,txt3]}])\r\n          }\r\n          console.log(\"history in accurate jobs handle \",node.getHistoryChat());\r\n          node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n          this.addMessageToState(message3,node);\r\n        }else{\r\n          var txt2=\"No jobs found\";\r\n          const message2 = this.createChatBotMessage(txt2);\r\n          node.setHistoryChat([...node.getHistoryChat(),{bot:[txt1,txt2]}])\r\n          console.log(\"history \",node.getHistoryChat());\r\n          node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n          this.addMessageToState(message2,node);\r\n\r\n          //continute to accuracy phase\r\n          node.incCountNotFits(node.getCountNotFits());\r\n          this.handleJob(node,[\"No jobs\"]);\r\n        }\r\n\r\n      } else {\r\n        console.log(\"Error getting matching jobs: \", response.data.message);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error getting matching jobs: \", err.message);\r\n    });\r\n  }\r\n\r\n  addMessageToState = (message,node) => {\r\n    this.setState((prevState) =>{\r\n      return {\r\n        ...prevState,\r\n        messages: [...prevState.messages, message],\r\n        head: node\r\n        };\r\n    });\r\n  };\r\n}\r\n\r\nexport default ActionProvider;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/MessageParser.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/config.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/convert_tree_to_json.js",["274","275"],[],"var jobTypes;\r\nvar successfulEnding;\r\nvar selfJobSearch;\r\nvar goodBy2;\r\nvar displayingAdaptedJobs;\r\nvar isAdditionalJobs;\r\nvar enterEmail;\r\nvar areas={\r\n  title: \"\",\r\n  text: \"In which areas are you interested?\",\r\n  options:[\"South\", \"North\", \"Central\"],\r\n  children:\r\n  [\r\n    {\r\n      title: \"user selected areas\",\r\n      text: \"Excellent, we will consider priority for these areas\",\r\n      children:\r\n      [\r\n        jobTypes={\r\n          title: \"next question\",\r\n          text: \"Select a job type\",\r\n          options: [\"Full_time\", \"Part_time\"],\r\n          children:\r\n          [\r\n            {\r\n              title: \"jobs scanning\",\r\n              text: \"Just a moment please, I'm looking for relevant jobs for you\",\r\n              children:\r\n              [\r\n                {\r\n                  title: \"display appropriate jobs\",\r\n                  text: \"Please select appropriate jobs\",\r\n                  children:\r\n                  [\r\n                    {\r\n                      title: \"user selected 'Nothing fits' or up to 2 jobs\",\r\n                      text: \"Would you like to see jobs with an accurate match?\",\r\n                      options: [\"Yes\", \"No\"],\r\n                      children:\r\n                      [\r\n                        {\r\n                          title: \"user refused to an accurate match\",\r\n                          text: \"Why don't you want offers anymore?\",\r\n                          children:\r\n                          [\r\n                            selfJobSearch={\r\n                              title: \"send to self job search\",\r\n                              text: \"Ok, you have an opportunity to self job search from our jobs pool\",\r\n                              children:\r\n                              [\r\n                                goodBy2={\r\n                                  title: \"goodbye\",\r\n                                  text: \"It was a pleasure to assist you. Thank you!\"\r\n                                }\r\n                              ]\r\n                            }\r\n                          ]\r\n                        },\r\n                        {\r\n                          title: \"user agreed to an accurate match\",\r\n                          text: \"Type your experience and education in the selected field\",\r\n                          children:\r\n                          [\r\n                            {//\r\n                              title: \"user typed his experience and education\",\r\n                              text: \"Select additional accuracy levels (Multiple choice)\",\r\n                              options: [\"Experience level\",\"Desired city\",\"Job title\",\"Other\"],\r\n                              children:\r\n                              [\r\n                                displayingAdaptedJobs={\r\n                                  title: \"user selected 'Other' level of accuracy\",\r\n                                  text: \"Just a moment please, I'm looking for more precise jobs for you\",\r\n                                  children:\r\n                                  [\r\n                                    {\r\n                                      title: \"JOBOT search more precise jobs\",\r\n                                      text: \"Please select appropriate jobs\",\r\n                                      children:\r\n                                      [\r\n                                        {...selfJobSearch,title: \"user selected 'Nothing fits\"},\r\n                                        successfulEnding={\r\n                                          title: \"user selected at least 1 job\",\r\n                                          text: \"Wonderful, how would you like to continute? (Multiple choice)\",\r\n                                          options: [\"Display my choices again\",\"Email them to me\",\"Just keep going\"],\r\n                                          children:\r\n                                          [\r\n                                            isAdditionalJobs={\r\n                                              title: \"self job search\",\r\n                                              text: \"Are you interested in viewing additional jobs in our web?\",\r\n                                              options: [\"Yes\",\"No\"],\r\n                                              children:\r\n                                              [\r\n                                                {...selfJobSearch, title: \"user selected 'yes' for viewing additional jobs\"},\r\n                                                {...goodBy2, title: \"user selected 'no' for viewing additional jobs\"}\r\n                                              ]\r\n                                            },\r\n                                            {\r\n                                              title: \"user selected 'display choices'\",\r\n                                              text: \"There are your selected jobs\",\r\n                                              children:\r\n                                              [\r\n                                                isAdditionalJobs\r\n                                              ]\r\n                                            },\r\n                                            enterEmail={\r\n                                              title: \"user selected 'email me'\",\r\n                                              text: \"Please enter an email\",\r\n                                              children:\r\n                                              [\r\n                                                {\r\n                                                  title: \"user sended an email\",\r\n                                                  text: \"The jobs were sent\",\r\n                                                  children:\r\n                                                  [\r\n                                                    isAdditionalJobs\r\n                                                  ]\r\n                                                }\r\n                                              ]\r\n                                            },\r\n                                            {\r\n                                              title: \"user selected 'display and email me'\",\r\n                                              text: \"There are your selected jobs\",\r\n                                              children:\r\n                                              [\r\n                                                {...enterEmail, title: \"Request to enter an email\"}\r\n                                              ]\r\n                                            }\r\n                                          ]\r\n                                        }\r\n                                      ]\r\n                                    }\r\n                                  ]\r\n                                },\r\n                                {\r\n                                  title: \"user selected city accuracy\",\r\n                                  text: \"Select cities in your chosen regions\",\r\n                                  children:\r\n                                  [\r\n                                    {...displayingAdaptedJobs, title: \"user selected cities\"}\r\n                                  ]\r\n                                },\r\n                                {\r\n                                  title: \"user selected experience level accuracy\",\r\n                                  text: \"Select an experience level\",\r\n                                  options: [\"Intern\",\"Junior\",\"Senior\",\"Other\"],\r\n                                  children:\r\n                                  [\r\n                                    {...displayingAdaptedJobs, title: \"user selected an experience level\"}\r\n                                  ]\r\n                                },\r\n                                {\r\n                                  title: \"user selected job title accuracy\",\r\n                                  text: \"Enter a job title\",\r\n                                  children:\r\n                                  [\r\n                                    {...displayingAdaptedJobs, title: \"user inserted a job title\"}\r\n                                  ]\r\n                                }\r\n                              ]\r\n                            }//\r\n                          ]\r\n                        },\r\n                      ]\r\n                    },\r\n                    {...successfulEnding,title:\"user selected 3 or more jobs\"}\r\n                  ]\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    // {...jobTypes,title:\"user selected 'all areas'\"}\r\n  ]\r\n}\r\n\r\nvar goodBy1;\r\nvar specificCompany;\r\nvar chatFlow = {\r\n  title: \"greeting\",\r\n  text:\"Hello, nice to meet you, I am JOBOT. I am here to help you find your dream job!\",\r\n  children: \r\n  [\r\n    {\r\n      title: \"field\",\r\n      text:\"Select a field for job\",\r\n      options:[\"Engineering\", \"Marketing\", \"Human Resources\", \"Healthcare\", \"Arts & Design\", \"Finance & Accounting\", \"Other\"],\r\n      children:\r\n      [\r\n        {\r\n          title: \"user selected 'other' field\",\r\n          text: \"Sorry, there is not a job to offer you. Would you like us to save the chat details for future services?\",\r\n          options:[\"Yes\",\"No\"],\r\n          children:\r\n          [\r\n            goodBy1={\r\n            title: \"user agreed to save his details\",\r\n            text: \"Thank you for visiting our site.\",\r\n            },\r\n            {...goodBy1,title: \"user refused to save his details\"}\r\n          ]\r\n        },\r\n        {\r\n          title: \"user selected fields\",\r\n          text: \"Select a job title at this field (Multiple jobs)\",\r\n          options:[{\"Healthcare\":[\"Medical Assistant\", \"Health representative\", \"Production Scientist\", \"Other\"],\"Marketing\":[\"Product Marketing\", \"Data Analyst\", \"Marketing Designer\", \"Other\"],\"Arts & Design\":[\"Designer\", \"Chip Design Architect\", \"Front End Developer\", \"Other\"],'Human Resources':[\"Digital Key Account\",\"Global HR Planning & Operations\",\"Talent Acquisition Specialist\", \"Other\"],'Finance & Accounting':[\"VP Finance\",\"Business Development\", \"Finance Controller\", \"Other\"],\"Engineering\":[\"QA Engineer\", \"Network Engineer\", \"Software Engineer\", \"Other\"]}],\r\n          children:\r\n          [\r\n            specificCompany={\r\n              title: \"user selected job titles\",\r\n              text: \"Great! Do you have any specific companies that you would like to work at? (Multiple companies)\",\r\n              options:[{\"Healthcare\":[\"Diageo\",\"Edwards Lifesciences\",\"AstraZeneca\",\"Pfizer\",\"I'm open to any company\"],\"Marketing\":[\"Eybna Technologies\",\"InspHire\",\"Seperia\",\"Google\",\"I'm open to any company\"],\"Arts & Design\":[\"Mobileye\",\"InspHire\",\"Oski Technology\",\"Palo Alto Networks\",\"I'm open to any company\"],'Human Resources':[\"JobInfo\",\"ASM Global\",\"Adidas\",\"Solaredge\",\"I'm open to any company\"],'Finance & Accounting':[\"Deloitte\",\"Mobileye\",\"Barclays\",\"Adidas\",\"I'm open to any company\"],\"Engineering\":[\"Google\",\"Deloitte\",\"SQLink\",\"Check Point Software Technologies Ltd.\",\"I'm open to any company\"]}],\r\n              children:\r\n              [\r\n                {\r\n                  title: \"user selected companies\",\r\n                  text: \"Excellent, we will consider priority for these companies\",\r\n                  children:\r\n                  [\r\n                    {...areas,title: \"next question\"}\r\n                  ]\r\n                },          \r\n                // {...areas,title: \"user selected 'all companies'\"}\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n    }\r\n  ]\r\n};\r\n\r\n\r\n\r\n// function writeDecisionTreeJSON(){\r\n//   const FileSystem = require(\"fs\");\r\n//   FileSystem.writeFile('React_JobBot/src/pages/chatBotLogic/decisionTree.json', JSON.stringify(chatFlow), (err) => {\r\n//      if (err) throw err;\r\n//    });\r\n// }\r\n// writeDecisionTreeJSON();\r\n\r\nexport default chatFlow;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Approval.jsx",["276"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Approval = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Yes\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Y/N radio: \", selectedOption);\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleApproval(props.node,selectedOption)\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"approval\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default Approval;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTitles.jsx",["277"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst JobTitles = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  useEffect(\r\n    ()=>{\r\n        var selectedField=props.node.getSelected().field;\r\n        setOptions(props.node.getNextResponse().options[0][selectedField])\r\n    }\r\n    ,[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    props.actionProvider.handleJobTitle(props.node,selectedOptions);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{//<div className=\"d-flex flex-column\" key={index}>\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default JobTitles;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/FieldOptions.jsx",["278"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst FieldOptions = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Engineering\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().children[0].options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options radio: \", selectedOption);\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    switch(selectedOption) {\r\n      case \"Other\":\r\n        props.actionProvider.handleOtherField(props.node,selectedOption);\r\n        break;\r\n      default:\r\n        props.actionProvider.handleField(props.node,selectedOption);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"field\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default FieldOptions;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Areas.jsx",["279"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Areas = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.length===3){\r\n      props.actionProvider.handleArea(props.node,[\"All\"]);\r\n    }else{\r\n      props.actionProvider.handleArea(props.node,selectedOptions);\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange}/>\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Areas;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Companies.jsx",["280"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Companies = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n\r\n  useEffect(\r\n    ()=>{\r\n        var selectedField=props.node.getSelected().field;\r\n        setOptions(props.node.getNextResponse().options[0][selectedField])\r\n    }\r\n    ,[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    props.actionProvider.handleCompany(props.node,selectedOptions);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Companies;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Jobs.jsx",["281"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport JobCard from \"./JobCard.jsx\"\r\n\r\nimport \"./Options.css\";\r\n\r\nconst Jobs = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [selectedJobId, setSelectedJobId] = useState(null);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  useEffect(()=>{setOptions([...props.node.getJobs(),{_id:\"Nothing fits\"}])},[]);\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options1: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Nothing fits\")){\r\n      props.node.incCountNotFits(props.node.getCountNotFits());\r\n      console.log(\"count \",props.node.getCountNotFits())\r\n      props.actionProvider.handleJob(props.node,[\"Nothing fits\"]);\r\n    }else if((selectedOptions.length<=2)&&props.node.getCountNotFits()===0){\r\n      props.node.incCountNotFits(props.node.getCountNotFits());\r\n      //update selected jobs in state\r\n      if(props.node.getSavedInDB()[\"selected jobs\"]){\r\n        props.node.setSavedInDB({...props.node.getSavedInDB(),\"selected jobs\":props.node.getSavedInDB()[\"selected jobs\"].concat(selectedOptions)});\r\n      }else{\r\n        props.node.setSavedInDB({...props.node.getSavedInDB(),\"selected jobs\":selectedOptions});\r\n      }\r\n      //\r\n      props.node.setSelectedJobs(selectedOptions)\r\n      console.log(\"selected jobs \",props.node.getSelectedJobs())\r\n      props.actionProvider.handleJob(props.node,[\"Nothing fits\"]);\r\n    }else{\r\n      //update selected jobs in state\r\n      if(props.node.getSavedInDB()[\"selected jobs\"]){\r\n        props.node.setSavedInDB({...props.node.getSavedInDB(),\"selected jobs\":props.node.getSavedInDB()[\"selected jobs\"].concat(selectedOptions)});\r\n      }else{\r\n        props.node.setSavedInDB({...props.node.getSavedInDB(),\"selected jobs\":selectedOptions});\r\n      }\r\n      //\r\n      props.node.setSelectedJobs(selectedOptions)\r\n      props.actionProvider.handleJob(props.node,selectedOptions);\r\n    }\r\n  };\r\n\r\n  const onCardClick = (id) => {\r\n    setSelectedJobId(selectedJobId === id ? null : id);\r\n  };\r\n    \r\n  return(\r\n   <form onSubmit={handleSubmit}>\r\n    {options.map((job,index) => (\r\n      <div key={index}>\r\n          <input\r\n          className=\"checkbox\"\r\n          type=\"checkbox\"\r\n          value={job._id}\r\n          onChange={handleOptionChange}\r\n          disabled={(job._id!==\"Nothing fits\")&&selectedOptions.includes(\"Nothing fits\")}\r\n          />\r\n          {/* {job._id} */}\r\n\r\n          <JobCard\r\n          key={index}\r\n          job={job}\r\n          isSelected={job._id === selectedJobId}\r\n          onCardClick={onCardClick}\r\n          />\r\n      </div>\r\n      ))\r\n    }\r\n    <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n   </form>\r\n  );\r\n};\r\n\r\nexport default Jobs;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTypes.jsx",["282"],[],"// import React from \"react\";\r\n// import {useState,useEffect} from \"react\";\r\n\r\n// import \"./Options.css\";\r\n\r\n// const JobTypes = (props) => {\r\n//   const [options, setOptions] = useState([]);\r\n//   const [selectedOptions, setSelectedOptions] = useState([]);\r\n//   const [submitted,setSubmitted]=useState(true);\r\n\r\n//   useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n\r\n//   const handleOptionChange = (event) => {\r\n//     const option = event.target.value;\r\n//     if (selectedOptions.includes(option)) {\r\n//       setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n//     } else {\r\n//       setSelectedOptions([...selectedOptions, option]);\r\n//     }\r\n//   };\r\n\r\n//   const isFormValid = () => {\r\n//     return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n//   };\r\n\r\n//   const handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     console.log(\"Selected Options: \", selectedOptions);\r\n//     // handle submission logic\r\n//     setSubmitted(false);\r\n//     props.actionProvider.handleJobType(props.node,selectedOptions);\r\n    \r\n//   };\r\n\r\n//   return (\r\n//     <form onSubmit={handleSubmit}>\r\n//       <label>\r\n//         {options.map((opt,index) =>{\r\n//           return(\r\n//           <label key={index}>\r\n//             <br />\r\n//             <input\r\n//             type=\"checkbox\"\r\n//             value={opt}\r\n//             onChange={handleOptionChange} />\r\n//             {opt}\r\n//           </label>);\r\n//         },[])\r\n//         }\r\n//       </label>\r\n//       <br />\r\n//       <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// export default JobTypes;\r\n\r\nimport React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst JobTypes = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Full_time\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleJobType(props.node,[selectedOption])\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"jobType\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default JobTypes;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/EmailDisplay.jsx",["283"],[],"// import React from \"react\";\r\n// import {useState,useEffect} from \"react\";\r\n\r\n// import \"./Options.css\";\r\n\r\n// const EmailDisplay = (props) => {\r\n//   const [options, setOptions] = useState([]);\r\n//   const [selectedOptions, setSelectedOptions] = useState([]);\r\n//   const [submitted,setSubmitted]=useState(false);\r\n\r\n//   useEffect(()=>{\r\n//     console.log(\"which node? \",props.node.getNextResponse())\r\n//     setOptions(props.node.getNextResponse().options)\r\n//   },[]);//maybe props.node_if_options>0\r\n\r\n\r\n//   const handleOptionChange = (event) => {\r\n//     const option = event.target.value;\r\n//     if (selectedOptions.includes(option)) {\r\n//       setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n//     } else {\r\n//       setSelectedOptions([...selectedOptions, option]);\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     console.log(\"Selected Options: \", selectedOptions);\r\n//     // handle submission logic\r\n//     setSubmitted(true);\r\n//     props.actionProvider.handleEmailDisplay(props.node,selectedOptions);\r\n    \r\n//   };\r\n\r\n//   return (\r\n//     <form onSubmit={handleSubmit}>\r\n//       <label>\r\n//         {options.map((opt,index) =>{\r\n//           return(\r\n//           <label key={index}>\r\n//             <br />\r\n//             <input\r\n//             type=\"checkbox\"\r\n//             value={opt}\r\n//             onChange={handleOptionChange} />\r\n//             {opt}\r\n//           </label>);\r\n//         },[])\r\n//         }\r\n//       </label>\r\n//       <br />\r\n//       <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// export default EmailDisplay;\r\n\r\nimport React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst EmailDisplay = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  useEffect(\r\n    ()=>{\r\n      setOptions(props.node.getNextResponse().options)\r\n    }\r\n    ,[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options1: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Just keep going\")){\r\n      props.actionProvider.handleEmailDisplay(props.node,[\"Just keep going\"]);\r\n    }else{\r\n      props.actionProvider.handleEmailDisplay(props.node,selectedOptions);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange}\r\n            disabled={(opt!==\"Just keep going\")&&selectedOptions.includes(\"Just keep going\")} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EmailDisplay;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/DisplaySelectedJobs.jsx",["284","285"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport JobCard from \"./JobCard.jsx\"\r\n\r\nconst DisplaySelectedJobs = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedJobId, setSelectedJobId] = useState(null);\r\n\r\n  useEffect(()=>{\r\n    var selectedJobsDetails=[];\r\n    var jobs=props.node.getSavedInDB()[\"displayed jobs\"];\r\n    var selectedJobs=props.node.getSavedInDB()[\"selected jobs\"];\r\n    jobs.map((job)=>{\r\n      if(selectedJobs.includes(job._id)){//#מתוך סך העבודות כולם הצג את כל העבודות שנבחרו בכל השלבים\r\n        selectedJobsDetails.push(job);\r\n      }\r\n    })\r\n    setOptions(selectedJobsDetails)\r\n  },[]);\r\n\r\n  const onCardClick = (id) => {\r\n    setSelectedJobId(selectedJobId === id ? null : id);\r\n  };\r\n\r\n  const buttonsMarkup = options.map((job,index) => (\r\n    <JobCard\r\n    key={index}\r\n    job={job}\r\n    isSelected={job._id === selectedJobId}\r\n    onCardClick={onCardClick}\r\n    />\r\n  ),[]);\r\n\r\n\r\n  return <div>{buttonsMarkup}</div>;\r\n};\r\n\r\nexport default DisplaySelectedJobs;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Quiz/Quiz.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Quiz/FlashCard.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/logout/Logout.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/AccuracyLevels.jsx",["286"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst AccuracyLevels = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);\r\n\r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options in accu: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Other\")){\r\n      //קריאה לסיום\r\n      // props.actionProvider.selfSearch(props.node,[\"Other\"]);\r\n\r\n      //set the accuracy node\r\n      props.node.setAccuracyNode({...props.node.getNextResponse()})\r\n      //set in history list\r\n      props.node.setHistoryChat([...props.node.getHistoryChat(),{user:[\"Other\"]}])\r\n      //call handler\r\n      props.actionProvider.handleAccuracyLevel(props.node,[\"Other\"]);\r\n    }else{\r\n      //set the accuracy node and options\r\n      props.node.setAccuracyOptions(selectedOptions)\r\n      props.node.setAccuracyNode({...props.node.getNextResponse()})\r\n      //set in history list\r\n      props.node.setHistoryChat([...props.node.getHistoryChat(),{user:selectedOptions}])\r\n      //call handler\r\n      props.actionProvider.handleAccuracyLevel(props.node,selectedOptions);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            {/* <br /> */}\r\n            <input\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            value={opt}\r\n            onChange={handleOptionChange}\r\n            disabled={(opt!==\"Other\")&&selectedOptions.includes(\"Other\")} />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AccuracyLevels;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/MoreInfo.jsx",["287","288"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst MoreInfo = (props) => {\r\n\r\n    function moreInfo(){\r\n        return (\r\n            <div>\r\n                For more information click <a href=\"../../../about\">here</a>\r\n            </div>\r\n            );\r\n    }\r\n\r\n    function selfJobSearch(){\r\n        return (\r\n            <div>\r\n                To self job search click <a href=\"/jobs\">here</a>\r\n            </div>\r\n            );\r\n    }\r\n\r\n    return (\r\n        (props.node.getSelected().field===\"Other\")?moreInfo():selfJobSearch()\r\n    );\r\n};\r\n\r\nexport default MoreInfo;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/ExperienceLevel.jsx",["289"],[],"import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst ExperienceLevel = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Intern\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    // setSelectedOption(event.target.value);\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleExperienceLevel(props.node,[selectedOption]);\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className=\"listOptions\">\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"experience\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default ExperienceLevel;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Cities.jsx",["290"],[],"import axios from \"axios\";\r\nimport React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst EmailDisplay = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  //set the updated existing cities from the jobs DB\r\n  useEffect(\r\n    ()=>{\r\n      axios.post(\"/cities\",{\r\n        areas:props.node.getSelected().areas\r\n      }, {\r\n        headers: {\r\n        'Content-type': 'application/json; charset=UTF-8' } \r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          setOptions([...response.data.cities,\"Other\"])\r\n        } else {\r\n          console.log(\"Server did not returned cities\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error getting cities\", err.message);\r\n      });\r\n    }\r\n    ,[]);\r\n  \r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options1: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Other\")){\r\n      props.actionProvider.handleCities(props.node,[\"Other\"]);\r\n    }else{\r\n      props.actionProvider.handleCities(props.node,selectedOptions);\r\n    }\r\n  };\r\n  //We used chatGpt to divide the cities into 3 columns\r\n  const columnSize = Math.ceil(options.length / 3);\r\n  const columns = [\r\n    options.slice(0, columnSize),\r\n    options.slice(columnSize, columnSize * 2),\r\n    options.slice(columnSize * 2),\r\n  ];\r\n\r\n  const renderCheckbox = (opt) => (\r\n    <div key={opt} className=\"cities\">\r\n      <label>\r\n      <input\r\n      className=\"checkbox\"\r\n      type=\"checkbox\"\r\n      value={opt}\r\n      onChange={handleOptionChange}\r\n      disabled={(opt!==\"Other\")&&selectedOptions.includes(\"Other\")} />\r\n      {opt}\r\n      </label>\r\n    </div>\r\n  );\r\n\r\n  const renderColumns = (columnCities,index) => (\r\n    <div key={index}>\r\n      {columnCities.map(city => renderCheckbox(city))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <div style={{ display: 'flex' }}>\r\n        {\r\n          columns.map((columnCities,index) => renderColumns(columnCities,index))\r\n        }\r\n        </div>\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n\r\n};\r\n\r\nexport default EmailDisplay;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Email.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTitleTyping.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobCard.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/ClientHistory.jsx",["291"],[],"import React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport ConversationsPage from './ConversationsPage'\r\nimport OfferedJobs from './OfferedJobs'\r\n\r\n\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index } = props;\r\n\r\n  return (\r\n    <div hidden={value !== index} id={index}>\r\n      {value === index && <Typography component={'span'}>{children}</Typography>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ClientHistory() {\r\n  const location = useLocation();\r\n  const clientDetails = location.state;\r\n  console.log(clientDetails);\r\n\r\n  // const navigate = useNavigate();\r\n\r\n  // function handleNavigate(pathname) {\r\n  //   navigate(pathname, { state: { clientDetails } });\r\n  // }\r\n\r\n  function BasicTabs() {\r\n    const [value, setValue] = React.useState(0);\r\n      \r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    };\r\n    return (\r\n      // <div>\r\n      //   <h1>History By Fields</h1>\r\n      //   <nav>\r\n      //     Tabs of:\r\n      //     <ul>\r\n      //       <li>\r\n      //         <button onClick={() => handleNavigate('/./conversations')}>Conversations</button>\r\n      //       </li>\r\n      //       <li>\r\n      //         <button onClick={() => handleNavigate('/./offeredJobs')}>Offered jobs</button>\r\n      //       </li>\r\n      //     </ul>\r\n      //   </nav>\r\n      // </div>\r\n      <>\r\n      <Tabs value={value} onChange={handleChange} centered>\r\n      <Tab label=\"Last Chat Content\" />\r\n      <Tab label=\"Last Offered Jobs\" />\r\n      <Tab label=\"Last Selected Jobs\" />\r\n      </Tabs>\r\n      <TabPanel value={value} index={0}>\r\n      <ConversationsPage propValue={clientDetails}/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n      <OfferedJobs propValue={{\"clientDetails\":clientDetails,\"jobs\":\"displayed\"}}/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <OfferedJobs propValue={{\"clientDetails\":clientDetails,\"jobs\":\"selected\"}}/>\r\n      </TabPanel>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <h1>History By Fields</h1> */}\r\n      <  BasicTabs/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClientHistory;\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/UserDetails.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/MyCustomChatMessage.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/ConversationsPage.jsx",["292","293"],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/OfferedJobs.jsx",["294","295","296","297","298","299"],[],"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport './OfferedJobs.css';\nimport starImage from './star.avif';\n\nfunction OfferedJobs(props) {\n  // const location = useLocation();\n  // const clientDetails = location.state;\n  const state=props.propValue\n  const clientDetails = state.clientDetails;\n  console.log(clientDetails);\n\n  const [jobs, setJobs] = useState([]);\n  const [companySearchQuery, setCompanySearchQuery] = useState('');\n  const [jobTitleSearchQuery, setJobTitleSearchQuery] = useState('');\n  const [citySearchQuery, setCitySearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    fetchjobs();\n  }, []);\n\n  const fetchjobs = () => {\n    if(state.jobs==\"displayed\"){\n      axios.post('/offeredjobs', { clientDetails })\n      .then(response => {\n        setJobs(response.data.jobs);\n        setIsLoading(true)\n      })\n      .catch(error => {\n        console.error('Error fetching jobs:', error);\n      });\n    }else{\n      axios.post('/selectededjobs', { clientDetails })\n      .then(response => {\n        setJobs(response.data.jobs);\n        setIsLoading(true)\n      })\n      .catch(error => {\n        console.error('Error fetching jobs:', error);\n      });\n    }\n\n  };\n\n  const filteredJobs = jobs.filter(job =>\n    job.company.toLowerCase().includes(companySearchQuery.toLowerCase()) &&\n    job.job.toLowerCase().includes(jobTitleSearchQuery.toLowerCase()) &&\n    job.city.toLowerCase().includes(citySearchQuery.toLowerCase())\n  );\n\n  return (\n    <div>\n      {/* <h1 className=\"title\">The Offered Jobs for the client</h1> */}\n      {!isLoading ? (\n        <p className=\"loading\">Loading...</p>\n      ) : (\n        <div className=\"jobs-page\">\n          <div className=\"search-container\">\n            {/* Search input components */}\n          </div>\n          {filteredJobs&&filteredJobs.length > 0 ? (\n            <ul className=\"jobs-list\">\n            {filteredJobs&&filteredJobs.map((job, index) => (\n              <li key={index} className=\"job-item\">\n                <h2 className=\"company-name\">{job.company}</h2>\n                <p className=\"job-title\">{job.job}</p>\n                <p className=\"job-location\">{job.city}</p>\n                {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n                <p className=\"job-date\">{job.date}</p>\n                <p className=\"job-link\">\n                  <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {job.link}\n                  </a>\n                </p>\n                <p className=\"job-description\">{job.description}</p>\n              </li>\n            ))}\n          </ul>\n          ) : (\n            <p>No jobs found.</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default OfferedJobs;\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/Statistics.jsx",["300"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport \"./statistics.css\"\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport {ArcElement } from 'chart.js';\r\nimport { Pie } from 'react-chartjs-2';\r\n// import * as React from \"react\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport PendingIcon from '@mui/icons-material/Pending';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n    ,ArcElement\r\n);\r\n\r\n\r\nfunction parseStatisticsData(res){\r\n    // console.log(res[\"stat\"])\r\n    let labels = Object.keys(res[\"stat\"])\r\n    let values = Object.values(res[\"stat\"])\r\n    let statName=res[\"statName\"]\r\n    if(res[\"statName\"]===\"job Types\"){\r\n      statName=\"Job Types\"\r\n    }else if(res[\"statName\"]===\"experience level\"){\r\n      statName=\"Experience Levels\"\r\n    }else if(res[\"statName\"]===\"field\"){\r\n      statName=\"Fields\"\r\n    }\r\n    console.log({\"statName\":statName,\"stats\":{\"labels\":labels,\"values\":values}})\r\n    return {\"statName\":statName,\"stats\":{\"labels\":labels,\"values\":values}}\r\n}\r\n\r\nfunction parseGeneralData(res){\r\n    console.log(res[\"stat\"])\r\n    let labels = Object.keys(res[\"stat\"])\r\n    let values = Object.values(res[\"stat\"])\r\n    console.log(\"values\",values)    \r\n    var list=[]\r\n    for (let i = 0; i < labels.length; i++) {\r\n        list=list.concat(parseStatisticsData({ \"statName\":labels[i], \"stat\": values[i] }));\r\n    }\r\n    return list\r\n}\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index } = props;\r\n\r\n  return (\r\n    <div hidden={value !== index} id={index}>\r\n      {value === index && <Typography component={'span'}>{children}</Typography>}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst Statistics = () => {\r\n    // const [feedbackStats,setFeedbackStats]=useState({})\r\n    const [generalStats,setGeneralStats]=useState({})\r\n    const [list, setList] = useState([]);\r\n    const [feebackDataPie, setFeebackDataPie] = useState({});\r\n    const [isPie, setIsPie] = useState(false);\r\n    const [isClicked,setIsClicked]=useState(false)\r\n    // const [buttonCount, setButtonCount] = useState(0);\r\n\r\n\r\n\r\n\r\n    useEffect( ()=>{\r\n         fetchStatistics(\"view_general_stats\")\r\n         fetchStatistics(\"view_feedback\")\r\n    },[]);\r\n\r\n    function BasicTabs() {\r\n        const [value, setValue] = React.useState(0);\r\n      \r\n        const handleChange = (event, newValue) => {\r\n          setValue(newValue);\r\n        };\r\n      \r\n        return (\r\n          <>\r\n          <div className=\"d-flex flex-column justify-content-center align-items-center\">\r\n            <Tabs value={value} onChange={handleChange}>\r\n              <Tab label=\"Genral statistics\" />\r\n              <Tab label=\"feedbacks\" />\r\n            </Tabs>\r\n          </div>\r\n            \r\n            <TabPanel value={value} index={0}>\r\n            {(isPie)?(<div className='alldata'>\r\n              <div className='wrapper2 d-flex justify-content-center align-items-center'>\r\n                  <button className=\"update-button\" onClick={handleButtonClick} disabled={isClicked}>Update Statistics</button>\r\n                  <p className=\"date\">{generalStats[\"update date\"]?\"date: \"+generalStats[\"update date\"]:\"\"}</p>\r\n                  <p className=\"number\">{generalStats[\"users number\"]?\"users number: \"+generalStats[\"users number\"]:\"\"}</p>\r\n                  <br/>\r\n              </div>\r\n                  <div className='wrapper'>\r\n                  {list.map((opt,index) =>{\r\n                    return(\r\n                        <div key={index}>\r\n                            {opt[\"statName\"]+\":\"}\r\n                            <br/>\r\n                            <Pie data={getPieData(opt)} />\r\n                            <br/>\r\n                        </div>\r\n                    );\r\n                    },[])\r\n                  } \r\n                  </div>\r\n            </div>):<div className='d-flex justify-content-center align-items-center' style={{marginTop: \"5rem\"}}><PendingIcon color=\"primary\" fontSize=\"large\"/>  wait... </div>}\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n            {(isPie)?(\r\n                <div className=\"feedbacPie\">\r\n                <Pie data={feebackDataPie} />\r\n                </div>\r\n            ):(\"\")}\r\n            </TabPanel>\r\n          </>\r\n        );\r\n    }\r\n\r\n    function fetchStatistics(statName){\r\n        axios.post(\"/getStatistics\", {\r\n          goal: statName\r\n        }, {\r\n          headers: {\r\n          'Content-type': 'application/json; charset=UTF-8' } \r\n        })\r\n        .then((response) => {\r\n          if (response.data.success) {\r\n            console.log(\"Server returned statistics:\", response.data.message);\r\n            const res=response.data.message\r\n            if(statName===\"view_feedback\"){\r\n                setFeebackDataPie(getPieData(parseStatisticsData(res)))\r\n                setIsPie(true)\r\n            }else if(statName===\"view_general_stats\"||statName===\"calculate_general_stats\"){\r\n                setGeneralStats(res)\r\n                setList(parseGeneralData(res))\r\n                setIsPie(true)\r\n            }\r\n          } else {\r\n            console.log(\"Server did not return statistics: \", response.data.message);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"Error getting statistics: \", err.message);\r\n        });\r\n    }\r\n\r\n    function getPieData(results){\r\n      const dataPie = {\r\n          labels: results[\"stats\"][\"labels\"],\r\n          datasets: [\r\n          {\r\n              label: results[\"statName\"],\r\n              data: results[\"stats\"][\"values\"],\r\n              backgroundColor: [\r\n              'rgba(255, 99, 132, 0.2)',\r\n              'rgba(54, 162, 235, 0.2)',\r\n              'rgba(255, 206, 86, 0.2)',\r\n              'rgba(75, 192, 192, 0.2)',\r\n              'rgba(153, 102, 255, 0.2)',\r\n              'rgba(255, 159, 64, 0.2)',\r\n              ],\r\n              borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 206, 86, 1)',\r\n              'rgba(75, 192, 192, 1)',\r\n              'rgba(153, 102, 255, 1)',\r\n              'rgba(255, 159, 64, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n          },\r\n          ],\r\n      }\r\n      return dataPie;\r\n    }\r\n\r\n    const handleButtonClick = () => {\r\n        fetchStatistics(\"calculate_general_stats\")\r\n        setIsPie(false)\r\n        setIsClicked(true)\r\n    };\r\n\r\n    return (\r\n    <div>\r\n      {/* <h1>Statistics</h1> */}\r\n      <p className=\"sentence\">The statistics here refer to the total number of <strong>chats</strong> made with JOBOT by the website's users</p>\r\n      <  BasicTabs/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/UserProvider.js",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/ProtectedRoutes.jsx",["301"],[],"import { Navigate, Outlet } from \"react-router-dom\";\r\nimport Login from \"./pages/login/Login.jsx\";\r\nimport { useUser } from \"./UserProvider.js\";\r\n\r\n\r\nconst ProtectedRoutes = ({setUserType}) => {\r\n  const {userType} = useUser();\r\n  return userType !== \"\" ? <Outlet /> : <Login  setUserType={setUserType}/>;\r\n};\r\n\r\nexport default ProtectedRoutes;","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/Header.jsx",["302","303","304","305"],[],"import Button from '@mui/material/Button';\r\nimport JobotLogoPNG from \"./JOBOT.png\";\r\n\r\n//$$$$$$$$$$$$\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { Link } from 'react-router-dom';\r\nimport SmartToyOutlinedIcon from '@mui/icons-material/SmartToyOutlined';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\n\r\n\r\n\r\n//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\nexport default function Header({userType}) {\r\n  // const headerKind = \"admin\" // useContext()\r\n  return (\r\n    <div className=\"d-flex justify-content-between align-items-center px-5\" style={{backgroundColor:\"#59698b\",height:\"8vh\"}}>\r\n      <div>\r\n        <img src={JobotLogoPNG} style={{width:\"45%\"}}/>\r\n      </div>\r\n      <div>\r\n       <ListItem>\r\n            <IconButton component={Link} to=\"/about\">\r\n              <ListItemIcon>\r\n                <InfoIcon color=\"primary\" fontSize=\"large\"/>\r\n              </ListItemIcon>\r\n            </IconButton>\r\n            <ListItemText\r\n              primary={false}\r\n              secondary={false}\r\n            />\r\n        </ListItem>\r\n      </div>\r\n\r\n\r\n        {/* {userType[\"type\"] === \"admin\" ? \r\n        <div className=\"d-flex justify-content-right\">\r\n          <Button style={{color:\"#F1F6F9\"}}>ADMIN</Button>\r\n          <Button style={{color:\"#F1F6F9\"}}>ADMIN</Button>\r\n          <Button style={{color:\"#F1F6F9\"}}>ADMIN</Button>\r\n        </div>\r\n        : null}\r\n        {userType[\"type\"] === \"client\" ? \r\n        <div className=\"d-flex justify-content-right\">\r\n          <Button style={{color:\"#F1F6F9\"}}>USER</Button>\r\n          <Button style={{color:\"#F1F6F9\"}}>USER</Button>\r\n          <Button style={{color:\"#F1F6F9\"}}>USER</Button>\r\n        </div>\r\n        : null}\r\n         {userType[\"type\"] === null ? \r\n        <div className=\"d-flex justify-content-right\">\r\n          <Button style={{color:\"#F1F6F9\"}}>not logged in</Button>\r\n          <Button style={{color:\"#F1F6F9\"}}>not logged in</Button>\r\n          <Button style={{color:\"#F1F6F9\"}}>not logged in</Button>\r\n        </div>\r\n        : null} */}\r\n    </div>\r\n  );\r\n}\r\n","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/clientArea/About.jsx",[],[],"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/CardsTable.jsx",["306","307"],[],"import {useState} from 'react'\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Pagination, Box} from \"@mui/material\"\r\nimport { CollapsableCard } from './CollapsableCard'\r\n\r\n\r\nexport const CardsTable = ({data}) => {\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 10;\r\n    const totalItems = data.length;\r\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n    const handlePageChange = (e, page) => {\r\n        setCurrentPage(page)\r\n    }\r\n\r\n    const generateTableData = (data) => {\r\n        const startIndex = (currentPage - 1) * itemsPerPage;\r\n        const endIndex = startIndex + itemsPerPage;\r\n        const currentPageData = data.slice(startIndex, endIndex)\r\n        //let tableData = []\r\n\r\n        // for (let i = 0; i < currentPageData.length; i++) {\r\n        //     let job = currentPageData[i]\r\n        //     tableData.push(\r\n        //         <TableRow key={i}>\r\n        //             <TableCell>\r\n        //                 <CollapsableCard\r\n        //                     content={job.content.job}\r\n        //                     collapsableContent={job.collapsableContent.rating}\r\n        //                 />\r\n        //             </TableCell>\r\n        //         </TableRow>\r\n        //     )\r\n        // }\r\n        \r\n\r\n        return currentPageData\r\n    }\r\n\r\n    const tableData = generateTableData(data);\r\n\r\n    return (\r\n        <div className=\"w-50 d-flex flex-column mx-auto align-items-center justify-cotnent-center\">\r\n            <TableContainer>\r\n                <Table >\r\n                    <TableBody>\r\n                        {tableData.map((job, index)  => {\r\n                             return (\r\n                             <TableRow key={index}>\r\n                                <TableCell>\r\n                                    <CollapsableCard\r\n                                        style={{\r\n                                            display: \"flex\",\r\n                                            flexDirection: 'column',\r\n                                            alignItems: \"center\",\r\n                                            justifyContent: \"Center\",\r\n                                            // margin: \"0 2rem\",\r\n                                            width: \"100%\"\r\n                                        }}\r\n                                        content={job.content}\r\n                                        collapsableContent={job.collapsableContent}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            )\r\n                         })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            <Pagination\r\n                count={totalPages}\r\n                page={currentPage}\r\n                onChange={handlePageChange}\r\n            />\r\n        </div>\r\n    )\r\n}","/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/CollapsableCard.jsx",[],[],{"ruleId":"308","severity":1,"message":"309","line":8,"column":10,"nodeType":"310","messageId":"311","endLine":8,"endColumn":17},{"ruleId":"308","severity":1,"message":"312","line":9,"column":20,"nodeType":"310","messageId":"311","endLine":9,"endColumn":31},{"ruleId":"308","severity":1,"message":"313","line":7,"column":8,"nodeType":"310","messageId":"311","endLine":7,"endColumn":28},{"ruleId":"308","severity":1,"message":"314","line":27,"column":13,"nodeType":"310","messageId":"311","endLine":27,"endColumn":22},{"ruleId":"308","severity":1,"message":"315","line":172,"column":9,"nodeType":"310","messageId":"311","endLine":172,"endColumn":24},{"ruleId":"308","severity":1,"message":"316","line":174,"column":10,"nodeType":"310","messageId":"311","endLine":174,"endColumn":14},{"ruleId":"308","severity":1,"message":"314","line":21,"column":13,"nodeType":"310","messageId":"311","endLine":21,"endColumn":22},{"ruleId":"317","severity":1,"message":"318","line":180,"column":13,"nodeType":"310","messageId":"319","endLine":180,"endColumn":16},{"ruleId":"317","severity":1,"message":"318","line":197,"column":13,"nodeType":"310","messageId":"319","endLine":197,"endColumn":16},{"ruleId":"317","severity":1,"message":"320","line":320,"column":15,"nodeType":"310","messageId":"319","endLine":320,"endColumn":19},{"ruleId":"317","severity":1,"message":"318","line":397,"column":11,"nodeType":"310","messageId":"319","endLine":397,"endColumn":14},{"ruleId":"317","severity":1,"message":"318","line":461,"column":11,"nodeType":"310","messageId":"319","endLine":461,"endColumn":14},{"ruleId":"317","severity":1,"message":"321","line":475,"column":11,"nodeType":"310","messageId":"319","endLine":475,"endColumn":15},{"ruleId":"317","severity":1,"message":"320","line":484,"column":11,"nodeType":"310","messageId":"319","endLine":484,"endColumn":15},{"ruleId":"317","severity":1,"message":"320","line":767,"column":15,"nodeType":"310","messageId":"319","endLine":767,"endColumn":19},{"ruleId":"308","severity":1,"message":"322","line":19,"column":9,"nodeType":"310","messageId":"311","endLine":19,"endColumn":17},{"ruleId":"308","severity":1,"message":"323","line":210,"column":13,"nodeType":"310","messageId":"311","endLine":210,"endColumn":28},{"ruleId":"324","severity":1,"message":"325","line":11,"column":68,"nodeType":"326","endLine":11,"endColumn":70,"suggestions":"327"},{"ruleId":"324","severity":1,"message":"325","line":16,"column":6,"nodeType":"326","endLine":16,"endColumn":8,"suggestions":"328"},{"ruleId":"324","severity":1,"message":"325","line":11,"column":80,"nodeType":"326","endLine":11,"endColumn":82,"suggestions":"329"},{"ruleId":"324","severity":1,"message":"325","line":12,"column":68,"nodeType":"326","endLine":12,"endColumn":70,"suggestions":"330"},{"ruleId":"324","severity":1,"message":"325","line":17,"column":6,"nodeType":"326","endLine":17,"endColumn":8,"suggestions":"331"},{"ruleId":"324","severity":1,"message":"325","line":14,"column":78,"nodeType":"326","endLine":14,"endColumn":80,"suggestions":"332"},{"ruleId":"324","severity":1,"message":"325","line":70,"column":68,"nodeType":"326","endLine":70,"endColumn":70,"suggestions":"333"},{"ruleId":"324","severity":1,"message":"325","line":73,"column":6,"nodeType":"326","endLine":73,"endColumn":8,"suggestions":"334"},{"ruleId":"335","severity":1,"message":"336","line":14,"column":19,"nodeType":"337","messageId":"338","endLine":14,"endColumn":21},{"ruleId":"324","severity":1,"message":"339","line":20,"column":5,"nodeType":"326","endLine":20,"endColumn":7,"suggestions":"340"},{"ruleId":"324","severity":1,"message":"325","line":11,"column":68,"nodeType":"326","endLine":11,"endColumn":70,"suggestions":"341"},{"ruleId":"308","severity":1,"message":"342","line":2,"column":9,"nodeType":"310","messageId":"311","endLine":2,"endColumn":17},{"ruleId":"308","severity":1,"message":"343","line":2,"column":18,"nodeType":"310","messageId":"311","endLine":2,"endColumn":27},{"ruleId":"324","severity":1,"message":"325","line":11,"column":68,"nodeType":"326","endLine":11,"endColumn":70,"suggestions":"344"},{"ruleId":"324","severity":1,"message":"339","line":32,"column":6,"nodeType":"326","endLine":32,"endColumn":8,"suggestions":"345"},{"ruleId":"308","severity":1,"message":"346","line":2,"column":23,"nodeType":"310","messageId":"311","endLine":2,"endColumn":34},{"ruleId":"308","severity":1,"message":"347","line":2,"column":10,"nodeType":"310","messageId":"311","endLine":2,"endColumn":21},{"ruleId":"324","severity":1,"message":"348","line":18,"column":6,"nodeType":"326","endLine":18,"endColumn":8,"suggestions":"349"},{"ruleId":"308","severity":1,"message":"347","line":2,"column":10,"nodeType":"310","messageId":"311","endLine":2,"endColumn":21},{"ruleId":"308","severity":1,"message":"350","line":15,"column":30,"nodeType":"310","messageId":"311","endLine":15,"endColumn":51},{"ruleId":"308","severity":1,"message":"351","line":16,"column":31,"nodeType":"310","messageId":"311","endLine":16,"endColumn":53},{"ruleId":"308","severity":1,"message":"352","line":17,"column":27,"nodeType":"310","messageId":"311","endLine":17,"endColumn":45},{"ruleId":"324","severity":1,"message":"353","line":22,"column":6,"nodeType":"326","endLine":22,"endColumn":8,"suggestions":"354"},{"ruleId":"355","severity":1,"message":"356","line":25,"column":18,"nodeType":"357","messageId":"358","endLine":25,"endColumn":20},{"ruleId":"324","severity":1,"message":"359","line":87,"column":7,"nodeType":"326","endLine":87,"endColumn":9,"suggestions":"360"},{"ruleId":"308","severity":1,"message":"361","line":1,"column":10,"nodeType":"310","messageId":"311","endLine":1,"endColumn":18},{"ruleId":"308","severity":1,"message":"362","line":1,"column":8,"nodeType":"310","messageId":"311","endLine":1,"endColumn":14},{"ruleId":"308","severity":1,"message":"363","line":5,"column":8,"nodeType":"310","messageId":"311","endLine":5,"endColumn":12},{"ruleId":"308","severity":1,"message":"313","line":11,"column":8,"nodeType":"310","messageId":"311","endLine":11,"endColumn":28},{"ruleId":"364","severity":1,"message":"365","line":22,"column":9,"nodeType":"366","endLine":22,"endColumn":56},{"ruleId":"308","severity":1,"message":"367","line":2,"column":55,"nodeType":"310","messageId":"311","endLine":2,"endColumn":64},{"ruleId":"308","severity":1,"message":"368","line":2,"column":88,"nodeType":"310","messageId":"311","endLine":2,"endColumn":91},"no-unused-vars","'useUser' is defined but never used.","Identifier","unusedVar","'setMyObject' is assigned a value but never used.","'SmartToyOutlinedIcon' is defined but never used.","'secondary' is assigned a value but never used.","'CollapsableCard' is defined but never used.","'blue' is defined but never used.","no-redeclare","'txt' is already defined.","redeclared","'txt2' is already defined.","'txt1' is already defined.","'jobTypes' is assigned a value but never used.","'specificCompany' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.node'. Either include it or remove the dependency array. If 'setOptions' needs the current value of 'props.node', you can also switch to useReducer instead of useState and read 'props.node' in the reducer.","ArrayExpression",["369"],["370"],["371"],["372"],["373"],["374"],["375"],["376"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'props.node'. Either include it or remove the dependency array.",["377"],["378"],"'useState' is defined but never used.","'useEffect' is defined but never used.",["379"],["380"],"'useNavigate' is defined but never used.","'useLocation' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchHistory'. Either include it or remove the dependency array.",["381"],"'setCompanySearchQuery' is assigned a value but never used.","'setJobTitleSearchQuery' is assigned a value but never used.","'setCitySearchQuery' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchjobs'. Either include it or remove the dependency array.",["382"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'fetchStatistics'. Either include it or remove the dependency array.",["383"],"'Navigate' is defined but never used.","'Button' is defined but never used.","'List' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TableHead' is defined but never used.","'Box' is defined but never used.",{"desc":"384","fix":"385"},{"desc":"384","fix":"386"},{"desc":"384","fix":"387"},{"desc":"384","fix":"388"},{"desc":"384","fix":"389"},{"desc":"384","fix":"390"},{"desc":"384","fix":"391"},{"desc":"384","fix":"392"},{"desc":"384","fix":"393"},{"desc":"384","fix":"394"},{"desc":"384","fix":"395"},{"desc":"384","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},"Update the dependencies array to be: [props.node]",{"range":"403","text":"404"},{"range":"405","text":"404"},{"range":"406","text":"404"},{"range":"407","text":"404"},{"range":"408","text":"404"},{"range":"409","text":"404"},{"range":"410","text":"404"},{"range":"411","text":"404"},{"range":"412","text":"404"},{"range":"413","text":"404"},{"range":"414","text":"404"},{"range":"415","text":"404"},"Update the dependencies array to be: [fetchHistory]",{"range":"416","text":"417"},"Update the dependencies array to be: [fetchjobs]",{"range":"418","text":"419"},"Update the dependencies array to be: [fetchStatistics]",{"range":"420","text":"421"},[362,364],"[props.node]",[466,468],[386,388],[359,361],[468,470],[466,468],[2152,2154],[2129,2131],[664,666],[366,368],[372,374],[912,914],[564,566],"[fetchHistory]",[745,747],"[fetchjobs]",[2420,2422],"[fetchStatistics]"]