{"ast":null,"code":"import axios from \"axios\";\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.saveHistoryInDB = node => {\n      node.getSelected()[\"displayed jobs\"] && delete node.getSelected()[\"displayed jobs\"];\n      var history = {\n        ...node.getSavedInDB(),\n        \"client details\": node.getRegistrationDetails(),\n        \"field\": node.getSelected().field,\n        \"conversation content\": node.getHistoryChat(),\n        \"displayed jobs\": node.getSavedInDB()[\"displayed jobs\"] ? node.getSavedInDB()[\"displayed jobs\"] : \"-\",\n        \"selected jobs\": node.getSavedInDB()[\"selected jobs\"] ? node.getSavedInDB()[\"selected jobs\"] : \"-\",\n        \"experiance & education\": node.getSelected()[\"job Requirements\"] ? node.getSelected()[\"job Requirements\"] : \"-\",\n        \"feedback on termination\": node.getSavedInDB()[\"feedback on termination\"] ? node.getSavedInDB()[\"feedback on termination\"] : \"-\",\n        \"selected features\": node.getSelected()\n      };\n      node.setSavedInDB(history);\n      //call server with 'history' var\n\n      console.log(\"save data in DB \", history);\n    };\n    this.selfSearch = (node, Freetxt) => {\n      var txt1 = node.getNextResponse().children[0].text;\n      const message1 = this.createChatBotMessage(txt1, {\n        widget: \"moreInfo\"\n      });\n      this.addMessageToState(message1, node);\n\n      //goodbye\n      var txt2 = node.getNextResponse().children[0].children[0].text;\n      const message2 = this.createChatBotMessage(txt2);\n\n      //set history\n      if (typeof Freetxt === \"object\" && Freetxt !== null && Freetxt.flag === \"noAccuracy\") {\n        node.setHistoryChat([...node.getHistoryChat(), {\n          bot: [txt1, txt2]\n        }]);\n      } else if (typeof Freetxt === \"object\" && Freetxt !== null && Freetxt.flag === \"noJobs\") {\n        //adding the bot message into the end of history\n        var newHistoryArray = node.getHistoryChat();\n        var lastBotHistory = newHistoryArray.pop();\n        lastBotHistory.bot.push(txt1, txt2);\n        var updatedBotHistory = {\n          bot: lastBotHistory.bot\n        };\n        node.setHistoryChat([...newHistoryArray, updatedBotHistory]);\n      } else {\n        node.setHistoryChat([...node.getHistoryChat(), {\n          user: [Freetxt]\n        }, {\n          bot: [txt1, txt2]\n        }]);\n      }\n      console.log(\"history \", node.getHistoryChat());\n      node.setIsFeedback(0);\n      this.addMessageToState(message2, node);\n      this.saveHistoryInDB(node);\n    };\n    this.handleField = (node, opt) => {\n      console.log(\"Thank you god!\", node.getRegistrationDetails());\n      var txt = node.getNextResponse().children[0].children[1].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"jobTitles\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        field: opt\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        bot: [node.getNextResponse().text, node.getNextResponse().children[0].text]\n      }, {\n        user: [opt]\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"how \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[1]);\n      this.addMessageToState(message, node);\n    };\n    this.handleOtherField = (node, opt) => {\n      var txt = node.getNextResponse().children[0].children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"approval\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        field: opt\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        bot: [node.getNextResponse().text, node.getNextResponse().children[0].text]\n      }, {\n        user: [opt]\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"how \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message, node);\n    };\n    this.handleJobTitle = (node, opts) => {\n      var txt = node.getNextResponse().children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"companies\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        'JobTitles': opts\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"how \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0]);\n      this.addMessageToState(message, node);\n    };\n    this.handleCompany = (node, opts) => {\n      var txt1 = node.getNextResponse().children[0].text;\n      const message1 = this.createChatBotMessage(txt1);\n      this.addMessageToState(message1, node);\n      var txt2 = node.getNextResponse().children[0].children[0].text;\n      const message2 = this.createChatBotMessage(txt2, {\n        widget: \"areas\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        companies: opts\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt1, txt2]\n      }]);\n      console.log(\"how \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message2, node);\n    };\n    this.addMessageToState = (message, node) => {\n      this.setState(prevState => {\n        return {\n          ...prevState,\n          messages: [...prevState.messages, message],\n          head: node\n        };\n      });\n    };\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  handleApproval(node, opt) {\n    //case of asking for saving user details in our system\n    if (node.getNextResponse().title === \"user selected 'other' field\") {\n      //????????????????????? if yes save!!!\n      var txt = node.getNextResponse().children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"moreInfo\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        approval: opt\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: [opt]\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      this.addMessageToState(message, node);\n      //קריאה לסיום לא בטוח\n      this.saveHistoryInDB(node);\n    }\n    //case of asking for self job search\n    else if (node.getNextResponse().title.includes(\"self job search\")) {\n      if (opt === \"Yes\") {\n        //קריאה לסיום\n        this.selfSearch(node, opt);\n      } else {\n        //קריאה לסיום\n        var txt = node.getNextResponse().children[1].text;\n        const message = this.createChatBotMessage(txt);\n        node.setHistoryChat([...node.getHistoryChat(), {\n          user: [opt]\n        }, {\n          bot: [txt]\n        }]);\n        console.log(\"history \", node.getHistoryChat());\n        this.addMessageToState(message, node);\n        this.saveHistoryInDB(node);\n      }\n    }\n    //case of asking for accurate match\n    else if (node.getNextResponse().title === \"user selected 'Nothing fits' or up to 2 jobs\") {\n      if (opt === \"Yes\") {\n        //user wanted an accurate match\n        var txt = node.getNextResponse().children[1].text;\n        const message = this.createChatBotMessage(txt, {\n          widget: \"accuracyLevel\"\n        });\n        node.setHistoryChat([...node.getHistoryChat(), {\n          user: [opt]\n        }, {\n          bot: [txt]\n        }]);\n        console.log(\"history \", node.getHistoryChat());\n        node.setNextResponse(node.getNextResponse().children[1]);\n        this.addMessageToState(message, node);\n      } else {\n        //user did not want an accurate match\n        var txt = node.getNextResponse().children[0].text;\n        const message = this.createChatBotMessage(txt);\n        node.setHistoryChat([...node.getHistoryChat(), {\n          user: [opt]\n        }, {\n          bot: [txt]\n        }]);\n        console.log(\"history \", node.getHistoryChat());\n        node.setIsFeedback(1);\n        node.setNextResponse(node.getNextResponse().children[0]);\n        this.addMessageToState(message, node);\n        document.documentElement.style.setProperty('--button-visibility', 'visible');\n      }\n    }\n  }\n  handleArea(node, opts) {\n    var txt1 = node.getNextResponse().children[0].text;\n    const message1 = this.createChatBotMessage(txt1);\n    this.addMessageToState(message1, node);\n    var txt2 = node.getNextResponse().children[0].children[0].text;\n    const message2 = this.createChatBotMessage(txt2, {\n      widget: \"jobTypes\"\n    });\n    node.setSelected({\n      ...node.getSelected(),\n      areas: opts\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: opts\n    }, {\n      bot: [txt1, txt2]\n    }]);\n    console.log(\"how \", node.getHistoryChat());\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\n    this.addMessageToState(message2, node);\n  }\n  //Samuel version\n  // handleJobType(node,opts){\n  //   const message = this.createChatBotMessage(\n  //     node.getNextResponse().children[0].text,\n  //     {\n  //       widget: \"\",\n  //     }\n  //   );\n  //   node.setSelected({...node.getSelected(),'job Types':opts})\n  //   node.setNextResponse(node.getNextResponse().children[0])\n  //   this.addMessageToState(message,node);\n  //   //server\n  //   var responses = node.getSelected()\n  //   axios.post(\"/getfirstjobs\", {\n  //     responses: responses\n  //   }, {\n  //     headers: {\n  //     'Content-type': 'application/json; charset=UTF-8' } \n  //   })\n  //   .then((response) => {\n  //     if (response.data.success) {\n  //       console.log(\"Server returned matching jobs:\", response.data.list_jobs);\n  //       // Add a message for each job to the chatbot's message history\n  //       response.data.list_jobs.forEach((job) => {\n  //         const jobMessage = this.createChatBotMessage(\n  //           `Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}`\n  //         );\n  //         this.addMessageToState(jobMessage,node);\n  //       });\n  //     } else {\n  //       console.log(\"Error getting matching jobs: \", response.data.message);\n  //     }\n  //   })\n  //   .catch((err) => {\n  //     console.log(\"Error getting matching jobs: \", err.message);\n  //   });\n  // }\n\n  handleJobType(node, opts) {\n    //asking to wait\n    var txt1 = node.getNextResponse().children[0].text;\n    const message1 = this.createChatBotMessage(txt1);\n    this.addMessageToState(message1, node);\n\n    //server calculating jobs...\n    node.setSelected({\n      ...node.getSelected(),\n      'job Types': opts\n    });\n    console.log(\"selected before sending to server: \", node.getSelected());\n    // var jobs=[\"X\",\"Y\",\"Z\",\"T\",\"W\",\"Nothing fits\"];\n    // node.setJobs(jobs);\n\n    //samuel\n    var responses = node.getSelected();\n    axios.post(\"/getfirstjobs\", {\n      responses: responses\n    }, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => {\n      if (response.data.success) {\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\n        // Add a message for each job to the chatbot's message history\n        // response.data.list_jobs.forEach((job) => {\n        //   const jobMessage = this.createChatBotMessage(\n        //     `Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}`\n        //   );\n        //   this.addMessageToState(jobMessage,node);\n        // });\n        // while(response.data.list_jobs===[]){}\n\n        // node.setJobs(response.data.list_jobs);\n        node.setJobs(response.data.list_jobs.map((job, index) => {\n          return {\n            ...job,\n            id: index\n          };\n        }));\n\n        // node.setJobs([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"Nothing fits\"]);\n        if (node.getSavedInDB()[\"displayed jobs\"]) {\n          node.setSavedInDB({\n            ...node.getSavedInDB(),\n            \"displayed jobs\": node.getSavedInDB()[\"displayed jobs\"].concat(node.getJobs())\n          });\n        } else {\n          node.setSavedInDB({\n            ...node.getSavedInDB(),\n            \"displayed jobs\": node.getJobs()\n          });\n        }\n\n        //continute\n        if (response.data.list_jobs.length !== 0) {\n          var txt2 = node.getNextResponse().children[0].children[0].text;\n          const message2 = this.createChatBotMessage(txt2, {\n            widget: \"jobs\"\n          });\n          node.setHistoryChat([...node.getHistoryChat(), {\n            user: opts\n          }, {\n            bot: [txt1, txt2]\n          }]); //ID job ADDED???\n          node.setSelected({\n            ...node.getSelected(),\n            \"displayed jobs\": response.data.list_jobs\n          });\n          console.log(\"history \", node.getHistoryChat());\n          node.setNextResponse(node.getNextResponse().children[0].children[0]);\n          this.addMessageToState(message2, node);\n        } else {\n          var txt2 = \"No jobs found\";\n          const message2 = this.createChatBotMessage(txt2);\n          node.setHistoryChat([...node.getHistoryChat(), {\n            user: opts\n          }, {\n            bot: [txt1, txt2]\n          }]);\n          console.log(\"history \", node.getHistoryChat());\n          node.setNextResponse(node.getNextResponse().children[0].children[0]);\n          this.addMessageToState(message2, node);\n          //continute to accuracy phase\n\n          node.incCountNotFits(node.getCountNotFits());\n          this.handleJob(node, [\"No jobs\"]);\n        }\n      } else {\n        console.log(\"Error getting matching jobs: \", response.data.message);\n      }\n    }).catch(err => {\n      console.log(\"Error getting matching jobs: \", err.message);\n    });\n\n    // //continute\n    // var txt2=node.getNextResponse().children[0].children[0].text;\n    // const message2 = this.createChatBotMessage(\n    //   txt2,\n    //   {\n    //     widget: \"jobs\",\n    //   }\n    // );\n    // node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\n    // console.log(\"history \",node.getHistoryChat());\n    // node.setNextResponse(node.getNextResponse().children[0].children[0])\n    // this.addMessageToState(message2,node);\n  }\n\n  handleJob(node, opts) {\n    var isJobs = 1;\n    if (opts[0] === \"No jobs\") {\n      opts[0] = \"Nothing fits\";\n      isJobs = 0;\n    }\n    if (opts[0] === \"Nothing fits\") {\n      if (node.getCountNotFits() === 1) {\n        var txt = node.getNextResponse().children[0].text;\n        const message = this.createChatBotMessage(txt, {\n          widget: \"approval\"\n        });\n        this.addMessageToState(message, node);\n\n        //adding the bot message into the end of history\n        if (isJobs === 1) {\n          //check if it is a case that user selected 1 or 2 jobs in the first matching jobs\n          if (node.getSelectedJobs().length > 0) {\n            opts = node.getSelectedJobs();\n            node.setHistoryChat([...node.getHistoryChat(), {\n              user: opts\n            }, {\n              bot: [txt]\n            }]);\n          } else {\n            node.setHistoryChat([...node.getHistoryChat(), {\n              user: opts\n            }, {\n              bot: [txt]\n            }]);\n          }\n        } else {\n          var newHistoryArray = node.getHistoryChat();\n          var lastBotHistory = newHistoryArray.pop();\n          lastBotHistory.bot.push(txt);\n          var updatedBotHistory = {\n            bot: lastBotHistory.bot\n          };\n          node.setHistoryChat([...newHistoryArray, updatedBotHistory]);\n        }\n        node.setNextResponse(node.getNextResponse().children[0]);\n      } else if (node.getCountNotFits() === 2) {\n        if (isJobs === 1) {\n          this.selfSearch(node, opts[0]);\n        } else {\n          this.selfSearch(node, {\n            flag: \"noJobs\"\n          });\n        }\n      }\n    } else if (opts.length <= 2 && node.getIsJobAccuracy() === 0) {\n      //#מה ההבדל בין זה ללמעלה??\n      var txt = node.getNextResponse().children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"approval\"\n      });\n      this.addMessageToState(message, node);\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      node.setNextResponse(node.getNextResponse().children[0]);\n    } else {\n      txt = node.getNextResponse().children[1].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"emailDisplay\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"I chose jobs  \", node.getSelectedJobs());\n      node.setNextResponse(node.getNextResponse().children[1]);\n      this.addMessageToState(message, node);\n    }\n  }\n  handleEmailDisplay(node, opts) {\n    //user selected 'Just keep going'\n    if (opts[0] === \"Just keep going\") {\n      var txt = node.getNextResponse().children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"approval\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0]);\n      this.addMessageToState(message, node);\n    }\n    //user selected 'Display choices'\n    else if (opts.length === 1 && opts.includes(\"Display my choices again\")) {\n      var txt1 = node.getNextResponse().children[1].text;\n      const message1 = this.createChatBotMessage(txt1, {\n        widget: \"displaySelectedJobs\"\n      });\n      this.addMessageToState(message1, node);\n      var txt2 = node.getNextResponse().children[1].children[0].text;\n      const message2 = this.createChatBotMessage(txt2, {\n        widget: \"approval\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt1, txt2]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[1].children[0]);\n      this.addMessageToState(message2, node);\n    }\n    //user selected 'Email them to me'\n    else if (opts.length === 1 && opts.includes(\"Email them to me\")) {\n      var txt = node.getNextResponse().children[2].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"email\" //enter email\n      });\n\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[2]);\n      this.addMessageToState(message, node);\n    }\n    //user selected 'Display choices and Email them to me'\n    else {\n      var txt1 = node.getNextResponse().children[3].text;\n      const message1 = this.createChatBotMessage(txt1, {\n        widget: \"displaySelectedJobs\"\n      });\n      this.addMessageToState(message1, node);\n      var txt2 = node.getNextResponse().children[3].children[0].text;\n      const message2 = this.createChatBotMessage(txt2, {\n        widget: \"email\" //enter email\n      });\n\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt1, txt2]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[3].children[0]);\n      this.addMessageToState(message2, node);\n    }\n  }\n  handleEmail(node, email) {\n    console.log(\"email: \", email, \"sended\");\n    if (email === \"\") {\n      var txt = node.getNextResponse().children[0].children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"approval\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: email\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message, node);\n    } else {\n      // const nodemailer = require('nodemailer');\n\n      // // create reusable transporter object using the default SMTP transport\n      // let transporter = nodemailer.createTransport({\n      //     host: 'smtp.gmail.com',\n      //     port: 587,\n      //     secure: false,\n      //     auth: {\n      //         user: 'your_email@gmail.com',\n      //         pass: 'your_email_password'\n      //     }\n      // });\n\n      // // setup email data with unicode symbols\n      // let mailOptions = {\n      //     from: 'your_email@gmail.com', // sender address\n      //     to: 'recipient_email@example.com', // list of receivers\n      //     subject: 'Test email', // Subject line\n      //     text: 'Hello world!', // plain text body\n      //     html: '<b>Hello world!</b>' // html body\n      // };\n\n      // // send mail with defined transport object\n      // transporter.sendMail(mailOptions, (error, info) => {\n      //     if (error) {\n      //         return console.log(error);\n      //     }\n      //     console.log('Message sent: %s', info.messageId);\n      // });\n      // //option 2\n      // axios.post('/send-email', {\n      //   email: email\n      // }, {\n      //   headers: {\n      //   'Content-type': 'application/json; charset=UTF-8' } \n      // })\n      // .then((response) => {\n      //   console.log(response.data.message);\n      // })\n      // .catch((error) => {\n      //   console.error(error.response.data.error);\n      // });\n      var txt1 = node.getNextResponse().children[0].text;\n      const message1 = this.createChatBotMessage(txt1);\n      this.addMessageToState(message1, node);\n      var txt2 = node.getNextResponse().children[0].children[0].text;\n      const message2 = this.createChatBotMessage(txt2, {\n        widget: \"approval\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: email\n      }, {\n        bot: [txt1, txt2]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message2, node);\n    }\n  }\n  handleAccuracyLevel(node, opts) {\n    var tempNodeObject = {\n      ...node.getAccuracyNode()\n    };\n    node.setNextResponse(tempNodeObject);\n    if (opts.includes(\"Experience level\")) {\n      this.experienceWidget(node);\n    } else if (opts.includes(\"Desired city\")) {\n      this.cityWidget(node);\n    } else if (opts.includes(\"Job requirements\")) {\n      document.documentElement.style.setProperty('--button-visibility', 'visible');\n      this.requirementsWidget(node);\n    } else if (opts.includes(\"Job title\")) {\n      this.jobTitleTypingWidget(node);\n    } else {\n      //server1--->server\n      //server0--->self_search\n      if (node.getIsJobAccuracy() === 1) {\n        console.log(\"server match\");\n        this.accurateJobsWidget(node);\n      } else {\n        //קריאה לסיום\n        this.selfSearch(node, {\n          flag: \"noAccuracy\"\n        });\n      }\n    }\n  }\n  experienceWidget(node) {\n    var txt = node.getNextResponse().children[3].text;\n    const message = this.createChatBotMessage(txt, {\n      widget: \"experienceLevel\"\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      bot: [txt]\n    }]);\n    // console.log(\"history \",node.getHistoryChat());\n    node.setNextResponse(node.getNextResponse().children[3]);\n    this.addMessageToState(message, node);\n  }\n  handleExperienceLevel(node, opts) {\n    if (opts[0] !== \"Other\") {\n      node.setIsJobAccuracy(1);\n    }\n    node.setSelected({\n      ...node.getSelected(),\n      \"experience level\": opts\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: opts\n    }]);\n    console.log(\"history in hanExp \", node.getHistoryChat());\n    //remove 'Experience level' from the selected accuracy levels and handle additional widgets of accuracy levels\n    node.setAccuracyOptions(node.getAccuracyOptions().filter(selectedOption => selectedOption !== \"Experience level\"));\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\n  }\n  cityWidget(node) {\n    var txt = node.getNextResponse().children[1].text;\n    const message = this.createChatBotMessage(txt, {\n      widget: \"cities\"\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      bot: [txt]\n    }]);\n    node.setNextResponse(node.getNextResponse().children[1]);\n    console.log(\"history in cityWidget \", node.getHistoryChat());\n    this.addMessageToState(message, node);\n  }\n  handleCities(node, opts) {\n    if (opts[0] !== \"Other\") {\n      node.setIsJobAccuracy(1);\n    }\n    node.setSelected({\n      ...node.getSelected(),\n      \"cities\": opts\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: opts\n    }]);\n    console.log(\"history in hanCities \", node.getHistoryChat());\n    //remove 'Desired city' from the selected accuracy levels and handle additional widgets of accuracy levels\n    node.setAccuracyOptions(node.getAccuracyOptions().filter(selectedOption => selectedOption !== \"Desired city\"));\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\n  }\n  requirementsWidget(node) {\n    var txt = node.getNextResponse().children[2].text;\n    const message = this.createChatBotMessage(txt);\n    node.setHistoryChat([...node.getHistoryChat(), {\n      bot: [txt]\n    }]);\n    node.setNextResponse(node.getNextResponse().children[2]);\n    console.log(\"history in requirementsWidget \", node.getHistoryChat());\n    node.setIsRequirements(1);\n    this.addMessageToState(message, node);\n  }\n  handleRequirements(node, msg) {\n    document.documentElement.style.setProperty('--button-visibility', 'hidden');\n    //typing about job requirements is stopped \n    node.setIsRequirements(0);\n\n    //unclear-->0 ???????\n    node.setIsJobAccuracy(1);\n    node.setSelected({\n      ...node.getSelected(),\n      \"job Requirements\": msg\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: [msg]\n    }]);\n    console.log(\"history in handleRequirements \", node.getHistoryChat());\n    console.log(\"selected in handleRequirements \", node.getSelected());\n    //remove 'Job requirements' from the selected accuracy levels and handle additional widgets of accuracy levels\n    node.setAccuracyOptions(node.getAccuracyOptions().filter(selectedOption => selectedOption !== \"Job requirements\"));\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\n  }\n  jobTitleTypingWidget(node) {\n    var txt = node.getNextResponse().children[4].text;\n    const message = this.createChatBotMessage(txt, {\n      widget: \"jobTitleTyping\"\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      bot: [txt]\n    }]);\n    node.setNextResponse(node.getNextResponse().children[4]);\n    console.log(\"history in jobTitleTypingWidgetTyping \", node.getHistoryChat());\n    this.addMessageToState(message, node);\n  }\n  handleJobTitleTyping(node, msg) {\n    //unclear-->0 ???????\n    node.setIsJobAccuracy(1);\n    node.setSelected({\n      ...node.getSelected(),\n      \"additional JobTitles\": msg\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: [msg]\n    }]);\n    console.log(\"history in handleIsJobTitleTyping \", node.getHistoryChat());\n    console.log(\"selected in handleIsJobTitleTyping \", node.getSelected());\n    //remove 'Job title' from the selected accuracy levels and handle additional widgets of accuracy levels\n    node.setAccuracyOptions(node.getAccuracyOptions().filter(selectedOption => selectedOption !== \"Job title\"));\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\n  }\n  accurateJobsWidget(node) {\n    //asking to wait\n    var txt1 = node.getNextResponse().children[1].children[1].text;\n    const message1 = this.createChatBotMessage(txt1);\n    this.addMessageToState(message1, node);\n\n    //server calculating jobs...\n    console.log(\"new selected \", node.getSelected());\n    var responses = node.getSelected();\n    axios.post(\"/getsecondjobs\", {\n      responses: responses\n    }, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => {\n      if (response.data.success) {\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\n        // Add a message for each job to the chatbot's message history\n        // response.data.list_jobs.forEach((job) => {\n        //   const jobMessage = this.createChatBotMessage(\n        //     `Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}`\n        //   );\n        //   this.addMessageToState(jobMessage,node);\n        // });\n        // while(response.data.list_jobs===[]){}\n\n        // node.setJobs(response.data.list_jobs);\n        node.setJobs(response.data.list_jobs.map((job, index) => {\n          return {\n            ...job,\n            id: index\n          };\n        }));\n        //node.setJobs([\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"Nothing fits\"]);\n        if (node.getSavedInDB()[\"displayed jobs\"]) {\n          node.setSavedInDB({\n            ...node.getSavedInDB(),\n            \"displayed jobs\": node.getSavedInDB()[\"displayed jobs\"].concat(node.getJobs())\n          });\n        } else {\n          node.setSavedInDB({\n            ...node.getSavedInDB(),\n            \"displayed jobs\": node.getJobs()\n          });\n        }\n\n        //לא לשכוח לשרשר את העבודות החדשות שהוצעו????????אולי לעשות רשימה חדשה שהיא העבודות סבב 2\n        //continute\n        if (response.data.list_jobs.length !== 0) {\n          var txt2 = node.getNextResponse().children[1].children[1].children[0].text;\n          const message2 = this.createChatBotMessage(txt2, {\n            widget: \"jobs\"\n          });\n          node.setHistoryChat([...node.getHistoryChat(), {\n            bot: [txt1, txt2]\n          }]);\n          console.log(\"history in accurate jobs handle \", node.getHistoryChat());\n          node.setNextResponse(node.getNextResponse().children[1].children[1].children[0]);\n          this.addMessageToState(message2, node);\n        } else {\n          var txt2 = \"No jobs found\";\n          const message2 = this.createChatBotMessage(txt2);\n          node.setHistoryChat([...node.getHistoryChat(), {\n            bot: [txt1, txt2]\n          }]);\n          console.log(\"history \", node.getHistoryChat());\n          node.setNextResponse(node.getNextResponse().children[1].children[1].children[0]);\n          this.addMessageToState(message2, node);\n\n          //continute to accuracy phase\n          node.incCountNotFits(node.getCountNotFits());\n          this.handleJob(node, [\"No jobs\"]);\n        }\n      } else {\n        console.log(\"Error getting matching jobs: \", response.data.message);\n      }\n    }).catch(err => {\n      console.log(\"Error getting matching jobs: \", err.message);\n    });\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["axios","ActionProvider","constructor","createChatBotMessage","setStateFunc","saveHistoryInDB","node","getSelected","history","getSavedInDB","getRegistrationDetails","field","getHistoryChat","setSavedInDB","console","log","selfSearch","Freetxt","txt1","getNextResponse","children","text","message1","widget","addMessageToState","txt2","message2","flag","setHistoryChat","bot","newHistoryArray","lastBotHistory","pop","push","updatedBotHistory","user","setIsFeedback","handleField","opt","txt","message","setSelected","setNextResponse","handleOtherField","handleJobTitle","opts","handleCompany","companies","setState","prevState","messages","head","handleApproval","title","approval","includes","document","documentElement","style","setProperty","handleArea","areas","handleJobType","responses","post","headers","then","response","data","success","list_jobs","setJobs","map","job","index","id","concat","getJobs","length","incCountNotFits","getCountNotFits","handleJob","catch","err","isJobs","getSelectedJobs","getIsJobAccuracy","handleEmailDisplay","handleEmail","email","handleAccuracyLevel","tempNodeObject","getAccuracyNode","experienceWidget","cityWidget","requirementsWidget","jobTitleTypingWidget","accurateJobsWidget","handleExperienceLevel","setIsJobAccuracy","setAccuracyOptions","getAccuracyOptions","filter","selectedOption","handleCities","setIsRequirements","handleRequirements","msg","handleJobTitleTyping"],"sources":["/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/ActionProvider.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  saveHistoryInDB=(node)=>{\r\n    node.getSelected()[\"displayed jobs\"] && delete node.getSelected()[\"displayed jobs\"];\r\n    var history={\r\n      ...node.getSavedInDB(),\r\n      \"client details\":node.getRegistrationDetails(),\r\n      \"field\":node.getSelected().field,\r\n      \"conversation content\":node.getHistoryChat(),\r\n      \"displayed jobs\":node.getSavedInDB()[\"displayed jobs\"]?node.getSavedInDB()[\"displayed jobs\"]:\"-\",\r\n      \"selected jobs\":node.getSavedInDB()[\"selected jobs\"]?node.getSavedInDB()[\"selected jobs\"]:\"-\",\r\n      \"experiance & education\":node.getSelected()[\"job Requirements\"]?node.getSelected()[\"job Requirements\"]:\"-\",\r\n      \"feedback on termination\":node.getSavedInDB()[\"feedback on termination\"]?node.getSavedInDB()[\"feedback on termination\"]:\"-\",\r\n      \"selected features\":node.getSelected()\r\n      }\r\n    node.setSavedInDB(history);\r\n    //call server with 'history' var\r\n\r\n    console.log(\"save data in DB \",history)\r\n  }\r\n\r\n  selfSearch = (node,Freetxt) => {\r\n    var txt1=node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(\r\n      txt1,\r\n      {\r\n        widget: \"moreInfo\",\r\n      }\r\n    );\r\n    this.addMessageToState(message1,node);\r\n\r\n    //goodbye\r\n    var txt2=node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(txt2);\r\n\r\n    //set history\r\n    if((typeof Freetxt === \"object\") && (Freetxt !== null) && (Freetxt.flag === \"noAccuracy\")){\r\n      node.setHistoryChat([...node.getHistoryChat(),{bot:[txt1,txt2]}]);\r\n    }else if((typeof Freetxt === \"object\") && (Freetxt !== null) && (Freetxt.flag === \"noJobs\")){\r\n      //adding the bot message into the end of history\r\n      var newHistoryArray=node.getHistoryChat();\r\n      var lastBotHistory=newHistoryArray.pop();\r\n      lastBotHistory.bot.push(txt1,txt2)\r\n      var updatedBotHistory={bot:lastBotHistory.bot}\r\n      node.setHistoryChat([...newHistoryArray,updatedBotHistory])\r\n    }else{\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:[Freetxt]},{bot:[txt1,txt2]}]);\r\n    }\r\n    console.log(\"history \",node.getHistoryChat());\r\n    node.setIsFeedback(0);\r\n    this.addMessageToState(message2,node);\r\n    this.saveHistoryInDB(node)\r\n  };\r\n\r\n  handleField = (node,opt) => {\r\n    console.log(\"Thank you god!\",node.getRegistrationDetails())\r\n    var txt=node.getNextResponse().children[0].children[1].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"jobTitles\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(),field:opt})\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[node.getNextResponse().text,node.getNextResponse().children[0].text]},{user:[opt]},{bot:[txt]}])\r\n    console.log(\"how \",node.getHistoryChat())\r\n    node.setNextResponse(node.getNextResponse().children[0].children[1])\r\n    this.addMessageToState(message,node);\r\n  };\r\n\r\n  handleOtherField = (node,opt)=>{\r\n    var txt=node.getNextResponse().children[0].children[0].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"approval\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(),field:opt});\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[node.getNextResponse().text,node.getNextResponse().children[0].text]},{user:[opt]},{bot:[txt]}])\r\n    console.log(\"how \",node.getHistoryChat())\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n    this.addMessageToState(message,node);\r\n  };\r\n\r\n  handleApproval(node,opt){\r\n    //case of asking for saving user details in our system\r\n    if(node.getNextResponse().title===\"user selected 'other' field\"){\r\n      //????????????????????? if yes save!!!\r\n      var txt=node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"moreInfo\",\r\n        }\r\n      );\r\n      node.setSelected({...node.getSelected(),approval:opt});\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:[opt]},{bot:[txt]}]);\r\n      console.log(\"history \",node.getHistoryChat());\r\n      this.addMessageToState(message,node);\r\n      //קריאה לסיום לא בטוח\r\n      this.saveHistoryInDB(node)\r\n    }\r\n    //case of asking for self job search\r\n    else if(node.getNextResponse().title.includes(\"self job search\")){\r\n      if(opt===\"Yes\"){\r\n        //קריאה לסיום\r\n        this.selfSearch(node,opt)\r\n      }else{\r\n        //קריאה לסיום\r\n        var txt=node.getNextResponse().children[1].text;\r\n        const message = this.createChatBotMessage(txt);\r\n        node.setHistoryChat([...node.getHistoryChat(),{user:[opt]},{bot:[txt]}]);\r\n        console.log(\"history \",node.getHistoryChat());\r\n        this.addMessageToState(message,node);\r\n        this.saveHistoryInDB(node)\r\n      }\r\n    }\r\n    //case of asking for accurate match\r\n    else if(node.getNextResponse().title===\"user selected 'Nothing fits' or up to 2 jobs\"){\r\n      if(opt===\"Yes\"){\r\n        //user wanted an accurate match\r\n        var txt=node.getNextResponse().children[1].text;\r\n        const message = this.createChatBotMessage(\r\n          txt,\r\n          {\r\n            widget: \"accuracyLevel\",\r\n          }\r\n        );\r\n        node.setHistoryChat([...node.getHistoryChat(),{user:[opt]},{bot:[txt]}]);\r\n        console.log(\"history \",node.getHistoryChat());\r\n        node.setNextResponse(node.getNextResponse().children[1])\r\n        this.addMessageToState(message,node);\r\n      }else{\r\n        //user did not want an accurate match\r\n        var txt=node.getNextResponse().children[0].text;\r\n        const message = this.createChatBotMessage(txt);\r\n        node.setHistoryChat([...node.getHistoryChat(),{user:[opt]},{bot:[txt]}]);\r\n        console.log(\"history \",node.getHistoryChat());\r\n        node.setIsFeedback(1);\r\n        node.setNextResponse(node.getNextResponse().children[0])\r\n        this.addMessageToState(message,node);\r\n        document.documentElement.style.setProperty('--button-visibility', 'visible');\r\n      }\r\n    }\r\n  }\r\n\r\n  handleJobTitle = (node,opts) => {\r\n    var txt=node.getNextResponse().children[0].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"companies\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(),'JobTitles':opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n    console.log(\"how \",node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0])\r\n    this.addMessageToState(message,node);\r\n  };\r\n\r\n  handleCompany = (node,opts) => {\r\n    var txt1=node.getNextResponse().children[0].text;\r\n    const message1=this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1,node);\r\n    \r\n    var txt2=node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(\r\n      txt2,\r\n      {\r\n        widget: \"areas\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(),companies:opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n    console.log(\"how \",node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n    this.addMessageToState(message2,node);\r\n  };\r\n\r\n  handleArea(node,opts){\r\n    var txt1=node.getNextResponse().children[0].text;\r\n    const message1=this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1,node);\r\n\r\n    var txt2=node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(\r\n      txt2,\r\n      {\r\n        widget: \"jobTypes\",\r\n      }\r\n    );\r\n    node.setSelected({...node.getSelected(), areas:opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n    console.log(\"how \",node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n    this.addMessageToState(message2,node);\r\n  }\r\n  //Samuel version\r\n  // handleJobType(node,opts){\r\n  //   const message = this.createChatBotMessage(\r\n  //     node.getNextResponse().children[0].text,\r\n  //     {\r\n  //       widget: \"\",\r\n  //     }\r\n  //   );\r\n  //   node.setSelected({...node.getSelected(),'job Types':opts})\r\n  //   node.setNextResponse(node.getNextResponse().children[0])\r\n  //   this.addMessageToState(message,node);\r\n  //   //server\r\n  //   var responses = node.getSelected()\r\n  //   axios.post(\"/getfirstjobs\", {\r\n  //     responses: responses\r\n  //   }, {\r\n  //     headers: {\r\n  //     'Content-type': 'application/json; charset=UTF-8' } \r\n  //   })\r\n  //   .then((response) => {\r\n  //     if (response.data.success) {\r\n  //       console.log(\"Server returned matching jobs:\", response.data.list_jobs);\r\n  //       // Add a message for each job to the chatbot's message history\r\n  //       response.data.list_jobs.forEach((job) => {\r\n  //         const jobMessage = this.createChatBotMessage(\r\n  //           `Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}`\r\n  //         );\r\n  //         this.addMessageToState(jobMessage,node);\r\n  //       });\r\n  //     } else {\r\n  //       console.log(\"Error getting matching jobs: \", response.data.message);\r\n  //     }\r\n  //   })\r\n  //   .catch((err) => {\r\n  //     console.log(\"Error getting matching jobs: \", err.message);\r\n  //   });\r\n  // }\r\n\r\n  handleJobType(node,opts){\r\n    //asking to wait\r\n    var txt1=node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1,node);\r\n\r\n    //server calculating jobs...\r\n    node.setSelected({...node.getSelected(),'job Types':opts})\r\n    console.log(\"selected before sending to server: \",node.getSelected())\r\n    // var jobs=[\"X\",\"Y\",\"Z\",\"T\",\"W\",\"Nothing fits\"];\r\n    // node.setJobs(jobs);\r\n\r\n    //samuel\r\n    var responses = node.getSelected()\r\n    axios.post(\"/getfirstjobs\", {\r\n      responses: responses\r\n    }, {\r\n      headers: {\r\n      'Content-type': 'application/json; charset=UTF-8' } \r\n    })\r\n    .then((response) => {\r\n      if (response.data.success) {\r\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\r\n        // Add a message for each job to the chatbot's message history\r\n        // response.data.list_jobs.forEach((job) => {\r\n        //   const jobMessage = this.createChatBotMessage(\r\n        //     `Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}`\r\n        //   );\r\n        //   this.addMessageToState(jobMessage,node);\r\n        // });\r\n        // while(response.data.list_jobs===[]){}\r\n        \r\n        // node.setJobs(response.data.list_jobs);\r\n        node.setJobs(response.data.list_jobs.map((job,index)=>{return {...job,id:index}}));\r\n\r\n        // node.setJobs([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"Nothing fits\"]);\r\n        if(node.getSavedInDB()[\"displayed jobs\"]){\r\n          node.setSavedInDB({...node.getSavedInDB(),\"displayed jobs\":node.getSavedInDB()[\"displayed jobs\"].concat(node.getJobs())});\r\n        }else{\r\n          node.setSavedInDB({...node.getSavedInDB(),\"displayed jobs\":node.getJobs()});\r\n        }\r\n\r\n        //continute\r\n        if(response.data.list_jobs.length!==0){\r\n          var txt2=node.getNextResponse().children[0].children[0].text;\r\n          const message2 = this.createChatBotMessage(\r\n            txt2,\r\n            {\r\n              widget: \"jobs\",\r\n            }\r\n          );\r\n          node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])//ID job ADDED???\r\n          node.setSelected({...node.getSelected(),\"displayed jobs\":response.data.list_jobs})\r\n          console.log(\"history \",node.getHistoryChat());\r\n          node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n          this.addMessageToState(message2,node);\r\n        }else{\r\n          var txt2=\"No jobs found\";\r\n          const message2 = this.createChatBotMessage(txt2);\r\n          node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n          console.log(\"history \",node.getHistoryChat());\r\n          node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n          this.addMessageToState(message2,node);\r\n          //continute to accuracy phase\r\n\r\n          node.incCountNotFits(node.getCountNotFits());\r\n          this.handleJob(node,[\"No jobs\"]);\r\n        }\r\n\r\n      } else {\r\n        console.log(\"Error getting matching jobs: \", response.data.message);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error getting matching jobs: \", err.message);\r\n    });\r\n\r\n    // //continute\r\n    // var txt2=node.getNextResponse().children[0].children[0].text;\r\n    // const message2 = this.createChatBotMessage(\r\n    //   txt2,\r\n    //   {\r\n    //     widget: \"jobs\",\r\n    //   }\r\n    // );\r\n    // node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n    // console.log(\"history \",node.getHistoryChat());\r\n    // node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n    // this.addMessageToState(message2,node);\r\n  }\r\n\r\n  handleJob(node,opts){\r\n    var isJobs=1;\r\n    if(opts[0]===\"No jobs\"){\r\n      opts[0]=\"Nothing fits\";\r\n      isJobs=0;\r\n    }\r\n\r\n    if(opts[0]===\"Nothing fits\"){\r\n      if(node.getCountNotFits()===1){\r\n        var txt=node.getNextResponse().children[0].text;\r\n        const message = this.createChatBotMessage(\r\n          txt,\r\n          {\r\n            widget:\"approval\"\r\n          }\r\n          );\r\n        this.addMessageToState(message,node);\r\n\r\n        //adding the bot message into the end of history\r\n        if(isJobs===1){\r\n          //check if it is a case that user selected 1 or 2 jobs in the first matching jobs\r\n          if(node.getSelectedJobs().length>0){\r\n            opts=node.getSelectedJobs();\r\n            node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n          }else{\r\n            node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n          }\r\n        }else{\r\n          var newHistoryArray=node.getHistoryChat();\r\n          var lastBotHistory=newHistoryArray.pop();\r\n          lastBotHistory.bot.push(txt)\r\n          var updatedBotHistory={bot:lastBotHistory.bot}\r\n          node.setHistoryChat([...newHistoryArray,updatedBotHistory])\r\n        }\r\n        node.setNextResponse(node.getNextResponse().children[0])\r\n      }else if(node.getCountNotFits()===2){\r\n        if(isJobs===1){\r\n          this.selfSearch(node,opts[0]);\r\n        }else{\r\n          this.selfSearch(node,{flag:\"noJobs\"});\r\n        }\r\n      }\r\n    }else if((opts.length<=2)&&(node.getIsJobAccuracy()===0)){//#מה ההבדל בין זה ללמעלה??\r\n      var txt=node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget:\"approval\"\r\n        }\r\n        );\r\n      this.addMessageToState(message,node);\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n      node.setNextResponse(node.getNextResponse().children[0])\r\n    }else{\r\n      txt=node.getNextResponse().children[1].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"emailDisplay\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n      console.log(\"I chose jobs  \",node.getSelectedJobs());\r\n      node.setNextResponse(node.getNextResponse().children[1])\r\n      this.addMessageToState(message,node);\r\n    }\r\n  }\r\n\r\n  handleEmailDisplay(node,opts){\r\n    //user selected 'Just keep going'\r\n    if(opts[0]===\"Just keep going\"){\r\n      var txt=node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"approval\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0])\r\n      this.addMessageToState(message,node);\r\n    }\r\n    //user selected 'Display choices'\r\n    else if(opts.length===1 && opts.includes(\"Display my choices again\")){\r\n      var txt1=node.getNextResponse().children[1].text;\r\n      const message1=this.createChatBotMessage(\r\n        txt1,\r\n        {\r\n          widget: \"displaySelectedJobs\",\r\n        }\r\n      );\r\n      this.addMessageToState(message1,node);\r\n      var txt2=node.getNextResponse().children[1].children[0].text;\r\n      const message2=this.createChatBotMessage(\r\n        txt2,\r\n        {\r\n          widget: \"approval\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[1].children[0])\r\n      this.addMessageToState(message2,node);\r\n    }\r\n    //user selected 'Email them to me'\r\n    else if((opts.length===1 && opts.includes(\"Email them to me\"))){\r\n      var txt=node.getNextResponse().children[2].text;\r\n      const message=this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"email\",//enter email\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[2])\r\n      this.addMessageToState(message,node);\r\n    }\r\n    //user selected 'Display choices and Email them to me'\r\n    else {\r\n      var txt1=node.getNextResponse().children[3].text;\r\n      const message1 = this.createChatBotMessage(\r\n        txt1,\r\n        {\r\n          widget: \"displaySelectedJobs\",\r\n        }\r\n      );\r\n      this.addMessageToState(message1,node);\r\n\r\n      var txt2=node.getNextResponse().children[3].children[0].text;\r\n      const message2 = this.createChatBotMessage(\r\n        txt2,\r\n        {\r\n          widget: \"email\",//enter email\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:opts},{bot:[txt1,txt2]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[3].children[0])\r\n      this.addMessageToState(message2,node);\r\n    }\r\n  }\r\n\r\n  handleEmail(node,email){\r\n    console.log(\"email: \",email,\"sended\")\r\n    if(email===\"\"){\r\n      var txt=node.getNextResponse().children[0].children[0].text;\r\n      const message = this.createChatBotMessage(\r\n        txt,\r\n        {\r\n          widget: \"approval\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:email},{bot:[txt]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n      this.addMessageToState(message,node);\r\n    }else {\r\n      // const nodemailer = require('nodemailer');\r\n  \r\n      // // create reusable transporter object using the default SMTP transport\r\n      // let transporter = nodemailer.createTransport({\r\n      //     host: 'smtp.gmail.com',\r\n      //     port: 587,\r\n      //     secure: false,\r\n      //     auth: {\r\n      //         user: 'your_email@gmail.com',\r\n      //         pass: 'your_email_password'\r\n      //     }\r\n      // });\r\n  \r\n      // // setup email data with unicode symbols\r\n      // let mailOptions = {\r\n      //     from: 'your_email@gmail.com', // sender address\r\n      //     to: 'recipient_email@example.com', // list of receivers\r\n      //     subject: 'Test email', // Subject line\r\n      //     text: 'Hello world!', // plain text body\r\n      //     html: '<b>Hello world!</b>' // html body\r\n      // };\r\n  \r\n      // // send mail with defined transport object\r\n      // transporter.sendMail(mailOptions, (error, info) => {\r\n      //     if (error) {\r\n      //         return console.log(error);\r\n      //     }\r\n      //     console.log('Message sent: %s', info.messageId);\r\n      // });\r\n      // //option 2\r\n      // axios.post('/send-email', {\r\n      //   email: email\r\n      // }, {\r\n      //   headers: {\r\n      //   'Content-type': 'application/json; charset=UTF-8' } \r\n      // })\r\n      // .then((response) => {\r\n      //   console.log(response.data.message);\r\n      // })\r\n      // .catch((error) => {\r\n      //   console.error(error.response.data.error);\r\n      // });\r\n      var txt1=node.getNextResponse().children[0].text;\r\n      const message1 = this.createChatBotMessage(txt1);\r\n      this.addMessageToState(message1,node);\r\n  \r\n      var txt2=node.getNextResponse().children[0].children[0].text;\r\n      const message2 = this.createChatBotMessage(\r\n        txt2,\r\n        {\r\n          widget: \"approval\",\r\n        }\r\n      );\r\n      node.setHistoryChat([...node.getHistoryChat(),{user:email},{bot:[txt1,txt2]}])\r\n      console.log(\"history \",node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0].children[0])\r\n      this.addMessageToState(message2,node);\r\n    }\r\n  }\r\n\r\n  handleAccuracyLevel(node,opts){\r\n    var tempNodeObject={...node.getAccuracyNode()}\r\n    node.setNextResponse(tempNodeObject)\r\n    if(opts.includes(\"Experience level\")){\r\n      this.experienceWidget(node)\r\n    }else if(opts.includes(\"Desired city\")){\r\n      this.cityWidget(node)\r\n    }else if(opts.includes(\"Job requirements\")){\r\n      document.documentElement.style.setProperty('--button-visibility', 'visible');\r\n      this.requirementsWidget(node)\r\n    }else if(opts.includes(\"Job title\")){\r\n      this.jobTitleTypingWidget(node)\r\n    }else{\r\n      //server1--->server\r\n      //server0--->self_search\r\n      if(node.getIsJobAccuracy()===1){\r\n        console.log(\"server match\");\r\n        this.accurateJobsWidget(node)\r\n      } else {\r\n        //קריאה לסיום\r\n        this.selfSearch(node,{flag:\"noAccuracy\"});\r\n      }\r\n    }\r\n  }\r\n\r\n  experienceWidget(node){\r\n    var txt=node.getNextResponse().children[3].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"experienceLevel\",\r\n      }\r\n    );\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[txt]}])\r\n    // console.log(\"history \",node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[3])\r\n    this.addMessageToState(message,node);\r\n  }\r\n\r\n  handleExperienceLevel(node,opts){\r\n    if(opts[0]!==\"Other\"){\r\n      node.setIsJobAccuracy(1);\r\n    }\r\n    node.setSelected({...node.getSelected(),\"experience level\":opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts}])\r\n    console.log(\"history in hanExp \",node.getHistoryChat());\r\n    //remove 'Experience level' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(node.getAccuracyOptions().filter((selectedOption) => selectedOption !== \"Experience level\"))\r\n    this.handleAccuracyLevel(node,node.getAccuracyOptions())\r\n  }\r\n\r\n  cityWidget(node){\r\n    var txt=node.getNextResponse().children[1].text;\r\n    const message = this.createChatBotMessage(\r\n      txt,\r\n      {\r\n        widget: \"cities\",\r\n      }\r\n    );\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[txt]}])\r\n    node.setNextResponse(node.getNextResponse().children[1])\r\n    console.log(\"history in cityWidget \",node.getHistoryChat());\r\n    this.addMessageToState(message,node);   \r\n  }\r\n\r\n  handleCities(node,opts){\r\n    if(opts[0]!==\"Other\"){\r\n      node.setIsJobAccuracy(1);\r\n    }\r\n    node.setSelected({...node.getSelected(),\"cities\":opts})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:opts}])\r\n    console.log(\"history in hanCities \",node.getHistoryChat());\r\n    //remove 'Desired city' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(node.getAccuracyOptions().filter((selectedOption) => selectedOption !== \"Desired city\"))\r\n    this.handleAccuracyLevel(node,node.getAccuracyOptions())\r\n  }\r\n\r\n  requirementsWidget(node){\r\n    var txt=node.getNextResponse().children[2].text;\r\n    const message = this.createChatBotMessage(txt);\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[txt]}])\r\n    node.setNextResponse(node.getNextResponse().children[2])\r\n    console.log(\"history in requirementsWidget \",node.getHistoryChat());\r\n    node.setIsRequirements(1);\r\n    this.addMessageToState(message,node); \r\n  }\r\n\r\n  handleRequirements(node,msg){\r\n    document.documentElement.style.setProperty('--button-visibility', 'hidden');\r\n    //typing about job requirements is stopped \r\n    node.setIsRequirements(0);\r\n\r\n    //unclear-->0 ???????\r\n    node.setIsJobAccuracy(1);\r\n\r\n    node.setSelected({...node.getSelected(),\"job Requirements\":msg})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:[msg]}])\r\n    console.log(\"history in handleRequirements \",node.getHistoryChat());\r\n    console.log(\"selected in handleRequirements \",node.getSelected());\r\n    //remove 'Job requirements' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(node.getAccuracyOptions().filter((selectedOption) => selectedOption !== \"Job requirements\"))\r\n    this.handleAccuracyLevel(node,node.getAccuracyOptions())\r\n  }\r\n\r\n  jobTitleTypingWidget(node){\r\n    var txt=node.getNextResponse().children[4].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"jobTitleTyping\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(),{bot:[txt]}])\r\n    node.setNextResponse(node.getNextResponse().children[4])\r\n    console.log(\"history in jobTitleTypingWidgetTyping \",node.getHistoryChat());\r\n    this.addMessageToState(message,node); \r\n  }\r\n  handleJobTitleTyping(node,msg){\r\n    //unclear-->0 ???????\r\n    node.setIsJobAccuracy(1);\r\n\r\n    node.setSelected({...node.getSelected(),\"additional JobTitles\":msg})\r\n    node.setHistoryChat([...node.getHistoryChat(),{user:[msg]}])\r\n    console.log(\"history in handleIsJobTitleTyping \",node.getHistoryChat());\r\n    console.log(\"selected in handleIsJobTitleTyping \",node.getSelected());\r\n    //remove 'Job title' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(node.getAccuracyOptions().filter((selectedOption) => selectedOption !== \"Job title\"))\r\n    this.handleAccuracyLevel(node,node.getAccuracyOptions())\r\n  }\r\n\r\n  accurateJobsWidget(node){\r\n    //asking to wait\r\n    var txt1=node.getNextResponse().children[1].children[1].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1,node);\r\n\r\n    //server calculating jobs...\r\n    console.log(\"new selected \",node.getSelected())\r\n    var responses = node.getSelected()\r\n    axios.post(\"/getsecondjobs\", {\r\n      responses: responses\r\n    }, {\r\n      headers: {\r\n      'Content-type': 'application/json; charset=UTF-8' } \r\n    })\r\n    \r\n    .then((response) => {\r\n      if (response.data.success) {\r\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\r\n        // Add a message for each job to the chatbot's message history\r\n        // response.data.list_jobs.forEach((job) => {\r\n        //   const jobMessage = this.createChatBotMessage(\r\n        //     `Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}`\r\n        //   );\r\n        //   this.addMessageToState(jobMessage,node);\r\n        // });\r\n        // while(response.data.list_jobs===[]){}\r\n\r\n        // node.setJobs(response.data.list_jobs);\r\n        node.setJobs(response.data.list_jobs.map((job,index)=>{return {...job,id:index}}));\r\n        //node.setJobs([\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"Nothing fits\"]);\r\n        if(node.getSavedInDB()[\"displayed jobs\"]){\r\n          node.setSavedInDB({...node.getSavedInDB(),\"displayed jobs\":node.getSavedInDB()[\"displayed jobs\"].concat(node.getJobs())});\r\n        }else{\r\n          node.setSavedInDB({...node.getSavedInDB(),\"displayed jobs\":node.getJobs()});\r\n        }\r\n        \r\n        //לא לשכוח לשרשר את העבודות החדשות שהוצעו????????אולי לעשות רשימה חדשה שהיא העבודות סבב 2\r\n        //continute\r\n        if(response.data.list_jobs.length!==0){\r\n          var txt2=node.getNextResponse().children[1].children[1].children[0].text;\r\n          const message2 = this.createChatBotMessage(\r\n            txt2,\r\n            {\r\n              widget: \"jobs\",\r\n            }\r\n          );\r\n          node.setHistoryChat([...node.getHistoryChat(),{bot:[txt1,txt2]}])\r\n          console.log(\"history in accurate jobs handle \",node.getHistoryChat());\r\n          node.setNextResponse(node.getNextResponse().children[1].children[1].children[0])\r\n          this.addMessageToState(message2,node);\r\n        }else{\r\n          var txt2=\"No jobs found\";\r\n          const message2 = this.createChatBotMessage(txt2);\r\n          node.setHistoryChat([...node.getHistoryChat(),{bot:[txt1,txt2]}])\r\n          console.log(\"history \",node.getHistoryChat());\r\n          node.setNextResponse(node.getNextResponse().children[1].children[1].children[0])\r\n          this.addMessageToState(message2,node);\r\n\r\n          //continute to accuracy phase\r\n          node.incCountNotFits(node.getCountNotFits());\r\n          this.handleJob(node,[\"No jobs\"]);\r\n        }\r\n\r\n      } else {\r\n        console.log(\"Error getting matching jobs: \", response.data.message);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Error getting matching jobs: \", err.message);\r\n    });\r\n  }\r\n\r\n  addMessageToState = (message,node) => {\r\n    this.setState((prevState) =>{\r\n      return {\r\n        ...prevState,\r\n        messages: [...prevState.messages, message],\r\n        head: node\r\n        };\r\n    });\r\n  };\r\n}\r\n\r\nexport default ActionProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}