{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Cities.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./Options.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailDisplay = props => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [submitted, setSubmitted] = useState(true);\n\n  //set the updated existing cities from the jobs DB\n  useEffect(() => {\n    axios.post(\"/cities\", {\n      areas: props.node.getSelected().areas\n    }, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => {\n      if (response.data.success) {\n        setOptions([...response.data.cities, \"Other\"]);\n      } else {\n        console.log(\"Server did not returned cities\");\n      }\n    }).catch(err => {\n      console.log(\"Error getting cities\", err.message);\n    });\n  }, []);\n  const handleOptionChange = event => {\n    const option = event.target.value;\n    if (selectedOptions.includes(option)) {\n      setSelectedOptions(selectedOptions.filter(selectedOption => selectedOption !== option));\n    } else {\n      setSelectedOptions([...selectedOptions, option]);\n    }\n  };\n  const isFormValid = () => {\n    return Object.values(selectedOptions).some(isChecked => isChecked) && submitted;\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"Selected Options1: \", selectedOptions);\n    // handle submission logic\n    setSubmitted(false);\n    if (selectedOptions.includes(\"Other\")) {\n      props.actionProvider.handleCities(props.node, [\"Other\"]);\n    } else {\n      props.actionProvider.handleCities(props.node, selectedOptions);\n    }\n  };\n  //We used chatGpt to divide the cities into 3 columns\n  const columnSize = Math.ceil(options.length / 3);\n  const columns = [options.slice(0, columnSize), options.slice(columnSize, columnSize * 2), options.slice(columnSize * 2)];\n  const renderCheckbox = opt => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"checkbox\",\n        type: \"checkbox\",\n        value: opt,\n        onChange: handleOptionChange,\n        disabled: opt !== \"Other\" && selectedOptions.includes(\"Other\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), opt]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, opt, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n  const renderColumns = (columnCities, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      flex: 1,\n      justifyContent: 'space-between',\n      alignItems: 'flex-start'\n    },\n    children: columnCities.map(city => renderCheckbox(city))\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        children: columns.map((columnCities, index) => renderColumns(columnCities, index))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"option-button\",\n      disabled: !isFormValid(),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(EmailDisplay, \"rlxObq25s13PAXVcX2LJt2VfWAc=\");\n_c = EmailDisplay;\nexport default EmailDisplay;\nvar _c;\n$RefreshReg$(_c, \"EmailDisplay\");","map":{"version":3,"names":["axios","React","useState","useEffect","EmailDisplay","props","options","setOptions","selectedOptions","setSelectedOptions","submitted","setSubmitted","post","areas","node","getSelected","headers","then","response","data","success","cities","console","log","catch","err","message","handleOptionChange","event","option","target","value","includes","filter","selectedOption","isFormValid","Object","values","some","isChecked","handleSubmit","preventDefault","actionProvider","handleCities","columnSize","Math","ceil","length","columns","slice","renderCheckbox","opt","renderColumns","columnCities","index","flex","justifyContent","alignItems","map","city","display"],"sources":["/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Cities.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst EmailDisplay = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n\r\n  //set the updated existing cities from the jobs DB\r\n  useEffect(\r\n    ()=>{\r\n      axios.post(\"/cities\",{\r\n        areas:props.node.getSelected().areas\r\n      }, {\r\n        headers: {\r\n        'Content-type': 'application/json; charset=UTF-8' } \r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          setOptions([...response.data.cities,\"Other\"])\r\n        } else {\r\n          console.log(\"Server did not returned cities\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error getting cities\", err.message);\r\n      });\r\n    }\r\n    ,[]);\r\n  \r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options1: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Other\")){\r\n      props.actionProvider.handleCities(props.node,[\"Other\"]);\r\n    }else{\r\n      props.actionProvider.handleCities(props.node,selectedOptions);\r\n    }\r\n  };\r\n  //We used chatGpt to divide the cities into 3 columns\r\n  const columnSize = Math.ceil(options.length / 3);\r\n  const columns = [\r\n    options.slice(0, columnSize),\r\n    options.slice(columnSize, columnSize * 2),\r\n    options.slice(columnSize * 2),\r\n  ];\r\n\r\n  const renderCheckbox = (opt) => (\r\n    <div key={opt}>\r\n      <label>\r\n      <input\r\n      className=\"checkbox\"\r\n      type=\"checkbox\"\r\n      value={opt}\r\n      onChange={handleOptionChange}\r\n      disabled={(opt!==\"Other\")&&selectedOptions.includes(\"Other\")} />\r\n      {opt}\r\n      </label>\r\n    </div>\r\n  );\r\n\r\n  const renderColumns = (columnCities,index) => (\r\n    <div key={index} style={{ flex: 1, justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n      {columnCities.map(city => renderCheckbox(city))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <div style={{ display: 'flex' }}>\r\n        {\r\n          columns.map((columnCities,index) => renderColumns(columnCities,index))\r\n        }\r\n        </div>\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>\r\n  );\r\n\r\n};\r\n\r\nexport default EmailDisplay;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}