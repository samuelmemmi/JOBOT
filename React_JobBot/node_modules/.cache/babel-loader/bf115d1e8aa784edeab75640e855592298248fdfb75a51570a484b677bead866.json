{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rachel\\\\source\\\\repos\\\\JOBOT\\\\JOBOT\\\\React_JobBot\\\\src\\\\pages\\\\adminArea\\\\viewChatFlow.jsx\";\n// import React, { useState } from 'react';\n// // import { SvgUri } from 'react-native-svg';\n// // import { ReactComponent as Logo } from \"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\";\n\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\nimport './EditableList.css';\n\n// const TreeNode = ({ nod }) => {\n//   const [isExpanded, setExpanded] = useState(false);\n//     const [node, setNode] = useState(nod.text)\n\n//   const handleEdit = (text) => {\n//     setNode({...node, text:{text}});\n//   }\n\n//   return (\n//     <ul className=\"editable-list\">\n//       <li>\n//         {node+\": \"}<br/>\n//         {/* {node.text} */}\n//         <input\n//         className=\"textContent\"\n//         type=\"text\"\n//         value={node}\n//         onChange={(e) => handleEdit(node, e.target.value)}/>\n//         <br/>\n//         {node.children && node.children.length > 0 && (\n//           <>\n//               <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\n//               {isExpanded ? 'Collapse' : 'Expand'}\n//               </button>\n//           </>\n//         )}\n//         {/* <button className=\"edit-button\">Edit</button> */}\n//       </li>\n//       {isExpanded &&\n//         node.children.map((childNode, index) => (\n//           <>\n//           {setNode(childNode)}\n//           <TreeNode key={index} nod={childNode} />\n//           </>\n\n//         ))}\n//     </ul>\n//   );\n// };\n\n// const Tree = ({ data }) => {\n//   return (\n//   <>\n//   <h2 className=\"title\">Editable Chat flow</h2>\n//   {/* <SvgUri\n//     width=\"100%\"\n//     height=\"100%\"\n//     uri=\"./flowTry.svg\"\n//   /> */}\n//     {/* <div className=\"App\">\n//       <img src=\"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\" alt=\"Your SVG\" />\n//     </div> */}\n//   <TreeNode nod={data} />;\n//   </>\n//   )\n// };\n\n// const ViewChatFlow = () => {\n//   return (\n//     <div>\n//       <Tree data={chatFlow} />\n//     </div>\n//   );\n// };\n\n// export default ViewChatFlow;\n//above Mine\n\n// import React, { useState } from 'react';\n// import './EditableList.css';\n\n// function EditableList() {\n//   const [items, setItems] = useState([\n//     { id: 1, text: 'Item 1' },\n//     { id: 2, text: 'Item 2' },\n//     { id: 3, text: 'Item 3' },\n//   ]);\n\n//   const handleEdit = (id, text) => {\n//     setItems(\n//       items.map((item) => {\n//         if (item.id === id) {\n//           return { ...item, text };\n//         } else {\n//           return item;\n//         }\n//       })\n//     );\n//   };\n\n//   const handleDelete = (id) => {\n//     setItems(items.filter((item) => item.id !== id));\n//   };\n\n//   const handleAdd = () => {\n//     const newItem = {\n//       id: Math.max(...items.map((item) => item.id)) + 1,\n//       text: '',\n//     };\n//     setItems([...items, newItem]);\n//   };\n\n//   return (\n//     <div className=\"editable-list\">\n//       <h2>Editable List</h2>\n//       <ul>\n//         {items.map((item) => (\n//           <li key={item.id}>\n//             <input\n//               type=\"text\"\n//               value={item.text}\n//               onChange={(e) => handleEdit(item.id, e.target.value)}\n//             />\n//             <button onClick={() => handleDelete(item.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//       <button className=\"add-button\" onClick={handleAdd}>\n//         Add Item\n//       </button>\n//     </div>\n//   );\n\n// }\n\n// export default EditableList;\n\n//Below New\n\nimport React, { useState } from 'react';\nimport chatFlow from '../chatBotLogic/convert_tree_to_json.js';\nimport \"./h.css\";\n\n// const treeObject = {\n//   text: \"Top Level\",\n//   children: [\n//     {\n//       text: \"Child 1\",\n//       children: [\n//         {\n//           text: \"Grandchild 1\",\n//           children: []\n//         },\n//         {\n//           text: \"Grandchild 2\",\n//           children: []\n//         }\n//       ]\n//     },\n//     {\n//       text: \"Child 2\",\n//       children: [\n//         {\n//           text: \"Grandchild 3\",\n//           children: []\n//         },\n//         {\n//           text: \"Grandchild 4\",\n//           children: []\n//         }\n//       ]\n//     }\n//   ]\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass LoginForm extends Component {\n  // var ch=chatFlow;\n  constructor() {\n    this.chat = chatFlow;\n  }\n  handleTextChange(event) {\n    if (isFinishEdit) {\n      // editedNode.text=event.target.value\n      setEditedNode({\n        ...editedNode,\n        text: event.target.value\n      });\n    }\n    // if(isFinishEdit){\n    //   setEditedText(event.target.value);\n    // }\n  }\n\n  editableTree(node) {\n    // const [editedText, setEditedText] = useState(text);\n    const [editedNode, setEditedNode] = useState(node);\n    const [isExpanded, setExpanded] = useState(false);\n    const [isFinishEdit, setFinishEdit] = useState(false);\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"vertix\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"age\",\n          type: \"text\",\n          value: editedNode.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"person\",\n          type: \"text\",\n          value: editedNode.text,\n          onChange: this.handleTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          onClick: () => setFinishEdit(!isFinishEdit),\n          children: isFinishEdit ? 'Finish Edit' : 'Edit Formulation'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 7\n        }, this), editedNode.children && editedNode.children.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-button\",\n            onClick: () => setExpanded(!isExpanded),\n            children: isExpanded ? 'Collapse' : 'Expand'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }, this), isExpanded && editedNode.children && editedNode.children.length > 0 && editedNode.children.map((child, index) => /*#__PURE__*/_jsxDEV(EditableTree, {\n        node: child,\n        text: child.text,\n        children: child.children,\n        description: child.title\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)), editedNode.text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }, this);\n  }\n}\nexport default ViewChatFlow;","map":{"version":3,"names":["React","useState","chatFlow","LoginForm","Component","constructor","chat","handleTextChange","event","isFinishEdit","setEditedNode","editedNode","text","target","value","editableTree","node","isExpanded","setExpanded","setFinishEdit","title","children","length","map","child","index","ViewChatFlow"],"sources":["C:/Users/Rachel/source/repos/JOBOT/JOBOT/React_JobBot/src/pages/adminArea/viewChatFlow.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// // import { SvgUri } from 'react-native-svg';\r\n// // import { ReactComponent as Logo } from \"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\";\r\n\r\n\r\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\r\nimport './EditableList.css';\r\n\r\n\r\n// const TreeNode = ({ nod }) => {\r\n//   const [isExpanded, setExpanded] = useState(false);\r\n//     const [node, setNode] = useState(nod.text)\r\n\r\n//   const handleEdit = (text) => {\r\n//     setNode({...node, text:{text}});\r\n//   }\r\n\r\n//   return (\r\n//     <ul className=\"editable-list\">\r\n//       <li>\r\n//         {node+\": \"}<br/>\r\n//         {/* {node.text} */}\r\n//         <input\r\n//         className=\"textContent\"\r\n//         type=\"text\"\r\n//         value={node}\r\n//         onChange={(e) => handleEdit(node, e.target.value)}/>\r\n//         <br/>\r\n//         {node.children && node.children.length > 0 && (\r\n//           <>\r\n//               <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\r\n//               {isExpanded ? 'Collapse' : 'Expand'}\r\n//               </button>\r\n//           </>\r\n//         )}\r\n//         {/* <button className=\"edit-button\">Edit</button> */}\r\n//       </li>\r\n//       {isExpanded &&\r\n//         node.children.map((childNode, index) => (\r\n//           <>\r\n//           {setNode(childNode)}\r\n//           <TreeNode key={index} nod={childNode} />\r\n//           </>\r\n\r\n//         ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n\r\n// const Tree = ({ data }) => {\r\n//   return (\r\n//   <>\r\n//   <h2 className=\"title\">Editable Chat flow</h2>\r\n//   {/* <SvgUri\r\n//     width=\"100%\"\r\n//     height=\"100%\"\r\n//     uri=\"./flowTry.svg\"\r\n//   /> */}\r\n//     {/* <div className=\"App\">\r\n//       <img src=\"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\" alt=\"Your SVG\" />\r\n//     </div> */}\r\n//   <TreeNode nod={data} />;\r\n//   </>\r\n//   )\r\n// };\r\n\r\n// const ViewChatFlow = () => {\r\n//   return (\r\n//     <div>\r\n//       <Tree data={chatFlow} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewChatFlow;\r\n//above Mine\r\n\r\n// import React, { useState } from 'react';\r\n// import './EditableList.css';\r\n\r\n// function EditableList() {\r\n//   const [items, setItems] = useState([\r\n//     { id: 1, text: 'Item 1' },\r\n//     { id: 2, text: 'Item 2' },\r\n//     { id: 3, text: 'Item 3' },\r\n//   ]);\r\n\r\n//   const handleEdit = (id, text) => {\r\n//     setItems(\r\n//       items.map((item) => {\r\n//         if (item.id === id) {\r\n//           return { ...item, text };\r\n//         } else {\r\n//           return item;\r\n//         }\r\n//       })\r\n//     );\r\n//   };\r\n\r\n//   const handleDelete = (id) => {\r\n//     setItems(items.filter((item) => item.id !== id));\r\n//   };\r\n\r\n//   const handleAdd = () => {\r\n//     const newItem = {\r\n//       id: Math.max(...items.map((item) => item.id)) + 1,\r\n//       text: '',\r\n//     };\r\n//     setItems([...items, newItem]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"editable-list\">\r\n//       <h2>Editable List</h2>\r\n//       <ul>\r\n//         {items.map((item) => (\r\n//           <li key={item.id}>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={item.text}\r\n//               onChange={(e) => handleEdit(item.id, e.target.value)}\r\n//             />\r\n//             <button onClick={() => handleDelete(item.id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <button className=\"add-button\" onClick={handleAdd}>\r\n//         Add Item\r\n//       </button>\r\n//     </div>\r\n//   );\r\n\r\n// }\r\n\r\n// export default EditableList;\r\n\r\n//Below New\r\n\r\nimport React, { useState } from 'react';\r\nimport chatFlow from '../chatBotLogic/convert_tree_to_json.js';\r\nimport \"./h.css\"\r\n\r\n\r\n// const treeObject = {\r\n//   text: \"Top Level\",\r\n//   children: [\r\n//     {\r\n//       text: \"Child 1\",\r\n//       children: [\r\n//         {\r\n//           text: \"Grandchild 1\",\r\n//           children: []\r\n//         },\r\n//         {\r\n//           text: \"Grandchild 2\",\r\n//           children: []\r\n//         }\r\n//       ]\r\n//     },\r\n//     {\r\n//       text: \"Child 2\",\r\n//       children: [\r\n//         {\r\n//           text: \"Grandchild 3\",\r\n//           children: []\r\n//         },\r\n//         {\r\n//           text: \"Grandchild 4\",\r\n//           children: []\r\n//         }\r\n//       ]\r\n//     }\r\n//   ]\r\n// };\r\nclass LoginForm extends Component {\r\n// var ch=chatFlow;\r\nconstructor(){\r\n  this.chat=chatFlow;\r\n}\r\n handleTextChange(event){\r\n  if(isFinishEdit){\r\n    // editedNode.text=event.target.value\r\n    setEditedNode({...editedNode,text:event.target.value})\r\n  }\r\n  // if(isFinishEdit){\r\n  //   setEditedText(event.target.value);\r\n  // }\r\n};\r\n  editableTree(node){\r\n  // const [editedText, setEditedText] = useState(text);\r\n  const [editedNode, setEditedNode] = useState(node);\r\n  const [isExpanded, setExpanded] = useState(false);\r\n  const [isFinishEdit, setFinishEdit]= useState(false);\r\n  return (\r\n    <ul>\r\n      <li className='vertix'>\r\n\r\n      <input className=\"age\" type=\"text\" value={editedNode.title} />\r\n\r\n      <input className=\"person\" type=\"text\" value={editedNode.text} onChange={this.handleTextChange} />\r\n      \r\n      {/* <br/> */}\r\n\r\n      <button className=\"add-button\" onClick={() => setFinishEdit(!isFinishEdit)}>\r\n          {isFinishEdit ? 'Finish Edit' : 'Edit Formulation'}\r\n      </button>\r\n\r\n      {editedNode.children && editedNode.children.length > 0 && (\r\n      <>\r\n          <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\r\n          {isExpanded ? 'Collapse' : 'Expand'}\r\n          </button>\r\n      </>\r\n      )}\r\n\r\n      </li>\r\n      {isExpanded && editedNode.children&&editedNode.children.length > 0&&(editedNode.children.map((child, index) => (\r\n        <EditableTree\r\n          key={index}\r\n          node={child}\r\n          text={child.text}\r\n          children={child.children}\r\n          description={child.title}\r\n        />\r\n      )))}\r\n            {editedNode.text}\r\n    </ul>\r\n  );\r\n};\r\n\r\nViewChatFlow = () => {\r\n  return (\r\n    <div className=\"pedigree-tree\">\r\n      EditableTree(this.chat);\r\n    </div>\r\n  );\r\n};\r\n}\r\nexport default ViewChatFlow;\r\n\r\n\r\n"],"mappings":";AAAA;AACA;AACA;;AAGA;AACA,OAAO,oBAAoB;;AAG3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,yCAAyC;AAC9D,OAAO,SAAS;;AAGhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,MAAMC,SAAS,SAASC,SAAS,CAAC;EAClC;EACAC,WAAW,GAAE;IACX,IAAI,CAACC,IAAI,GAACJ,QAAQ;EACpB;EACCK,gBAAgB,CAACC,KAAK,EAAC;IACtB,IAAGC,YAAY,EAAC;MACd;MACAC,aAAa,CAAC;QAAC,GAAGC,UAAU;QAACC,IAAI,EAACJ,KAAK,CAACK,MAAM,CAACC;MAAK,CAAC,CAAC;IACxD;IACA;IACA;IACA;EACF;;EACEC,YAAY,CAACC,IAAI,EAAC;IAClB;IACA,MAAM,CAACL,UAAU,EAAED,aAAa,CAAC,GAAGT,QAAQ,CAACe,IAAI,CAAC;IAClD,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;IACjD,MAAM,CAACQ,YAAY,EAAEU,aAAa,CAAC,GAAElB,QAAQ,CAAC,KAAK,CAAC;IACpD,oBACE;MAAA,wBACE;QAAI,SAAS,EAAC,QAAQ;QAAA,wBAEtB;UAAO,SAAS,EAAC,KAAK;UAAC,IAAI,EAAC,MAAM;UAAC,KAAK,EAAEU,UAAU,CAACS;QAAM;UAAA;UAAA;UAAA;QAAA,QAAG,eAE9D;UAAO,SAAS,EAAC,QAAQ;UAAC,IAAI,EAAC,MAAM;UAAC,KAAK,EAAET,UAAU,CAACC,IAAK;UAAC,QAAQ,EAAE,IAAI,CAACL;QAAiB;UAAA;UAAA;UAAA;QAAA,QAAG,eAIjG;UAAQ,SAAS,EAAC,YAAY;UAAC,OAAO,EAAE,MAAMY,aAAa,CAAC,CAACV,YAAY,CAAE;UAAA,UACtEA,YAAY,GAAG,aAAa,GAAG;QAAkB;UAAA;UAAA;UAAA;QAAA,QAC7C,EAERE,UAAU,CAACU,QAAQ,IAAIV,UAAU,CAACU,QAAQ,CAACC,MAAM,GAAG,CAAC,iBACtD;UAAA,uBACI;YAAQ,SAAS,EAAC,YAAY;YAAC,OAAO,EAAE,MAAMJ,WAAW,CAAC,CAACD,UAAU,CAAE;YAAA,UACtEA,UAAU,GAAG,UAAU,GAAG;UAAQ;YAAA;YAAA;YAAA;UAAA;QAC1B,iBAEZ;MAAA;QAAA;QAAA;QAAA;MAAA,QAEI,EACJA,UAAU,IAAIN,UAAU,CAACU,QAAQ,IAAEV,UAAU,CAACU,QAAQ,CAACC,MAAM,GAAG,CAAC,IAAGX,UAAU,CAACU,QAAQ,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACxG,QAAC,YAAY;QAEX,IAAI,EAAED,KAAM;QACZ,IAAI,EAAEA,KAAK,CAACZ,IAAK;QACjB,QAAQ,EAAEY,KAAK,CAACH,QAAS;QACzB,WAAW,EAAEG,KAAK,CAACJ;MAAM,GAJpBK,KAAK;QAAA;QAAA;QAAA;MAAA,QAMb,CAAE,EACId,UAAU,CAACC,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACnB;EAET;AASA;AACA,eAAec,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}