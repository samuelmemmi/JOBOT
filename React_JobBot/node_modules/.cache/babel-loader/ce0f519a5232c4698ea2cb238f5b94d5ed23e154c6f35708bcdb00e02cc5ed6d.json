{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/DisplaySelectedJobs.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport JobCard from \"./JobCard.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst filterObjectsById = (objects, selectedObjects) => {\n  let filteredObjects = [];\n  objects.map(obj => {\n    if (selectedObjects.includes(obj._id)) {\n      filteredObjects.push(obj);\n    }\n  });\n  return filteredObjects;\n};\nconst DisplaySelectedJobs = props => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [selectedJobId, setSelectedJobId] = useState(null);\n  useEffect(() => {\n    var jobs = props.node.getSavedInDB()[\"displayed jobs\"];\n    var selectedJobs = props.node.getSavedInDB()[\"selected jobs\"];\n    const selectedJobsDetails = filterObjectsById(jobs, selectedJobs);\n    setOptions(selectedJobsDetails);\n  }, []);\n  const onCardClick = id => {\n    setSelectedJobId(selectedJobId === id ? null : id);\n  };\n  const buttonsMarkup = options.map((job, index) => /*#__PURE__*/_jsxDEV(JobCard, {\n    job: job,\n    isSelected: job._id === selectedJobId,\n    onCardClick: onCardClick\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: buttonsMarkup\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n_s(DisplaySelectedJobs, \"AtcRFKeD0sTn8nt1QRKZm+1GRFg=\");\n_c = DisplaySelectedJobs;\nexport default DisplaySelectedJobs;\nvar _c;\n$RefreshReg$(_c, \"DisplaySelectedJobs\");","map":{"version":3,"names":["React","useState","useEffect","JobCard","jsxDEV","_jsxDEV","filterObjectsById","objects","selectedObjects","filteredObjects","map","obj","includes","_id","push","DisplaySelectedJobs","props","_s","options","setOptions","selectedJobId","setSelectedJobId","jobs","node","getSavedInDB","selectedJobs","selectedJobsDetails","onCardClick","id","buttonsMarkup","job","index","isSelected","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/DisplaySelectedJobs.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport JobCard from \"./JobCard.jsx\";\r\n\r\nconst filterObjectsById = (objects, selectedObjects) => {\r\n  let filteredObjects = [];\r\n  objects.map((obj) => {\r\n    if (selectedObjects.includes(obj._id)) {\r\n      filteredObjects.push(obj);\r\n    }\r\n  });\r\n  return filteredObjects;\r\n};\r\n\r\nconst DisplaySelectedJobs = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedJobId, setSelectedJobId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    var jobs = props.node.getSavedInDB()[\"displayed jobs\"];\r\n    var selectedJobs = props.node.getSavedInDB()[\"selected jobs\"];\r\n    const selectedJobsDetails = filterObjectsById(jobs, selectedJobs);\r\n    setOptions(selectedJobsDetails);\r\n  }, []);\r\n\r\n  const onCardClick = (id) => {\r\n    setSelectedJobId(selectedJobId === id ? null : id);\r\n  };\r\n\r\n  const buttonsMarkup = options.map(\r\n    (job, index) => (\r\n      <JobCard\r\n        key={index}\r\n        job={job}\r\n        isSelected={job._id === selectedJobId}\r\n        onCardClick={onCardClick}\r\n      />\r\n    ),\r\n    []\r\n  );\r\n\r\n  return <div>{buttonsMarkup}</div>;\r\n};\r\n\r\nexport default DisplaySelectedJobs;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,OAAO,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,iBAAiB,GAAGA,CAACC,OAAO,EAAEC,eAAe,KAAK;EACtD,IAAIC,eAAe,GAAG,EAAE;EACxBF,OAAO,CAACG,GAAG,CAAEC,GAAG,IAAK;IACnB,IAAIH,eAAe,CAACI,QAAQ,CAACD,GAAG,CAACE,GAAG,CAAC,EAAE;MACrCJ,eAAe,CAACK,IAAI,CAACH,GAAG,CAAC;IAC3B;EACF,CAAC,CAAC;EACF,OAAOF,eAAe;AACxB,CAAC;AAED,MAAMM,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd,IAAIoB,IAAI,GAAGN,KAAK,CAACO,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,gBAAgB,CAAC;IACtD,IAAIC,YAAY,GAAGT,KAAK,CAACO,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC;IAC7D,MAAME,mBAAmB,GAAGpB,iBAAiB,CAACgB,IAAI,EAAEG,YAAY,CAAC;IACjEN,UAAU,CAACO,mBAAmB,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAIC,EAAE,IAAK;IAC1BP,gBAAgB,CAACD,aAAa,KAAKQ,EAAE,GAAG,IAAI,GAAGA,EAAE,CAAC;EACpD,CAAC;EAED,MAAMC,aAAa,GAAGX,OAAO,CAACR,GAAG,CAC/B,CAACoB,GAAG,EAAEC,KAAK,kBACT1B,OAAA,CAACF,OAAO;IAEN2B,GAAG,EAAEA,GAAI;IACTE,UAAU,EAAEF,GAAG,CAACjB,GAAG,KAAKO,aAAc;IACtCO,WAAW,EAAEA;EAAY,GAHpBI,KAAK;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIX,CACF,EACD,EACF,CAAC;EAED,oBAAO/B,OAAA;IAAAgC,QAAA,EAAMR;EAAa;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACnC,CAAC;AAACnB,EAAA,CA5BIF,mBAAmB;AAAAuB,EAAA,GAAnBvB,mBAAmB;AA8BzB,eAAeA,mBAAmB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}