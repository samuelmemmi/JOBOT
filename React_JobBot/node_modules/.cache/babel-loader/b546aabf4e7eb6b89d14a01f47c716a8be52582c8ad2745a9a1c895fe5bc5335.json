{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rachel\\\\source\\\\repos\\\\JOBOT\\\\JOBOT\\\\React_JobBot\\\\src\\\\pages\\\\chatBotLogic\\\\components\\\\Options\\\\FieldOptions.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./Options.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FieldOptions = props => {\n  _s();\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    setOptions(props.node.getNextResponse().children[0].options);\n  }, []); //maybe props.node_if_options>0\n\n  // function whichHandler(opt) {\n  //   switch(opt) {\n  //     case \"Other\":\n  //       return (() => {props.actionProvider.handleOtherField(props.node,opt);});\n  //     default:\n  //       return (() => {props.actionProvider.handleField(props.node,opt);});\n  //   }\n  // }\n\n  // var i=1;\n  // const buttonsMarkup = options.map((opt) =>{\n  //   return (        \n  //     <button key={i++} onClick={whichHandler(opt)} className=\"option-button\">\n  //     {opt}\n  //     </button>);\n  // },[]);\n\n  // return <div className=\"options-container\">{buttonsMarkup}</div>;\n  //$$$$$$$$$$$$$$$\n  // return (\n  //   <div>\n  //     <input type=\"radio\" value=\"Male\" name=\"gender\" defaultValue={\"Male\"}/> Male      \n  //   </div>\n  //   );\n\n  // const [selectedOption, setSelectedOption] = useState(\"\");\n  // const [submitted,setSubmitted]=useState(false);\n\n  // const handleOptionChange = (event) => {\n  //   const option = event.target.value;\n  //   if (selectedOption!==option) {\n  //     setSelectedOption(option);\n  //   }\n  // };\n\n  // const handleSubmit = (event) => {\n  //   event.preventDefault();\n  //   console.log(\"Selected Options radio: \", selectedOption);\n  //   // handle submission logic\n  //   setSubmitted(true);\n  //   // if(selectedOptions.length===0){\n  //   //   props.actionProvider.handleOtherField(props.node,[\"Other\"]);\n  //   //   return;\n  //   // }\n  //   switch(selectedOption) {\n  //     case \"Other\":\n  //       props.actionProvider.handleOtherField(props.node,selectedOption);\n  //       break;\n  //     default:\n  //       props.actionProvider.handleField(props.node,selectedOption);\n  //   }\n  // };\n\n  // return (\n  //   <form onSubmit={handleSubmit}>\n  //     <label>\n  //       {options.map((opt,index) =>{\n  //         return(\n  //         <label key={index}>\n  //           <br />\n  //           <input\n  //           type=\"radio\"\n  //           value={opt}\n  //           name=\"field\"\n  //           checked={selectedOption === opt}\n  //           onChange={handleOptionChange} \n  //           />\n  //           {opt}\n  //         </label>);\n  //       },[])\n  //       }\n  //     </label>\n  //     <br />\n  //     <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\n  //   </form>);\n  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^6\n\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const handleOptionChange = event => {\n    setSelectedOption(event.target.value);\n  };\n  const handleSubmit = () => {\n    // send final answer using selectedOption\n    console.log(selectedOption);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.names.map(name => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        id: name,\n        name: \"names\",\n        value: name,\n        checked: selectedOption === name,\n        onChange: handleOptionChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: name,\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(FieldOptions, \"7j5QKxWygRsDAEBfgbOnbZVy+U4=\");\n_c = FieldOptions;\nexport default FieldOptions;\nvar _c;\n$RefreshReg$(_c, \"FieldOptions\");","map":{"version":3,"names":["React","useState","useEffect","FieldOptions","props","options","setOptions","node","getNextResponse","children","selectedOption","setSelectedOption","handleOptionChange","event","target","value","handleSubmit","console","log","names","map","name"],"sources":["C:/Users/Rachel/source/repos/JOBOT/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/FieldOptions.jsx"],"sourcesContent":["import React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst FieldOptions = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().children[0].options)},[]);//maybe props.node_if_options>0\r\n\r\n  // function whichHandler(opt) {\r\n  //   switch(opt) {\r\n  //     case \"Other\":\r\n  //       return (() => {props.actionProvider.handleOtherField(props.node,opt);});\r\n  //     default:\r\n  //       return (() => {props.actionProvider.handleField(props.node,opt);});\r\n  //   }\r\n  // }\r\n\r\n  // var i=1;\r\n  // const buttonsMarkup = options.map((opt) =>{\r\n  //   return (        \r\n  //     <button key={i++} onClick={whichHandler(opt)} className=\"option-button\">\r\n  //     {opt}\r\n  //     </button>);\r\n  // },[]);\r\n\r\n  // return <div className=\"options-container\">{buttonsMarkup}</div>;\r\n  //$$$$$$$$$$$$$$$\r\n  // return (\r\n  //   <div>\r\n  //     <input type=\"radio\" value=\"Male\" name=\"gender\" defaultValue={\"Male\"}/> Male      \r\n  //   </div>\r\n  //   );\r\n\r\n    // const [selectedOption, setSelectedOption] = useState(\"\");\r\n    // const [submitted,setSubmitted]=useState(false);\r\n    \r\n    // const handleOptionChange = (event) => {\r\n    //   const option = event.target.value;\r\n    //   if (selectedOption!==option) {\r\n    //     setSelectedOption(option);\r\n    //   }\r\n    // };\r\n  \r\n    // const handleSubmit = (event) => {\r\n    //   event.preventDefault();\r\n    //   console.log(\"Selected Options radio: \", selectedOption);\r\n    //   // handle submission logic\r\n    //   setSubmitted(true);\r\n    //   // if(selectedOptions.length===0){\r\n    //   //   props.actionProvider.handleOtherField(props.node,[\"Other\"]);\r\n    //   //   return;\r\n    //   // }\r\n    //   switch(selectedOption) {\r\n    //     case \"Other\":\r\n    //       props.actionProvider.handleOtherField(props.node,selectedOption);\r\n    //       break;\r\n    //     default:\r\n    //       props.actionProvider.handleField(props.node,selectedOption);\r\n    //   }\r\n    // };\r\n  \r\n    // return (\r\n    //   <form onSubmit={handleSubmit}>\r\n    //     <label>\r\n    //       {options.map((opt,index) =>{\r\n    //         return(\r\n    //         <label key={index}>\r\n    //           <br />\r\n    //           <input\r\n    //           type=\"radio\"\r\n    //           value={opt}\r\n    //           name=\"field\"\r\n    //           checked={selectedOption === opt}\r\n    //           onChange={handleOptionChange} \r\n    //           />\r\n    //           {opt}\r\n    //         </label>);\r\n    //       },[])\r\n    //       }\r\n    //     </label>\r\n    //     <br />\r\n    //     <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    //   </form>);\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^6\r\n\r\n  const [selectedOption, setSelectedOption] = useState(\"\");\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // send final answer using selectedOption\r\n    console.log(selectedOption)\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {props.names.map((name) => (\r\n        <div key={name}>\r\n          <input\r\n            type=\"radio\"\r\n            id={name}\r\n            name=\"names\"\r\n            value={name}\r\n            checked={selectedOption === name}\r\n            onChange={handleOptionChange}\r\n          />\r\n          <label htmlFor={name}>{name}</label>\r\n        </div>\r\n      ))}\r\n      <button onClick={handleSubmit}>Submit</button>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default FieldOptions;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAExC,OAAO,eAAe;AAAC;AAEvB,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAA;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAI;IAACI,UAAU,CAACF,KAAK,CAACG,IAAI,CAACC,eAAe,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACJ,OAAO,CAAC;EAAA,CAAC,EAAC,EAAE,CAAC,CAAC;;EAEjF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEF,MAAM,CAACK,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMW,kBAAkB,GAAIC,KAAK,IAAK;IACpCF,iBAAiB,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAM;IACzB;IACAC,OAAO,CAACC,GAAG,CAACR,cAAc,CAAC;EAC7B,CAAC;EAED,oBACE;IAAA,WACGN,KAAK,CAACe,KAAK,CAACC,GAAG,CAAEC,IAAI,iBACpB;MAAA,wBACE;QACE,IAAI,EAAC,OAAO;QACZ,EAAE,EAAEA,IAAK;QACT,IAAI,EAAC,OAAO;QACZ,KAAK,EAAEA,IAAK;QACZ,OAAO,EAAEX,cAAc,KAAKW,IAAK;QACjC,QAAQ,EAAET;MAAmB;QAAA;QAAA;QAAA;MAAA,QAC7B,eACF;QAAO,OAAO,EAAES,IAAK;QAAA,UAAEA;MAAI;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA,GAT5BA,IAAI;MAAA;MAAA;MAAA;IAAA,QAWf,CAAC,eACF;MAAQ,OAAO,EAAEL,YAAa;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAC1C;AAGV,CAAC;AAAC,GAhHIb,YAAY;AAAA,KAAZA,YAAY;AAkHlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}