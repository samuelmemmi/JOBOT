{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Cities.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport ErrorMessages from \"./ErrorMessages\";\nimport \"./Options.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cities = props => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [submitted, setSubmitted] = useState(true);\n  const [isServerDown, setIsServerDown] = useState(false);\n\n  //set the updated existing cities from the jobs DB\n  useEffect(() => {\n    axios.post(\"/cities\", {\n      areas: props.node.getSelected().areas\n    }, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => {\n      if (response.data.success) {\n        setOptions([...response.data.cities, \"Other\"]);\n      } else {\n        console.log(\"Server did not returned cities\");\n      }\n    }).catch(err => {\n      setIsServerDown(true);\n      console.log(\"Error getting cities\", err.message);\n    });\n  }, []);\n  const handleOptionChange = event => {\n    const option = event.target.value;\n    if (selectedOptions.includes(option)) {\n      setSelectedOptions(selectedOptions.filter(selectedOption => selectedOption !== option));\n    } else {\n      setSelectedOptions([...selectedOptions, option]);\n    }\n  };\n  const isFormValid = () => {\n    return Object.values(selectedOptions).some(isChecked => isChecked) && submitted;\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"Selected Options1: \", selectedOptions);\n    // handle submission logic\n    setSubmitted(false);\n    if (selectedOptions.includes(\"Other\")) {\n      props.actionProvider.handleCities(props.node, [\"Other\"]);\n    } else {\n      props.actionProvider.handleCities(props.node, selectedOptions);\n    }\n  };\n  //We used chatGpt to divide the cities into 3 columns\n  const columnSize = Math.ceil(options.length / 3);\n  const columns = [options.slice(0, columnSize), options.slice(columnSize, columnSize * 2), options.slice(columnSize * 2)];\n  const renderCheckbox = opt => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cities\",\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"checkbox\",\n        type: \"checkbox\",\n        value: opt,\n        onChange: handleOptionChange,\n        disabled: opt !== \"Other\" && selectedOptions.includes(\"Other\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), opt]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, opt, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n  const renderColumns = (columnCities, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: columnCities.map(city => renderCheckbox(city))\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isServerDown ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: columns.map((columnCities, index) => renderColumns(columnCities, index))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"option-button\",\n        disabled: !isFormValid(),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: \"2rem\"\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(ErrorMessages, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 103\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Cities, \"G+Voym/GtLK2B8BnufA4TxtfKDA=\");\n_c = Cities;\nexport default Cities;\nvar _c;\n$RefreshReg$(_c, \"Cities\");","map":{"version":3,"names":["axios","React","useState","useEffect","ErrorMessages","jsxDEV","_jsxDEV","Cities","props","_s","options","setOptions","selectedOptions","setSelectedOptions","submitted","setSubmitted","isServerDown","setIsServerDown","post","areas","node","getSelected","headers","then","response","data","success","cities","console","log","catch","err","message","handleOptionChange","event","option","target","value","includes","filter","selectedOption","isFormValid","Object","values","some","isChecked","handleSubmit","preventDefault","actionProvider","handleCities","columnSize","Math","ceil","length","columns","slice","renderCheckbox","opt","className","children","type","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","renderColumns","columnCities","index","map","city","onSubmit","style","display","justifyContent","alignItems","marginTop","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/Cities.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport ErrorMessages from \"./ErrorMessages\"\r\nimport \"./Options.css\";\r\n\r\nconst Cities = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [submitted,setSubmitted]=useState(true);\r\n  const [isServerDown, setIsServerDown] = useState(false);\r\n\r\n  //set the updated existing cities from the jobs DB\r\n  useEffect(\r\n    ()=>{\r\n      axios.post(\"/cities\",{\r\n        areas:props.node.getSelected().areas\r\n      }, {\r\n        headers: {\r\n        'Content-type': 'application/json; charset=UTF-8' } \r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          setOptions([...response.data.cities,\"Other\"])\r\n        } else {\r\n          console.log(\"Server did not returned cities\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsServerDown(true)\r\n        console.log(\"Error getting cities\", err.message);\r\n      });\r\n    }\r\n    ,[]);\r\n  \r\n  const handleOptionChange = (event) => {\r\n    const option = event.target.value;\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Selected Options1: \", selectedOptions);\r\n    // handle submission logic\r\n    setSubmitted(false);\r\n    if(selectedOptions.includes(\"Other\")){\r\n      props.actionProvider.handleCities(props.node,[\"Other\"]);\r\n    }else{\r\n      props.actionProvider.handleCities(props.node,selectedOptions);\r\n    }\r\n  };\r\n  //We used chatGpt to divide the cities into 3 columns\r\n  const columnSize = Math.ceil(options.length / 3);\r\n  const columns = [\r\n    options.slice(0, columnSize),\r\n    options.slice(columnSize, columnSize * 2),\r\n    options.slice(columnSize * 2),\r\n  ];\r\n\r\n  const renderCheckbox = (opt) => (\r\n    <div key={opt} className=\"cities\">\r\n      <label>\r\n      <input\r\n      className=\"checkbox\"\r\n      type=\"checkbox\"\r\n      value={opt}\r\n      onChange={handleOptionChange}\r\n      disabled={(opt!==\"Other\")&&selectedOptions.includes(\"Other\")} />\r\n      {opt}\r\n      </label>\r\n    </div>\r\n  );\r\n\r\n  const renderColumns = (columnCities,index) => (\r\n    <div key={index}>\r\n      {columnCities.map(city => renderCheckbox(city))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n    {(!isServerDown)?(<form onSubmit={handleSubmit}>\r\n      <label>\r\n        <div style={{ display: 'flex' }}>\r\n        {\r\n          columns.map((columnCities,index) => renderColumns(columnCities,index))\r\n        }\r\n        </div>\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n    </form>):\r\n    (\r\n      <div style={{display: 'flex',justifyContent: 'center',alignItems: 'center',marginTop: \"2rem\"}}> <ErrorMessages /></div>\r\n    )}\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Cities;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}