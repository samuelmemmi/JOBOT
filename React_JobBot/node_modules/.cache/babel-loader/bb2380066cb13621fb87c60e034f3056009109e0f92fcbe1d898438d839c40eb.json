{"ast":null,"code":"import axios from \"axios\";\nimport emailjs from \"@emailjs/browser\";\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.saveHistoryInDB = node => {\n      node.getSelected()[\"displayed jobs\"] && delete node.getSelected()[\"displayed jobs\"];\n      const current = new Date();\n      const date = `${current.getDate()}/${current.getMonth() + 1}/${current.getFullYear()}`;\n      var history = {\n        ...node.getSavedInDB(),\n        \"client details\": node.getRegistrationDetails(),\n        field: node.getSelected().field,\n        \"conversation content\": node.getHistoryChat(),\n        \"displayed jobs\": node.getSavedInDB()[\"displayed jobs\"] ? node.getSavedInDB()[\"displayed jobs\"] : \"-\",\n        \"selected jobs\": node.getSavedInDB()[\"selected jobs\"] ? node.getSavedInDB()[\"selected jobs\"] : \"-\",\n        \"experiance & education\": node.getSelected()[\"job Requirements\"] ? node.getSelected()[\"job Requirements\"] : \"-\",\n        \"feedback on termination\": node.getSavedInDB()[\"feedback on termination\"] ? node.getSavedInDB()[\"feedback on termination\"] : \"-\",\n        \"selected features\": node.getSelected(),\n        date: date\n      };\n      // console.log(\"save data in DB \",history)\n      node.setSavedInDB(history);\n\n      //call server with 'history' var\n      // axios.post('/clienthistory', {\n      //   history: history\n      // }, {\n      //   headers: {\n      //   'Content-type': 'application/json; charset=UTF-8' }\n      // })\n      // .then((response) => {\n      //   console.log(response.data.message);\n      //   console.log(\"save data in DB \",history)\n      // })\n      // .catch((error) => {\n      //   console.error(error.response.data.error);\n      // });\n    };\n    this.errorMessages = (node, errorMessage) => {\n      const message = this.createChatBotMessage(errorMessage, {\n        widget: \"errorMessages\"\n      });\n      this.addMessageToState(message, node);\n    };\n    this.selfSearch = (node, Freetxt) => {\n      var txt1 = node.getNextResponse().children[0].text;\n      const message1 = this.createChatBotMessage(txt1, {\n        widget: \"moreInfo\"\n      });\n      this.addMessageToState(message1, node);\n\n      //goodbye\n      var txt2 = node.getNextResponse().children[0].children[0].text;\n      const message2 = this.createChatBotMessage(txt2);\n\n      //set history\n      if (typeof Freetxt === \"object\" && Freetxt !== null && (Freetxt.flag === \"noJobs\" || Freetxt.flag === \"feedback\")) {\n        //adding the bot message into the end of history\n        var newHistoryArray = node.getHistoryChat();\n        var lastBotHistory = newHistoryArray.pop();\n        lastBotHistory.bot.push(txt1, txt2);\n        var updatedBotHistory = {\n          bot: lastBotHistory.bot\n        };\n        node.setHistoryChat([...newHistoryArray, updatedBotHistory]);\n      } else {\n        node.setHistoryChat([...node.getHistoryChat(), {\n          user: [Freetxt]\n        }, {\n          bot: [txt1, txt2]\n        }]);\n      }\n      console.log(\"history \", node.getHistoryChat());\n      node.setIsFeedback(0);\n      this.addMessageToState(message2, node);\n      this.saveHistoryInDB(node);\n    };\n    this.responseToFeedback = (node, feedback, JOBOTresponse) => {\n      const message = this.createChatBotMessage(JOBOTresponse);\n      this.addMessageToState(message, node);\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: [feedback]\n      }, {\n        bot: [JOBOTresponse]\n      }]);\n      node.setSelected({\n        ...node.getSelected(),\n        feedback: feedback\n      });\n    };\n    this.handleField = (node, opt) => {\n      // console.log(\"Thank you god!\",node.getRegistrationDetails())\n      var txt = node.getNextResponse().children[0].children[1].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"jobTitles\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        field: opt\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        bot: [node.getNextResponse().text, node.getNextResponse().children[0].text]\n      }, {\n        user: [opt]\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"how \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[1]);\n      this.addMessageToState(message, node);\n    };\n    this.handleOtherField = (node, opt) => {\n      var txt = node.getNextResponse().children[0].children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"approval\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        field: opt\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        bot: [node.getNextResponse().text, node.getNextResponse().children[0].text]\n      }, {\n        user: [opt]\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"how \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message, node);\n    };\n    this.handleJobTitle = (node, opts) => {\n      var txt = node.getNextResponse().children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"companies\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        JobTitles: opts\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"how \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0]);\n      this.addMessageToState(message, node);\n    };\n    this.handleCompany = (node, opts) => {\n      var txt1 = node.getNextResponse().children[0].text;\n      const message1 = this.createChatBotMessage(txt1);\n      this.addMessageToState(message1, node);\n      var txt2 = node.getNextResponse().children[0].children[0].text;\n      const message2 = this.createChatBotMessage(txt2, {\n        widget: \"areas\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        companies: opts\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt1, txt2]\n      }]);\n      console.log(\"how \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message2, node);\n    };\n    this.nextBotMessagesAfterEmail = (node, email, txt1) => {\n      const message1 = this.createChatBotMessage(txt1);\n      this.addMessageToState(message1, node);\n      var txt2 = node.getNextResponse().children[0].children[0].text;\n      console.log(\"text after \", node.getNextResponse().text);\n      const message2 = this.createChatBotMessage(txt2, {\n        widget: \"approval\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: email\n      }, {\n        bot: [txt1, txt2]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message2, node);\n    };\n    this.addMessageToState = (message, node) => {\n      this.setState(prevState => {\n        return {\n          ...prevState,\n          messages: [...prevState.messages, message],\n          head: node\n        };\n      });\n    };\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  handleApproval(node, opt) {\n    //case of asking for saving chat details in our system\n    if (node.getNextResponse().title === \"user selected 'other' field\") {\n      var txt = node.getNextResponse().children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"moreInfo\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        approval: opt\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: [opt]\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      this.addMessageToState(message, node);\n      if (opt === \"Yes\") {\n        this.saveHistoryInDB(node);\n      }\n    }\n    //case of asking for self job search\n    else if (node.getNextResponse().title.includes(\"self job search\")) {\n      if (opt === \"Yes\") {\n        this.selfSearch(node, opt);\n      } else {\n        var txt = node.getNextResponse().children[1].text;\n        const message = this.createChatBotMessage(txt);\n        node.setHistoryChat([...node.getHistoryChat(), {\n          user: [opt]\n        }, {\n          bot: [txt]\n        }]);\n        console.log(\"history \", node.getHistoryChat());\n        this.addMessageToState(message, node);\n        this.saveHistoryInDB(node);\n      }\n    }\n    //case of asking for accurate match\n    else if (node.getNextResponse().title === \"user selected 'Nothing fits' or up to 2 jobs\") {\n      //user want an accurate match\n      if (opt === \"Yes\") {\n        node.setHistoryChat([...node.getHistoryChat(), {\n          user: [opt]\n        }]);\n        document.documentElement.style.setProperty(\"--button-visibility\", \"visible\");\n        this.requirementsWidget(node);\n      } else {\n        //user did not want an accurate match\n        var txt = node.getNextResponse().children[0].text;\n        const message = this.createChatBotMessage(txt);\n        node.setHistoryChat([...node.getHistoryChat(), {\n          user: [opt]\n        }, {\n          bot: [txt]\n        }]);\n        console.log(\"history \", node.getHistoryChat());\n        node.setIsFeedback(1);\n        node.setNextResponse(node.getNextResponse().children[0]);\n        this.addMessageToState(message, node);\n        document.documentElement.style.setProperty(\"--button-visibility\", \"visible\");\n      }\n    }\n  }\n  handleArea(node, opts) {\n    var txt1 = node.getNextResponse().children[0].text;\n    const message1 = this.createChatBotMessage(txt1);\n    this.addMessageToState(message1, node);\n    var txt2 = node.getNextResponse().children[0].children[0].text;\n    const message2 = this.createChatBotMessage(txt2, {\n      widget: \"jobTypes\"\n    });\n    node.setSelected({\n      ...node.getSelected(),\n      areas: opts\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: opts\n    }, {\n      bot: [txt1, txt2]\n    }]);\n    console.log(\"how \", node.getHistoryChat());\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\n    this.addMessageToState(message2, node);\n  }\n  handleJobType(node, opts) {\n    //asking to wait\n    var txt1 = node.getNextResponse().children[0].text;\n    const message1 = this.createChatBotMessage(txt1);\n    this.addMessageToState(message1, node);\n\n    //server calculating jobs...\n    node.setSelected({\n      ...node.getSelected(),\n      \"job Types\": opts\n    });\n    var responses = {\n      ...node.getSelected(),\n      \"client details\": node.getRegistrationDetails()\n    };\n    axios.post(\"/getfirstjobs\", {\n      responses: responses\n    }, {\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(response => {\n      if (response.data.success) {\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\n        node.setJobs(response.data.list_jobs);\n        if (node.getSavedInDB()[\"displayed jobs\"]) {\n          node.setSavedInDB({\n            ...node.getSavedInDB(),\n            \"displayed jobs\": node.getSavedInDB()[\"displayed jobs\"].concat(node.getJobs())\n          });\n        } else {\n          node.setSavedInDB({\n            ...node.getSavedInDB(),\n            \"displayed jobs\": node.getJobs()\n          });\n        }\n\n        //continute\n        if (response.data.list_jobs.length !== 0) {\n          var txt2 = node.getNextResponse().children[0].children[0].text;\n          const message2 = this.createChatBotMessage(txt2, {\n            widget: \"jobs\"\n          });\n          node.setHistoryChat([...node.getHistoryChat(), {\n            user: opts\n          }, {\n            bot: [txt1, txt2]\n          }]);\n          node.setSelected({\n            ...node.getSelected(),\n            \"displayed jobs\": response.data.list_jobs\n          });\n          console.log(\"history \", node.getHistoryChat());\n          node.setNextResponse(node.getNextResponse().children[0].children[0]);\n          this.addMessageToState(message2, node);\n        } else {\n          var txt2 = \"No jobs found\";\n          const message2 = this.createChatBotMessage(txt2);\n          node.setHistoryChat([...node.getHistoryChat(), {\n            user: opts\n          }, {\n            bot: [txt1, txt2]\n          }]);\n          console.log(\"history \", node.getHistoryChat());\n          node.setNextResponse(node.getNextResponse().children[0].children[0]);\n          this.addMessageToState(message2, node);\n          //continute to accuracy phase\n\n          node.incCountNotFits(node.getCountNotFits());\n          this.handleJob(node, [\"No jobs\"]);\n        }\n      } else {\n        console.log(\"Error getting matching jobs: \", response.data.message);\n      }\n    }).catch(err => {\n      this.errorMessages(node, err.message);\n      console.log(\"Error getting matching jobs: \", err.message);\n    });\n  }\n  handleJob(node, opts) {\n    var isJobs = 1;\n    if (opts[0] === \"No jobs\") {\n      opts[0] = \"Nothing fits\";\n      isJobs = 0;\n    }\n    if (opts[0] === \"Nothing fits\") {\n      if (node.getCountNotFits() === 1) {\n        var txt = node.getNextResponse().children[0].text;\n        const message = this.createChatBotMessage(txt, {\n          widget: \"approval\"\n        });\n        this.addMessageToState(message, node);\n\n        //adding the bot message into the end of history\n        if (isJobs === 1) {\n          //check if it is a case that user selected 1 or 2 jobs in the first matching jobs\n          if (node.getSelectedJobs().length > 0) {\n            opts = node.getSelectedJobs();\n            node.setHistoryChat([...node.getHistoryChat(), {\n              user: opts\n            }, {\n              bot: [txt]\n            }]);\n          } else {\n            node.setHistoryChat([...node.getHistoryChat(), {\n              user: opts\n            }, {\n              bot: [txt]\n            }]);\n          }\n        } else {\n          var newHistoryArray = node.getHistoryChat();\n          var lastBotHistory = newHistoryArray.pop();\n          lastBotHistory.bot.push(txt);\n          var updatedBotHistory = {\n            bot: lastBotHistory.bot\n          };\n          node.setHistoryChat([...newHistoryArray, updatedBotHistory]);\n        }\n        node.setNextResponse(node.getNextResponse().children[0]);\n      } else if (node.getCountNotFits() === 2) {\n        if (isJobs === 1) {\n          this.selfSearch(node, opts[0]);\n        } else {\n          this.selfSearch(node, {\n            flag: \"noJobs\"\n          });\n        }\n      }\n      //client selected up to 2 jobs before the first jobs round\n    } else if (opts.length <= 2 && node.getIsJobAccuracy() === 0) {\n      var txt = node.getNextResponse().children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"approval\"\n      });\n      this.addMessageToState(message, node);\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      node.setNextResponse(node.getNextResponse().children[0]);\n      //client selected 3 or more jobs\n    } else {\n      txt = node.getNextResponse().children[1].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"displayEmail\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"I chose jobs  \", node.getSelectedJobs());\n      node.setNextResponse(node.getNextResponse().children[1]);\n      this.addMessageToState(message, node);\n    }\n  }\n  handleDisplayEmail(node, opts) {\n    //user selected 'Just keep going'\n    if (opts[0] === \"Just keep going\") {\n      var txt = node.getNextResponse().children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"approval\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0]);\n      this.addMessageToState(message, node);\n    }\n    //user selected 'Display choices'\n    else if (opts.length === 1 && opts.includes(\"Display my choices again\")) {\n      var txt1 = node.getNextResponse().children[1].text;\n      const message1 = this.createChatBotMessage(txt1, {\n        widget: \"displaySelectedJobs\"\n      });\n      this.addMessageToState(message1, node);\n      var txt2 = node.getNextResponse().children[1].children[0].text;\n      const message2 = this.createChatBotMessage(txt2, {\n        widget: \"approval\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt1, txt2]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[1].children[0]);\n      this.addMessageToState(message2, node);\n    }\n    //user selected 'Email them to me'\n    else if (opts.length === 1 && opts.includes(\"Email them to me\")) {\n      var txt = node.getNextResponse().children[2].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"email\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[2]);\n      this.addMessageToState(message, node);\n    }\n    //user selected 'Display choices and Email them to me'\n    else {\n      var txt1 = node.getNextResponse().children[1].text;\n      const message1 = this.createChatBotMessage(txt1, {\n        widget: \"displaySelectedJobs\"\n      });\n      this.addMessageToState(message1, node);\n      var txt2 = node.getNextResponse().children[2].text;\n      const message2 = this.createChatBotMessage(txt2, {\n        widget: \"email\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: opts\n      }, {\n        bot: [txt1, txt2]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[2]);\n      this.addMessageToState(message2, node);\n    }\n  }\n  filterObjectsById(objects, selectedObjects) {\n    let filteredObjects = [];\n    objects.map(obj => {\n      if (selectedObjects.includes(obj._id)) {\n        filteredObjects.push(obj);\n      }\n    });\n    return filteredObjects;\n  }\n  dataForEmail(node) {\n    const displayedJobs = node.getSavedInDB()[\"displayed jobs\"];\n    const selectedJobs = node.getSavedInDB()[\"selected jobs\"];\n    const selectedJobsDetails = this.filterObjectsById(displayedJobs, selectedJobs);\n    const message = selectedJobsDetails.map(job => {\n      let details = \"\";\n      if (job.job) {\n        details += `Job: ${job.job}\\n`;\n      }\n      if (job.company) {\n        details += `Company: ${job.company}\\n`;\n      }\n      if (job.city) {\n        details += `City: ${job.city}\\n`;\n      }\n      if (job.link) {\n        details += `Link for apply: ${job.link.substring(0, 25)}${job.link.length > 25 ? \"...\" : \"\"}\\n`;\n      }\n      if (job.rating) {\n        details += `Rating: ${job.rating} stars\\n`;\n      }\n      if (job.date) {\n        details += `Elapsed time since update: ${job.date}\\n`;\n      }\n\n      // if (job.description) {\n      //   details += `Description: ${job.description}\\n`;\n      // }\n\n      return details;\n    }).join(\"\\n\\n\");\n    return message;\n  }\n  handleEmail(node, email) {\n    if (email === \"\") {\n      var txt = node.getNextResponse().children[0].children[0].text;\n      const message = this.createChatBotMessage(txt, {\n        widget: \"approval\"\n      });\n      node.setHistoryChat([...node.getHistoryChat(), {\n        user: email\n      }, {\n        bot: [txt]\n      }]);\n      console.log(\"history \", node.getHistoryChat());\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message, node);\n    } else {\n      const Emailmessage = this.dataForEmail(node);\n      const data = {\n        to_name: node.getRegistrationDetails().userName,\n        from_name: \"JOBOT\",\n        to_email: email,\n        message: Emailmessage\n      };\n      emailjs.send(\"service_0sya75j\", \"template_fkjypxk\", data, \"zH-UqP85Fm0Jcaud3\").then(result => {\n        console.log(\"Sended\");\n        console.log(result.text);\n        this.nextBotMessagesAfterEmail(node, email, node.getNextResponse().children[0].text);\n      }, error => {\n        console.log(\"NOT Sended\");\n        console.log(error.text);\n        const txt1 = \"Apologies, the email could not be sent.\";\n        this.nextBotMessagesAfterEmail(node, email, txt1);\n      });\n    }\n  }\n  handleAccuracyLevel(node, opts) {\n    var tempNodeObject = {\n      ...node.getAccuracyNode()\n    };\n    node.setNextResponse(tempNodeObject);\n    if (opts.includes(\"Experience level\")) {\n      this.experienceWidget(node);\n    } else if (opts.includes(\"Desired city\")) {\n      this.cityWidget(node);\n    } else if (opts.includes(\"Job title\")) {\n      this.jobTitleTypingWidget(node);\n    } else {\n      console.log(\"server match\");\n      this.accurateJobsWidget(node);\n    }\n  }\n  experienceWidget(node) {\n    var txt = node.getNextResponse().children[2].text;\n    const message = this.createChatBotMessage(txt, {\n      widget: \"experienceLevel\"\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      bot: [txt]\n    }]);\n    node.setNextResponse(node.getNextResponse().children[2]);\n    this.addMessageToState(message, node);\n  }\n  handleExperienceLevel(node, opts) {\n    if (opts[0] !== \"Other\") {\n      node.setIsJobAccuracy(1);\n    }\n    node.setSelected({\n      ...node.getSelected(),\n      \"experience level\": opts\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: opts\n    }]);\n    console.log(\"history in hanExp \", node.getHistoryChat());\n    //remove 'Experience level' from the selected accuracy levels and handle additional widgets of accuracy levels\n    node.setAccuracyOptions(node.getAccuracyOptions().filter(selectedOption => selectedOption !== \"Experience level\"));\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\n  }\n  cityWidget(node) {\n    var txt = node.getNextResponse().children[1].text;\n    const message = this.createChatBotMessage(txt, {\n      widget: \"cities\"\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      bot: [txt]\n    }]);\n    node.setNextResponse(node.getNextResponse().children[1]);\n    console.log(\"history in cityWidget \", node.getHistoryChat());\n    this.addMessageToState(message, node);\n  }\n  handleCities(node, opts) {\n    if (opts[0] !== \"Other\") {\n      node.setIsJobAccuracy(1);\n    }\n    node.setSelected({\n      ...node.getSelected(),\n      cities: opts\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: opts\n    }]);\n    console.log(\"history in hanCities \", node.getHistoryChat());\n    //remove 'Desired city' from the selected accuracy levels and handle additional widgets of accuracy levels\n    node.setAccuracyOptions(node.getAccuracyOptions().filter(selectedOption => selectedOption !== \"Desired city\"));\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\n  }\n  requirementsWidget(node) {\n    var txt = node.getNextResponse().children[1].text;\n    const message = this.createChatBotMessage(txt);\n    node.setHistoryChat([...node.getHistoryChat(), {\n      bot: [txt]\n    }]);\n    node.setNextResponse(node.getNextResponse().children[1]);\n    console.log(\"history in requirementsWidget \", node.getHistoryChat());\n    node.setIsRequirements(1);\n    this.addMessageToState(message, node);\n  }\n  handleRequirements(node, msg) {\n    document.documentElement.style.setProperty(\"--button-visibility\", \"hidden\");\n    //typing about job requirements is stopped\n    node.setIsRequirements(0);\n    //flag that the client need job accuracy\n    node.setIsJobAccuracy(1);\n    node.setSelected({\n      ...node.getSelected(),\n      \"job Requirements\": msg\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: [msg]\n    }]);\n    console.log(\"history in handleRequirements \", node.getHistoryChat());\n    console.log(\"selected in handleRequirements \", node.getSelected());\n    var txt = node.getNextResponse().children[0].text;\n    const message = this.createChatBotMessage(txt, {\n      widget: \"accuracyLevel\"\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      bot: [txt]\n    }]);\n    console.log(\"history \", node.getHistoryChat());\n    node.setNextResponse(node.getNextResponse().children[0]);\n    this.addMessageToState(message, node);\n  }\n  jobTitleTypingWidget(node) {\n    var txt = node.getNextResponse().children[3].text;\n    const message = this.createChatBotMessage(txt, {\n      widget: \"jobTitleTyping\"\n    });\n    node.setHistoryChat([...node.getHistoryChat(), {\n      bot: [txt]\n    }]);\n    node.setNextResponse(node.getNextResponse().children[3]);\n    console.log(\"history in jobTitleTypingWidgetTyping \", node.getHistoryChat());\n    this.addMessageToState(message, node);\n  }\n  handleJobTitleTyping(node, msg) {\n    //flag that the client need job accuracy\n    node.setIsJobAccuracy(1);\n    if (msg !== \"\") {\n      node.setSelected({\n        ...node.getSelected(),\n        \"additional job title\": msg\n      });\n    }\n    node.setHistoryChat([...node.getHistoryChat(), {\n      user: [msg]\n    }]);\n    console.log(\"history in handleIsJobTitleTyping \", node.getHistoryChat());\n    console.log(\"selected in handleIsJobTitleTyping \", node.getSelected());\n    //remove 'Job title' from the selected accuracy levels and handle additional widgets of accuracy levels\n    node.setAccuracyOptions(node.getAccuracyOptions().filter(selectedOption => selectedOption !== \"Job title\"));\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\n  }\n  accurateJobsWidget(node) {\n    //asking to wait\n    var txt1 = node.getNextResponse().children[0].text;\n    const message1 = this.createChatBotMessage(txt1);\n    this.addMessageToState(message1, node);\n\n    //server calculating jobs...\n    console.log(\"new selected \", node.getSelected());\n    var responses = {\n      ...node.getSelected(),\n      \"client details\": node.getRegistrationDetails()\n    };\n    axios.post(\"/getsecondjobs\", {\n      responses: responses\n    }, {\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(response => {\n      if (response.data.success) {\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\n        node.setJobs(response.data.list_jobs);\n        if (node.getSavedInDB()[\"displayed jobs\"]) {\n          node.setSavedInDB({\n            ...node.getSavedInDB(),\n            \"displayed jobs\": node.getSavedInDB()[\"displayed jobs\"].concat(node.getJobs())\n          });\n        } else {\n          node.setSavedInDB({\n            ...node.getSavedInDB(),\n            \"displayed jobs\": node.getJobs()\n          });\n        }\n\n        //UNIT TEST//\n        //continute\n        if (response.data.list_jobs.length !== 0) {\n          if (response.data.list_jobs.length > 1) {\n            var txt2 = `With all the information you provided me, I find for you these top ${response.data.list_jobs.length} jobs`;\n            const message2 = this.createChatBotMessage(txt2);\n            this.addMessageToState(message2, node);\n          }\n          var txt3 = node.getNextResponse().children[0].children[0].text;\n          const message3 = this.createChatBotMessage(txt3, {\n            widget: \"jobs\"\n          });\n          if (response.data.list_jobs.length > 1) {\n            node.setHistoryChat([...node.getHistoryChat(), {\n              bot: [txt1, txt2, txt3]\n            }]);\n          } else {\n            node.setHistoryChat([...node.getHistoryChat(), {\n              bot: [txt1, txt3]\n            }]);\n          }\n          console.log(\"history in accurate jobs handle \", node.getHistoryChat());\n          node.setNextResponse(node.getNextResponse().children[0].children[0]);\n          this.addMessageToState(message3, node);\n        } else {\n          var txt2 = \"No jobs found\";\n          const message2 = this.createChatBotMessage(txt2);\n          node.setHistoryChat([...node.getHistoryChat(), {\n            bot: [txt1, txt2]\n          }]);\n          console.log(\"history \", node.getHistoryChat());\n          node.setNextResponse(node.getNextResponse().children[0].children[0]);\n          this.addMessageToState(message2, node);\n\n          //continute to accuracy phase\n          node.incCountNotFits(node.getCountNotFits());\n          this.handleJob(node, [\"No jobs\"]);\n        }\n      } else {\n        console.log(\"Error getting matching jobs: \", response.data.message);\n      }\n    }).catch(err => {\n      this.errorMessages(node, err.message);\n      console.log(\"Error getting matching jobs: \", err.message);\n    });\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["axios","emailjs","ActionProvider","constructor","createChatBotMessage","setStateFunc","saveHistoryInDB","node","getSelected","current","Date","date","getDate","getMonth","getFullYear","history","getSavedInDB","getRegistrationDetails","field","getHistoryChat","setSavedInDB","errorMessages","errorMessage","message","widget","addMessageToState","selfSearch","Freetxt","txt1","getNextResponse","children","text","message1","txt2","message2","flag","newHistoryArray","lastBotHistory","pop","bot","push","updatedBotHistory","setHistoryChat","user","console","log","setIsFeedback","responseToFeedback","feedback","JOBOTresponse","setSelected","handleField","opt","txt","setNextResponse","handleOtherField","handleJobTitle","opts","JobTitles","handleCompany","companies","nextBotMessagesAfterEmail","email","setState","prevState","messages","head","handleApproval","title","approval","includes","document","documentElement","style","setProperty","requirementsWidget","handleArea","areas","handleJobType","responses","post","headers","then","response","data","success","list_jobs","setJobs","concat","getJobs","length","incCountNotFits","getCountNotFits","handleJob","catch","err","isJobs","getSelectedJobs","getIsJobAccuracy","handleDisplayEmail","filterObjectsById","objects","selectedObjects","filteredObjects","map","obj","_id","dataForEmail","displayedJobs","selectedJobs","selectedJobsDetails","job","details","company","city","link","substring","rating","join","handleEmail","Emailmessage","to_name","userName","from_name","to_email","send","result","error","handleAccuracyLevel","tempNodeObject","getAccuracyNode","experienceWidget","cityWidget","jobTitleTypingWidget","accurateJobsWidget","handleExperienceLevel","setIsJobAccuracy","setAccuracyOptions","getAccuracyOptions","filter","selectedOption","handleCities","cities","setIsRequirements","handleRequirements","msg","handleJobTitleTyping","txt3","message3"],"sources":["/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/ActionProvider.js"],"sourcesContent":["import axios from \"axios\";\r\nimport emailjs from \"@emailjs/browser\";\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  saveHistoryInDB = (node) => {\r\n    node.getSelected()[\"displayed jobs\"] &&\r\n      delete node.getSelected()[\"displayed jobs\"];\r\n    const current = new Date();\r\n    const date = `${current.getDate()}/${\r\n      current.getMonth() + 1\r\n    }/${current.getFullYear()}`;\r\n    var history = {\r\n      ...node.getSavedInDB(),\r\n      \"client details\": node.getRegistrationDetails(),\r\n      field: node.getSelected().field,\r\n      \"conversation content\": node.getHistoryChat(),\r\n      \"displayed jobs\": node.getSavedInDB()[\"displayed jobs\"]\r\n        ? node.getSavedInDB()[\"displayed jobs\"]\r\n        : \"-\",\r\n      \"selected jobs\": node.getSavedInDB()[\"selected jobs\"]\r\n        ? node.getSavedInDB()[\"selected jobs\"]\r\n        : \"-\",\r\n      \"experiance & education\": node.getSelected()[\"job Requirements\"]\r\n        ? node.getSelected()[\"job Requirements\"]\r\n        : \"-\",\r\n      \"feedback on termination\": node.getSavedInDB()[\"feedback on termination\"]\r\n        ? node.getSavedInDB()[\"feedback on termination\"]\r\n        : \"-\",\r\n      \"selected features\": node.getSelected(),\r\n      date: date,\r\n    };\r\n    // console.log(\"save data in DB \",history)\r\n    node.setSavedInDB(history);\r\n\r\n    //call server with 'history' var\r\n    // axios.post('/clienthistory', {\r\n    //   history: history\r\n    // }, {\r\n    //   headers: {\r\n    //   'Content-type': 'application/json; charset=UTF-8' }\r\n    // })\r\n    // .then((response) => {\r\n    //   console.log(response.data.message);\r\n    //   console.log(\"save data in DB \",history)\r\n    // })\r\n    // .catch((error) => {\r\n    //   console.error(error.response.data.error);\r\n    // });\r\n  };\r\n\r\n  errorMessages = (node, errorMessage) => {\r\n    const message = this.createChatBotMessage(errorMessage, {\r\n      widget: \"errorMessages\",\r\n    });\r\n    this.addMessageToState(message, node);\r\n  };\r\n\r\n  selfSearch = (node, Freetxt) => {\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1, {\r\n      widget: \"moreInfo\",\r\n    });\r\n    this.addMessageToState(message1, node);\r\n\r\n    //goodbye\r\n    var txt2 = node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(txt2);\r\n\r\n    //set history\r\n    if (\r\n      typeof Freetxt === \"object\" &&\r\n      Freetxt !== null &&\r\n      (Freetxt.flag === \"noJobs\" || Freetxt.flag === \"feedback\")\r\n    ) {\r\n      //adding the bot message into the end of history\r\n      var newHistoryArray = node.getHistoryChat();\r\n      var lastBotHistory = newHistoryArray.pop();\r\n      lastBotHistory.bot.push(txt1, txt2);\r\n      var updatedBotHistory = { bot: lastBotHistory.bot };\r\n      node.setHistoryChat([...newHistoryArray, updatedBotHistory]);\r\n    } else {\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: [Freetxt] },\r\n        { bot: [txt1, txt2] },\r\n      ]);\r\n    }\r\n    console.log(\"history \", node.getHistoryChat());\r\n    node.setIsFeedback(0);\r\n    this.addMessageToState(message2, node);\r\n    this.saveHistoryInDB(node);\r\n  };\r\n\r\n  responseToFeedback = (node, feedback, JOBOTresponse) => {\r\n    const message = this.createChatBotMessage(JOBOTresponse);\r\n    this.addMessageToState(message, node);\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: [feedback] },\r\n      { bot: [JOBOTresponse] },\r\n    ]);\r\n    node.setSelected({ ...node.getSelected(), feedback: feedback });\r\n  };\r\n\r\n  handleField = (node, opt) => {\r\n    // console.log(\"Thank you god!\",node.getRegistrationDetails())\r\n    var txt = node.getNextResponse().children[0].children[1].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"jobTitles\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), field: opt });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      {\r\n        bot: [\r\n          node.getNextResponse().text,\r\n          node.getNextResponse().children[0].text,\r\n        ],\r\n      },\r\n      { user: [opt] },\r\n      { bot: [txt] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[1]);\r\n    this.addMessageToState(message, node);\r\n  };\r\n\r\n  handleOtherField = (node, opt) => {\r\n    var txt = node.getNextResponse().children[0].children[0].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"approval\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), field: opt });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      {\r\n        bot: [\r\n          node.getNextResponse().text,\r\n          node.getNextResponse().children[0].text,\r\n        ],\r\n      },\r\n      { user: [opt] },\r\n      { bot: [txt] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n    this.addMessageToState(message, node);\r\n  };\r\n\r\n  handleApproval(node, opt) {\r\n    //case of asking for saving chat details in our system\r\n    if (node.getNextResponse().title === \"user selected 'other' field\") {\r\n      var txt = node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"moreInfo\",\r\n      });\r\n      node.setSelected({ ...node.getSelected(), approval: opt });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: [opt] },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      this.addMessageToState(message, node);\r\n      if (opt === \"Yes\") {\r\n        this.saveHistoryInDB(node);\r\n      }\r\n    }\r\n    //case of asking for self job search\r\n    else if (node.getNextResponse().title.includes(\"self job search\")) {\r\n      if (opt === \"Yes\") {\r\n        this.selfSearch(node, opt);\r\n      } else {\r\n        var txt = node.getNextResponse().children[1].text;\r\n        const message = this.createChatBotMessage(txt);\r\n        node.setHistoryChat([\r\n          ...node.getHistoryChat(),\r\n          { user: [opt] },\r\n          { bot: [txt] },\r\n        ]);\r\n        console.log(\"history \", node.getHistoryChat());\r\n        this.addMessageToState(message, node);\r\n        this.saveHistoryInDB(node);\r\n      }\r\n    }\r\n    //case of asking for accurate match\r\n    else if (\r\n      node.getNextResponse().title ===\r\n      \"user selected 'Nothing fits' or up to 2 jobs\"\r\n    ) {\r\n      //user want an accurate match\r\n      if (opt === \"Yes\") {\r\n        node.setHistoryChat([...node.getHistoryChat(), { user: [opt] }]);\r\n        document.documentElement.style.setProperty(\r\n          \"--button-visibility\",\r\n          \"visible\"\r\n        );\r\n        this.requirementsWidget(node);\r\n      } else {\r\n        //user did not want an accurate match\r\n        var txt = node.getNextResponse().children[0].text;\r\n        const message = this.createChatBotMessage(txt);\r\n        node.setHistoryChat([\r\n          ...node.getHistoryChat(),\r\n          { user: [opt] },\r\n          { bot: [txt] },\r\n        ]);\r\n        console.log(\"history \", node.getHistoryChat());\r\n        node.setIsFeedback(1);\r\n        node.setNextResponse(node.getNextResponse().children[0]);\r\n        this.addMessageToState(message, node);\r\n        document.documentElement.style.setProperty(\r\n          \"--button-visibility\",\r\n          \"visible\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  handleJobTitle = (node, opts) => {\r\n    var txt = node.getNextResponse().children[0].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"companies\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), JobTitles: opts });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: opts },\r\n      { bot: [txt] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0]);\r\n    this.addMessageToState(message, node);\r\n  };\r\n\r\n  handleCompany = (node, opts) => {\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    var txt2 = node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(txt2, {\r\n      widget: \"areas\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), companies: opts });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: opts },\r\n      { bot: [txt1, txt2] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n    this.addMessageToState(message2, node);\r\n  };\r\n\r\n  handleArea(node, opts) {\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    var txt2 = node.getNextResponse().children[0].children[0].text;\r\n    const message2 = this.createChatBotMessage(txt2, {\r\n      widget: \"jobTypes\",\r\n    });\r\n    node.setSelected({ ...node.getSelected(), areas: opts });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: opts },\r\n      { bot: [txt1, txt2] },\r\n    ]);\r\n    console.log(\"how \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n    this.addMessageToState(message2, node);\r\n  }\r\n\r\n  handleJobType(node, opts) {\r\n    //asking to wait\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    //server calculating jobs...\r\n    node.setSelected({ ...node.getSelected(), \"job Types\": opts });\r\n    var responses = {\r\n      ...node.getSelected(),\r\n      \"client details\": node.getRegistrationDetails(),\r\n    };\r\n    axios\r\n      .post(\r\n        \"/getfirstjobs\",\r\n        {\r\n          responses: responses,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          console.log(\r\n            \"Server returned matching jobs:\",\r\n            response.data.list_jobs\r\n          );\r\n          node.setJobs(response.data.list_jobs);\r\n\r\n          if (node.getSavedInDB()[\"displayed jobs\"]) {\r\n            node.setSavedInDB({\r\n              ...node.getSavedInDB(),\r\n              \"displayed jobs\": node\r\n                .getSavedInDB()\r\n                [\"displayed jobs\"].concat(node.getJobs()),\r\n            });\r\n          } else {\r\n            node.setSavedInDB({\r\n              ...node.getSavedInDB(),\r\n              \"displayed jobs\": node.getJobs(),\r\n            });\r\n          }\r\n\r\n          //continute\r\n          if (response.data.list_jobs.length !== 0) {\r\n            var txt2 = node.getNextResponse().children[0].children[0].text;\r\n            const message2 = this.createChatBotMessage(txt2, {\r\n              widget: \"jobs\",\r\n            });\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { user: opts },\r\n              { bot: [txt1, txt2] },\r\n            ]);\r\n            node.setSelected({\r\n              ...node.getSelected(),\r\n              \"displayed jobs\": response.data.list_jobs,\r\n            });\r\n            console.log(\"history \", node.getHistoryChat());\r\n            node.setNextResponse(\r\n              node.getNextResponse().children[0].children[0]\r\n            );\r\n            this.addMessageToState(message2, node);\r\n          } else {\r\n            var txt2 = \"No jobs found\";\r\n            const message2 = this.createChatBotMessage(txt2);\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { user: opts },\r\n              { bot: [txt1, txt2] },\r\n            ]);\r\n            console.log(\"history \", node.getHistoryChat());\r\n            node.setNextResponse(\r\n              node.getNextResponse().children[0].children[0]\r\n            );\r\n            this.addMessageToState(message2, node);\r\n            //continute to accuracy phase\r\n\r\n            node.incCountNotFits(node.getCountNotFits());\r\n            this.handleJob(node, [\"No jobs\"]);\r\n          }\r\n        } else {\r\n          console.log(\"Error getting matching jobs: \", response.data.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this.errorMessages(node, err.message);\r\n        console.log(\"Error getting matching jobs: \", err.message);\r\n      });\r\n  }\r\n\r\n  handleJob(node, opts) {\r\n    var isJobs = 1;\r\n    if (opts[0] === \"No jobs\") {\r\n      opts[0] = \"Nothing fits\";\r\n      isJobs = 0;\r\n    }\r\n    if (opts[0] === \"Nothing fits\") {\r\n      if (node.getCountNotFits() === 1) {\r\n        var txt = node.getNextResponse().children[0].text;\r\n        const message = this.createChatBotMessage(txt, {\r\n          widget: \"approval\",\r\n        });\r\n        this.addMessageToState(message, node);\r\n\r\n        //adding the bot message into the end of history\r\n        if (isJobs === 1) {\r\n          //check if it is a case that user selected 1 or 2 jobs in the first matching jobs\r\n          if (node.getSelectedJobs().length > 0) {\r\n            opts = node.getSelectedJobs();\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { user: opts },\r\n              { bot: [txt] },\r\n            ]);\r\n          } else {\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { user: opts },\r\n              { bot: [txt] },\r\n            ]);\r\n          }\r\n        } else {\r\n          var newHistoryArray = node.getHistoryChat();\r\n          var lastBotHistory = newHistoryArray.pop();\r\n          lastBotHistory.bot.push(txt);\r\n          var updatedBotHistory = { bot: lastBotHistory.bot };\r\n          node.setHistoryChat([...newHistoryArray, updatedBotHistory]);\r\n        }\r\n        node.setNextResponse(node.getNextResponse().children[0]);\r\n      } else if (node.getCountNotFits() === 2) {\r\n        if (isJobs === 1) {\r\n          this.selfSearch(node, opts[0]);\r\n        } else {\r\n          this.selfSearch(node, { flag: \"noJobs\" });\r\n        }\r\n      }\r\n      //client selected up to 2 jobs before the first jobs round\r\n    } else if (opts.length <= 2 && node.getIsJobAccuracy() === 0) {\r\n      var txt = node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"approval\",\r\n      });\r\n      this.addMessageToState(message, node);\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt] },\r\n      ]);\r\n      node.setNextResponse(node.getNextResponse().children[0]);\r\n      //client selected 3 or more jobs\r\n    } else {\r\n      txt = node.getNextResponse().children[1].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"displayEmail\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"I chose jobs  \", node.getSelectedJobs());\r\n      node.setNextResponse(node.getNextResponse().children[1]);\r\n      this.addMessageToState(message, node);\r\n    }\r\n  }\r\n\r\n  handleDisplayEmail(node, opts) {\r\n    //user selected 'Just keep going'\r\n    if (opts[0] === \"Just keep going\") {\r\n      var txt = node.getNextResponse().children[0].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"approval\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0]);\r\n      this.addMessageToState(message, node);\r\n    }\r\n    //user selected 'Display choices'\r\n    else if (opts.length === 1 && opts.includes(\"Display my choices again\")) {\r\n      var txt1 = node.getNextResponse().children[1].text;\r\n      const message1 = this.createChatBotMessage(txt1, {\r\n        widget: \"displaySelectedJobs\",\r\n      });\r\n      this.addMessageToState(message1, node);\r\n      var txt2 = node.getNextResponse().children[1].children[0].text;\r\n      const message2 = this.createChatBotMessage(txt2, {\r\n        widget: \"approval\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt1, txt2] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[1].children[0]);\r\n      this.addMessageToState(message2, node);\r\n    }\r\n    //user selected 'Email them to me'\r\n    else if (opts.length === 1 && opts.includes(\"Email them to me\")) {\r\n      var txt = node.getNextResponse().children[2].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"email\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[2]);\r\n      this.addMessageToState(message, node);\r\n    }\r\n    //user selected 'Display choices and Email them to me'\r\n    else {\r\n      var txt1 = node.getNextResponse().children[1].text;\r\n      const message1 = this.createChatBotMessage(txt1, {\r\n        widget: \"displaySelectedJobs\",\r\n      });\r\n      this.addMessageToState(message1, node);\r\n\r\n      var txt2 = node.getNextResponse().children[2].text;\r\n      const message2 = this.createChatBotMessage(txt2, {\r\n        widget: \"email\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: opts },\r\n        { bot: [txt1, txt2] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[2]);\r\n      this.addMessageToState(message2, node);\r\n    }\r\n  }\r\n\r\n  filterObjectsById(objects, selectedObjects) {\r\n    let filteredObjects = [];\r\n    objects.map((obj) => {\r\n      if (selectedObjects.includes(obj._id)) {\r\n        filteredObjects.push(obj);\r\n      }\r\n    });\r\n    return filteredObjects;\r\n  }\r\n\r\n  dataForEmail(node) {\r\n    const displayedJobs = node.getSavedInDB()[\"displayed jobs\"];\r\n    const selectedJobs = node.getSavedInDB()[\"selected jobs\"];\r\n    const selectedJobsDetails = this.filterObjectsById(\r\n      displayedJobs,\r\n      selectedJobs\r\n    );\r\n    const message = selectedJobsDetails\r\n      .map((job) => {\r\n        let details = \"\";\r\n\r\n        if (job.job) {\r\n          details += `Job: ${job.job}\\n`;\r\n        }\r\n\r\n        if (job.company) {\r\n          details += `Company: ${job.company}\\n`;\r\n        }\r\n\r\n        if (job.city) {\r\n          details += `City: ${job.city}\\n`;\r\n        }\r\n\r\n        if (job.link) {\r\n          details += `Link for apply: ${job.link.substring(0, 25)}${\r\n            job.link.length > 25 ? \"...\" : \"\"\r\n          }\\n`;\r\n        }\r\n\r\n        if (job.rating) {\r\n          details += `Rating: ${job.rating} stars\\n`;\r\n        }\r\n\r\n        if (job.date) {\r\n          details += `Elapsed time since update: ${job.date}\\n`;\r\n        }\r\n\r\n        // if (job.description) {\r\n        //   details += `Description: ${job.description}\\n`;\r\n        // }\r\n\r\n        return details;\r\n      })\r\n      .join(\"\\n\\n\");\r\n\r\n    return message;\r\n  }\r\n\r\n  nextBotMessagesAfterEmail = (node, email, txt1) => {\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    var txt2 = node.getNextResponse().children[0].children[0].text;\r\n    console.log(\"text after \", node.getNextResponse().text);\r\n    const message2 = this.createChatBotMessage(txt2, {\r\n      widget: \"approval\",\r\n    });\r\n    node.setHistoryChat([\r\n      ...node.getHistoryChat(),\r\n      { user: email },\r\n      { bot: [txt1, txt2] },\r\n    ]);\r\n    console.log(\"history \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n    this.addMessageToState(message2, node);\r\n  };\r\n\r\n  handleEmail(node, email) {\r\n    if (email === \"\") {\r\n      var txt = node.getNextResponse().children[0].children[0].text;\r\n      const message = this.createChatBotMessage(txt, {\r\n        widget: \"approval\",\r\n      });\r\n      node.setHistoryChat([\r\n        ...node.getHistoryChat(),\r\n        { user: email },\r\n        { bot: [txt] },\r\n      ]);\r\n      console.log(\"history \", node.getHistoryChat());\r\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\r\n      this.addMessageToState(message, node);\r\n    } else {\r\n      const Emailmessage = this.dataForEmail(node);\r\n      const data = {\r\n        to_name: node.getRegistrationDetails().userName,\r\n        from_name: \"JOBOT\",\r\n        to_email: email,\r\n        message: Emailmessage,\r\n      };\r\n      emailjs\r\n        .send(\"service_0sya75j\", \"template_fkjypxk\", data, \"zH-UqP85Fm0Jcaud3\")\r\n        .then(\r\n          (result) => {\r\n            console.log(\"Sended\");\r\n            console.log(result.text);\r\n            this.nextBotMessagesAfterEmail(\r\n              node,\r\n              email,\r\n              node.getNextResponse().children[0].text\r\n            );\r\n          },\r\n          (error) => {\r\n            console.log(\"NOT Sended\");\r\n            console.log(error.text);\r\n            const txt1 = \"Apologies, the email could not be sent.\";\r\n            this.nextBotMessagesAfterEmail(node, email, txt1);\r\n          }\r\n        );\r\n    }\r\n  }\r\n\r\n  handleAccuracyLevel(node, opts) {\r\n    var tempNodeObject = { ...node.getAccuracyNode() };\r\n    node.setNextResponse(tempNodeObject);\r\n    if (opts.includes(\"Experience level\")) {\r\n      this.experienceWidget(node);\r\n    } else if (opts.includes(\"Desired city\")) {\r\n      this.cityWidget(node);\r\n    } else if (opts.includes(\"Job title\")) {\r\n      this.jobTitleTypingWidget(node);\r\n    } else {\r\n      console.log(\"server match\");\r\n      this.accurateJobsWidget(node);\r\n    }\r\n  }\r\n\r\n  experienceWidget(node) {\r\n    var txt = node.getNextResponse().children[2].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"experienceLevel\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    node.setNextResponse(node.getNextResponse().children[2]);\r\n    this.addMessageToState(message, node);\r\n  }\r\n\r\n  handleExperienceLevel(node, opts) {\r\n    if (opts[0] !== \"Other\") {\r\n      node.setIsJobAccuracy(1);\r\n    }\r\n    node.setSelected({ ...node.getSelected(), \"experience level\": opts });\r\n    node.setHistoryChat([...node.getHistoryChat(), { user: opts }]);\r\n    console.log(\"history in hanExp \", node.getHistoryChat());\r\n    //remove 'Experience level' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(\r\n      node\r\n        .getAccuracyOptions()\r\n        .filter((selectedOption) => selectedOption !== \"Experience level\")\r\n    );\r\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\r\n  }\r\n\r\n  cityWidget(node) {\r\n    var txt = node.getNextResponse().children[1].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"cities\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    node.setNextResponse(node.getNextResponse().children[1]);\r\n    console.log(\"history in cityWidget \", node.getHistoryChat());\r\n    this.addMessageToState(message, node);\r\n  }\r\n\r\n  handleCities(node, opts) {\r\n    if (opts[0] !== \"Other\") {\r\n      node.setIsJobAccuracy(1);\r\n    }\r\n    node.setSelected({ ...node.getSelected(), cities: opts });\r\n    node.setHistoryChat([...node.getHistoryChat(), { user: opts }]);\r\n    console.log(\"history in hanCities \", node.getHistoryChat());\r\n    //remove 'Desired city' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(\r\n      node\r\n        .getAccuracyOptions()\r\n        .filter((selectedOption) => selectedOption !== \"Desired city\")\r\n    );\r\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\r\n  }\r\n\r\n  requirementsWidget(node) {\r\n    var txt = node.getNextResponse().children[1].text;\r\n    const message = this.createChatBotMessage(txt);\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    node.setNextResponse(node.getNextResponse().children[1]);\r\n    console.log(\"history in requirementsWidget \", node.getHistoryChat());\r\n    node.setIsRequirements(1);\r\n    this.addMessageToState(message, node);\r\n  }\r\n\r\n  handleRequirements(node, msg) {\r\n    document.documentElement.style.setProperty(\"--button-visibility\", \"hidden\");\r\n    //typing about job requirements is stopped\r\n    node.setIsRequirements(0);\r\n    //flag that the client need job accuracy\r\n    node.setIsJobAccuracy(1);\r\n\r\n    node.setSelected({ ...node.getSelected(), \"job Requirements\": msg });\r\n    node.setHistoryChat([...node.getHistoryChat(), { user: [msg] }]);\r\n    console.log(\"history in handleRequirements \", node.getHistoryChat());\r\n    console.log(\"selected in handleRequirements \", node.getSelected());\r\n    var txt = node.getNextResponse().children[0].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"accuracyLevel\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    console.log(\"history \", node.getHistoryChat());\r\n    node.setNextResponse(node.getNextResponse().children[0]);\r\n    this.addMessageToState(message, node);\r\n  }\r\n\r\n  jobTitleTypingWidget(node) {\r\n    var txt = node.getNextResponse().children[3].text;\r\n    const message = this.createChatBotMessage(txt, {\r\n      widget: \"jobTitleTyping\",\r\n    });\r\n    node.setHistoryChat([...node.getHistoryChat(), { bot: [txt] }]);\r\n    node.setNextResponse(node.getNextResponse().children[3]);\r\n    console.log(\r\n      \"history in jobTitleTypingWidgetTyping \",\r\n      node.getHistoryChat()\r\n    );\r\n    this.addMessageToState(message, node);\r\n  }\r\n  handleJobTitleTyping(node, msg) {\r\n    //flag that the client need job accuracy\r\n    node.setIsJobAccuracy(1);\r\n\r\n    if (msg !== \"\") {\r\n      node.setSelected({ ...node.getSelected(), \"additional job title\": msg });\r\n    }\r\n    node.setHistoryChat([...node.getHistoryChat(), { user: [msg] }]);\r\n    console.log(\"history in handleIsJobTitleTyping \", node.getHistoryChat());\r\n    console.log(\"selected in handleIsJobTitleTyping \", node.getSelected());\r\n    //remove 'Job title' from the selected accuracy levels and handle additional widgets of accuracy levels\r\n    node.setAccuracyOptions(\r\n      node\r\n        .getAccuracyOptions()\r\n        .filter((selectedOption) => selectedOption !== \"Job title\")\r\n    );\r\n    this.handleAccuracyLevel(node, node.getAccuracyOptions());\r\n  }\r\n\r\n  accurateJobsWidget(node) {\r\n    //asking to wait\r\n    var txt1 = node.getNextResponse().children[0].text;\r\n    const message1 = this.createChatBotMessage(txt1);\r\n    this.addMessageToState(message1, node);\r\n\r\n    //server calculating jobs...\r\n    console.log(\"new selected \", node.getSelected());\r\n    var responses = {\r\n      ...node.getSelected(),\r\n      \"client details\": node.getRegistrationDetails(),\r\n    };\r\n    axios\r\n      .post(\r\n        \"/getsecondjobs\",\r\n        {\r\n          responses: responses,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n          },\r\n        }\r\n      )\r\n\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          console.log(\r\n            \"Server returned matching jobs:\",\r\n            response.data.list_jobs\r\n          );\r\n          node.setJobs(response.data.list_jobs);\r\n          if (node.getSavedInDB()[\"displayed jobs\"]) {\r\n            node.setSavedInDB({\r\n              ...node.getSavedInDB(),\r\n              \"displayed jobs\": node\r\n                .getSavedInDB()\r\n                [\"displayed jobs\"].concat(node.getJobs()),\r\n            });\r\n          } else {\r\n            node.setSavedInDB({\r\n              ...node.getSavedInDB(),\r\n              \"displayed jobs\": node.getJobs(),\r\n            });\r\n          }\r\n\r\n          //UNIT TEST//\r\n          //continute\r\n          if (response.data.list_jobs.length !== 0) {\r\n            if (response.data.list_jobs.length > 1) {\r\n              var txt2 = `With all the information you provided me, I find for you these top ${response.data.list_jobs.length} jobs`;\r\n              const message2 = this.createChatBotMessage(txt2);\r\n              this.addMessageToState(message2, node);\r\n            }\r\n            var txt3 = node.getNextResponse().children[0].children[0].text;\r\n            const message3 = this.createChatBotMessage(txt3, {\r\n              widget: \"jobs\",\r\n            });\r\n            if (response.data.list_jobs.length > 1) {\r\n              node.setHistoryChat([\r\n                ...node.getHistoryChat(),\r\n                { bot: [txt1, txt2, txt3] },\r\n              ]);\r\n            } else {\r\n              node.setHistoryChat([\r\n                ...node.getHistoryChat(),\r\n                { bot: [txt1, txt3] },\r\n              ]);\r\n            }\r\n            console.log(\r\n              \"history in accurate jobs handle \",\r\n              node.getHistoryChat()\r\n            );\r\n            node.setNextResponse(\r\n              node.getNextResponse().children[0].children[0]\r\n            );\r\n            this.addMessageToState(message3, node);\r\n          } else {\r\n            var txt2 = \"No jobs found\";\r\n            const message2 = this.createChatBotMessage(txt2);\r\n            node.setHistoryChat([\r\n              ...node.getHistoryChat(),\r\n              { bot: [txt1, txt2] },\r\n            ]);\r\n            console.log(\"history \", node.getHistoryChat());\r\n            node.setNextResponse(\r\n              node.getNextResponse().children[0].children[0]\r\n            );\r\n            this.addMessageToState(message2, node);\r\n\r\n            //continute to accuracy phase\r\n            node.incCountNotFits(node.getCountNotFits());\r\n            this.handleJob(node, [\"No jobs\"]);\r\n          }\r\n        } else {\r\n          console.log(\"Error getting matching jobs: \", response.data.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this.errorMessages(node, err.message);\r\n        console.log(\"Error getting matching jobs: \", err.message);\r\n      });\r\n  }\r\n\r\n  addMessageToState = (message, node) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        messages: [...prevState.messages, message],\r\n        head: node,\r\n      };\r\n    });\r\n  };\r\n}\r\n\r\nexport default ActionProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}