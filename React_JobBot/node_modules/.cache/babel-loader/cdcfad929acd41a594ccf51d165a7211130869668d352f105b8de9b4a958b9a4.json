{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTypes.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import {useState,useEffect} from \"react\";\n\n// import \"./Options.css\";\n\n// const JobTypes = (props) => {\n//   const [options, setOptions] = useState([]);\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [submitted,setSubmitted]=useState(true);\n\n//   useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\n\n//   const handleOptionChange = (event) => {\n//     const option = event.target.value;\n//     if (selectedOptions.includes(option)) {\n//       setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\n//     } else {\n//       setSelectedOptions([...selectedOptions, option]);\n//     }\n//   };\n\n//   const isFormValid = () => {\n//     return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\n//   };\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     console.log(\"Selected Options: \", selectedOptions);\n//     // handle submission logic\n//     setSubmitted(false);\n//     props.actionProvider.handleJobType(props.node,selectedOptions);\n\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label>\n//         {options.map((opt,index) =>{\n//           return(\n//           <label key={index}>\n//             <br />\n//             <input\n//             type=\"checkbox\"\n//             value={opt}\n//             onChange={handleOptionChange} />\n//             {opt}\n//           </label>);\n//         },[])\n//         }\n//       </label>\n//       <br />\n//       <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\n//     </form>\n//   );\n// };\n\n// export default JobTypes;\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./Options.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobTypes = props => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [selectedOption, setSelectedOption] = useState(\"Full_time\");\n  const [submitted, setSubmitted] = useState(false);\n  useEffect(() => {\n    setOptions(props.node.getNextResponse().options);\n  }, []); //maybe props.node_if_options>0\n\n  const handleOptionChange = event => {\n    setSelectedOption(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    // handle submission logic\n    setSubmitted(true);\n    props.actionProvider.handleJobType(props.node, [selectedOption]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: options.map((opt, index) => {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: opt,\n            name: \"jobType\",\n            checked: selectedOption === opt,\n            onChange: handleOptionChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), opt]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this);\n      }, [])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"option-button\",\n      disabled: submitted,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(JobTypes, \"qRL8fVuiZHCOkkZia7YHM5rv5xY=\");\n_c = JobTypes;\nexport default JobTypes;\nvar _c;\n$RefreshReg$(_c, \"JobTypes\");","map":{"version":3,"names":["React","useState","useEffect","JobTypes","props","options","setOptions","selectedOption","setSelectedOption","submitted","setSubmitted","node","getNextResponse","handleOptionChange","event","target","value","handleSubmit","preventDefault","actionProvider","handleJobType","map","opt","index"],"sources":["/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/components/Options/JobTypes.jsx"],"sourcesContent":["// import React from \"react\";\r\n// import {useState,useEffect} from \"react\";\r\n\r\n// import \"./Options.css\";\r\n\r\n// const JobTypes = (props) => {\r\n//   const [options, setOptions] = useState([]);\r\n//   const [selectedOptions, setSelectedOptions] = useState([]);\r\n//   const [submitted,setSubmitted]=useState(true);\r\n\r\n//   useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n\r\n//   const handleOptionChange = (event) => {\r\n//     const option = event.target.value;\r\n//     if (selectedOptions.includes(option)) {\r\n//       setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n//     } else {\r\n//       setSelectedOptions([...selectedOptions, option]);\r\n//     }\r\n//   };\r\n\r\n//   const isFormValid = () => {\r\n//     return Object.values(selectedOptions).some((isChecked) => isChecked)&&submitted;\r\n//   };\r\n\r\n//   const handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     console.log(\"Selected Options: \", selectedOptions);\r\n//     // handle submission logic\r\n//     setSubmitted(false);\r\n//     props.actionProvider.handleJobType(props.node,selectedOptions);\r\n    \r\n//   };\r\n\r\n//   return (\r\n//     <form onSubmit={handleSubmit}>\r\n//       <label>\r\n//         {options.map((opt,index) =>{\r\n//           return(\r\n//           <label key={index}>\r\n//             <br />\r\n//             <input\r\n//             type=\"checkbox\"\r\n//             value={opt}\r\n//             onChange={handleOptionChange} />\r\n//             {opt}\r\n//           </label>);\r\n//         },[])\r\n//         }\r\n//       </label>\r\n//       <br />\r\n//       <button type=\"submit\" className=\"option-button\" disabled={!isFormValid()}>Submit</button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// export default JobTypes;\r\n\r\nimport React from \"react\";\r\nimport {useState,useEffect} from \"react\";\r\n\r\nimport \"./Options.css\";\r\n\r\nconst JobTypes = (props) => {\r\n  const [options, setOptions] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(\"Full_time\");\r\n  const [submitted,setSubmitted]=useState(false);\r\n\r\n  useEffect(()=>{setOptions(props.node.getNextResponse().options)},[]);//maybe props.node_if_options>0\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // handle submission logic\r\n    setSubmitted(true);\r\n    props.actionProvider.handleJobType(props.node,[selectedOption])\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        {options.map((opt,index) =>{\r\n          return(\r\n          <label key={index}>\r\n            <br />\r\n            <input\r\n            type=\"radio\"\r\n            value={opt}\r\n            name=\"jobType\"\r\n            checked={selectedOption === opt}\r\n            onChange={handleOptionChange} \r\n            />\r\n            {opt}\r\n          </label>);\r\n        },[])\r\n        }\r\n      </label>\r\n      <br />\r\n      <button type=\"submit\" className=\"option-button\" disabled={submitted}>Submit</button>\r\n    </form>);\r\n};\r\n\r\nexport default JobTypes;\r\n\r\n"],"mappings":";;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAExC,OAAO,eAAe;AAAC;AAEvB,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAA;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACM,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,WAAW,CAAC;EACjE,MAAM,CAACQ,SAAS,EAACC,YAAY,CAAC,GAACT,QAAQ,CAAC,KAAK,CAAC;EAE9CC,SAAS,CAAC,MAAI;IAACI,UAAU,CAACF,KAAK,CAACO,IAAI,CAACC,eAAe,EAAE,CAACP,OAAO,CAAC;EAAA,CAAC,EAAC,EAAE,CAAC,CAAC;;EAErE,MAAMQ,kBAAkB,GAAIC,KAAK,IAAK;IACpCN,iBAAiB,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;EAED,MAAMC,YAAY,GAAIH,KAAK,IAAK;IAC9BA,KAAK,CAACI,cAAc,EAAE;IACtB;IACAR,YAAY,CAAC,IAAI,CAAC;IAClBN,KAAK,CAACe,cAAc,CAACC,aAAa,CAAChB,KAAK,CAACO,IAAI,EAAC,CAACJ,cAAc,CAAC,CAAC;EACjE,CAAC;EAED,oBACE;IAAM,QAAQ,EAAEU,YAAa;IAAA,wBAC3B;MAAA,UACGZ,OAAO,CAACgB,GAAG,CAAC,CAACC,GAAG,EAACC,KAAK,KAAI;QACzB,oBACA;UAAA,wBACE;YAAA;YAAA;YAAA;UAAA,QAAM,eACN;YACA,IAAI,EAAC,OAAO;YACZ,KAAK,EAAED,GAAI;YACX,IAAI,EAAC,SAAS;YACd,OAAO,EAAEf,cAAc,KAAKe,GAAI;YAChC,QAAQ,EAAET;UAAmB;YAAA;YAAA;YAAA;UAAA,QAC3B,EACDS,GAAG;QAAA,GATMC,KAAK;UAAA;UAAA;UAAA;QAAA,QAUT;MACV,CAAC,EAAC,EAAE;IAAC;MAAA;MAAA;MAAA;IAAA,QAEC,eACR;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAQ,IAAI,EAAC,QAAQ;MAAC,SAAS,EAAC,eAAe;MAAC,QAAQ,EAAEd,SAAU;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAC/E;AACX,CAAC;AAAC,GAxCIN,QAAQ;AAAA,KAARA,QAAQ;AA0Cd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}