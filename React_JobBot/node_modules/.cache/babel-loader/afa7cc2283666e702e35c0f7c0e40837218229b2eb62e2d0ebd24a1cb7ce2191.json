{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/JobsPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './JobsPage.css';\n// import starImage from './star.avif';\n\n// function JobsPage() {\n//   const [jobs, setJobs] = useState([]);\n//   // const [companySearchQuery, setCompanySearchQuery] = useState('');\n//   // const [jobTitleSearchQuery, setJobTitleSearchQuery] = useState('');\n//   // const [citySearchQuery, setCitySearchQuery] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     setIsLoading(true)\n//     axios.post('/viewjobs')\n//       .then(response => {\n//         if (response.data.success) {\n//           setJobs(response.data.total_list);\n//           setIsLoading(false);\n//         } else {\n//           console.log('Error fetching jobs:', response.data.message);\n//         }\n//       })\n//       .catch(error => {\n//         console.log('Error fetching jobs:', error.message);\n//       });\n//   }, []);\n\n//   // const filteredJobs = jobs.filter(job =>\n//   //   job.company.toLowerCase().includes(companySearchQuery.toLowerCase()) &&\n//   //   job.job.toLowerCase().includes(jobTitleSearchQuery.toLowerCase()) &&\n//   //   job.city.toLowerCase().includes(citySearchQuery.toLowerCase())\n//   // );\n\n//   // return (\n//   //   <div>\n//   //     <h1 className=\"title\">JOBOT Jobs</h1>\n//   //     {isLoading ? (\n//   //       <p className=\"loading\">Loading...</p>\n//   //     ) : (\n//   //       <div className=\"jobs-page\">\n//   //         <div className=\"search-container\">\n//   //           <input\n//   //             type=\"text\"\n//   //             placeholder=\"Search jobs by company name\"\n//   //             value={companySearchQuery}\n//   //             onChange={event => setCompanySearchQuery(event.target.value)}\n//   //             className=\"search-input\"\n//   //           />\n//   //           <input\n//   //             type=\"text\"\n//   //             placeholder=\"Search jobs by title\"\n//   //             value={jobTitleSearchQuery}\n//   //             onChange={event => setJobTitleSearchQuery(event.target.value)}\n//   //             className=\"search-input\"\n//   //           />\n//   //           <input\n//   //             type=\"text\"\n//   //             placeholder=\"Search jobs by city\"\n//   //             value={citySearchQuery}\n//   //             onChange={event => setCitySearchQuery(event.target.value)}\n//   //             className=\"search-input\"\n//   //           />\n//   //         </div>\n//   //         <ul className=\"jobs-list\">\n//   //           {filteredJobs.map((job, index) => (\n//   //             <li key={index} className=\"job-item\">\n//   //               <h2 className=\"company-name\">{job.company}</h2>\n//   //               <p className=\"job-title\">{job.job}</p>\n//   //               <p className=\"job-location\">{job.city}</p>\n//   //               {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n//   //               <p className=\"job-date\">{job.date}</p>\n//   //               <p className=\"job-link\">\n//   //                 <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n//   //                   {job.link}\n//   //                 </a>\n//   //               </p>\n//   //               <p className=\"job-description\">{job.description}</p>\n//   //             </li>\n//   //           ))}\n//   //         </ul>\n//   //       </div>\n//   //     )}\n//   //   </div>\n\n//   // );\n\n//   const jobsPerPage = 10;\n\n//   const JobList = ({ jobs }) => {\n//     const [currentPage, setCurrentPage] = useState(1);\n//     const [selectedJob, setSelectedJob] = useState(null);\n\n//     // Calculate total number of pages\n//     const totalPages = Math.ceil(jobs.length / jobsPerPage);\n\n//     // Get jobs for the current page\n//     const indexOfLastJob = currentPage * jobsPerPage;\n//     const indexOfFirstJob = indexOfLastJob - jobsPerPage;\n//     const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n\n//     // Handle pagination\n//     const handlePageClick = (pageNumber) => {\n//       setCurrentPage(pageNumber);\n//       setSelectedJob(null);\n//     };\n\n//     // Handle drill-down\n//     const handleJobClick = (job) => {\n//       setSelectedJob(job);\n//     };\n\n//     return (\n//       <div className=\"job-list-container\">\n//         <h1 className=\"job-list-title\">Job Listings</h1>\n//         {selectedJob ? (\n//           <div className=\"job-details\">\n//             <h2>{selectedJob.title}</h2>\n//             <p>{selectedJob.company}</p>\n//             <p>{selectedJob.city}</p>\n//             <p>{selectedJob.date}</p>\n//             <p>{selectedJob.rating}</p>\n//             <button onClick={() => setSelectedJob(null)}>Back</button>\n//           </div>\n//         ) : (\n//           <div>\n//             <ul className=\"job-list\">\n//               {currentJobs.map((job) => (\n//                 <li\n//                   key={job.id}\n//                   className=\"job-list-item\"\n//                   onClick={() => handleJobClick(job)}\n//                 >\n//                   <h3>{job.title}</h3>\n//                   <p>{job.company}</p>\n//                   <p>{job.city}</p>\n//                 </li>\n//               ))}\n//             </ul>\n//             <div className=\"pagination\">\n//               {Array.from({ length: totalPages }, (_, index) => index + 1).map(\n//                 (pageNumber) => (\n//                   <button\n//                     key={pageNumber}\n//                     onClick={() => handlePageClick(pageNumber)}\n//                     className={currentPage === pageNumber ? 'active' : ''}\n//                   >\n//                     {pageNumber}\n//                   </button>\n//                 )\n//               )}\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   };\n\n// return (\n//   jobs?<JobList jobs={jobs}/>:<div>wait...</div>\n// )\n// }\n\n// export default JobsPage;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './JobsPage.css';\nimport starImage from './star.avif';\nimport { CollapsableCard } from \"./CollapsableCard.jsx\";\nimport { CardsTable } from \"./CardsTable.jsx\";\nimport { blue } from '@mui/material/colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JobsPage() {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [companySearchQuery, setCompanySearchQuery] = useState('');\n  const [jobTitleSearchQuery, setJobTitleSearchQuery] = useState('');\n  const [citySearchQuery, setCitySearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    setIsLoading(true);\n    axios.post('/viewjobs').then(response => {\n      if (response.data.success) {\n        setJobs(response.data.total_list);\n        setIsLoading(false);\n      } else {\n        console.log('Error fetching jobs:', response.data.message);\n      }\n    }).catch(error => {\n      console.log('Error fetching jobs:', error.message);\n    });\n  }, []);\n  const filteredJobs = jobs.filter(job => job.company.toLowerCase().includes(companySearchQuery.toLowerCase()) && job.job.toLowerCase().includes(jobTitleSearchQuery.toLowerCase()) && job.city.toLowerCase().includes(citySearchQuery.toLowerCase()));\n  function collapsed(job) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [job.rating && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"job-rating\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"star\",\n            src: starImage,\n            alt: \"Star\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 44\n        }, this), \" \", job.rating]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"job-date\",\n        children: job.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"job-link\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: job.link,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: `${job.link.slice(0, 30)}...`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"job-description\",\n        style: {\n          margin: \"0 2rem 2rem\"\n        },\n        children: job.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this);\n  }\n  const dataAsCards = filteredJobs.map((job, index) => {\n    return {\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"job-title\",\n          children: job.job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: job.company\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"job-location\",\n          children: job.city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 16\n      }, this),\n      collapsableContent: collapsed(job)\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"JOBOT Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-50 d-flex mx-auto align-items-center justify-cotnent-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search jobs by company name\",\n          value: companySearchQuery,\n          onChange: event => setCompanySearchQuery(event.target.value),\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search jobs by title\",\n          value: jobTitleSearchQuery,\n          onChange: event => setJobTitleSearchQuery(event.target.value),\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search jobs by city\",\n          value: citySearchQuery,\n          onChange: event => setCitySearchQuery(event.target.value),\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CardsTable, {\n          data: dataAsCards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n_s(JobsPage, \"92CX+vihV45iyp2s8ewid7r8Pyw=\");\n_c = JobsPage;\nexport default JobsPage;\nvar _c;\n$RefreshReg$(_c, \"JobsPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","starImage","CollapsableCard","CardsTable","blue","JobsPage","jobs","setJobs","companySearchQuery","setCompanySearchQuery","jobTitleSearchQuery","setJobTitleSearchQuery","citySearchQuery","setCitySearchQuery","isLoading","setIsLoading","post","then","response","data","success","total_list","console","log","message","catch","error","filteredJobs","filter","job","company","toLowerCase","includes","city","collapsed","textAlign","rating","date","link","slice","margin","description","dataAsCards","map","index","content","collapsableContent","event","target","value"],"sources":["/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/adminArea/JobsPage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './JobsPage.css';\n// import starImage from './star.avif';\n\n// function JobsPage() {\n//   const [jobs, setJobs] = useState([]);\n//   // const [companySearchQuery, setCompanySearchQuery] = useState('');\n//   // const [jobTitleSearchQuery, setJobTitleSearchQuery] = useState('');\n//   // const [citySearchQuery, setCitySearchQuery] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n\n\n//   useEffect(() => {\n//     setIsLoading(true)\n//     axios.post('/viewjobs')\n//       .then(response => {\n//         if (response.data.success) {\n//           setJobs(response.data.total_list);\n//           setIsLoading(false);\n//         } else {\n//           console.log('Error fetching jobs:', response.data.message);\n//         }\n//       })\n//       .catch(error => {\n//         console.log('Error fetching jobs:', error.message);\n//       });\n//   }, []);\n\n//   // const filteredJobs = jobs.filter(job =>\n//   //   job.company.toLowerCase().includes(companySearchQuery.toLowerCase()) &&\n//   //   job.job.toLowerCase().includes(jobTitleSearchQuery.toLowerCase()) &&\n//   //   job.city.toLowerCase().includes(citySearchQuery.toLowerCase())\n//   // );\n\n//   // return (\n//   //   <div>\n//   //     <h1 className=\"title\">JOBOT Jobs</h1>\n//   //     {isLoading ? (\n//   //       <p className=\"loading\">Loading...</p>\n//   //     ) : (\n//   //       <div className=\"jobs-page\">\n//   //         <div className=\"search-container\">\n//   //           <input\n//   //             type=\"text\"\n//   //             placeholder=\"Search jobs by company name\"\n//   //             value={companySearchQuery}\n//   //             onChange={event => setCompanySearchQuery(event.target.value)}\n//   //             className=\"search-input\"\n//   //           />\n//   //           <input\n//   //             type=\"text\"\n//   //             placeholder=\"Search jobs by title\"\n//   //             value={jobTitleSearchQuery}\n//   //             onChange={event => setJobTitleSearchQuery(event.target.value)}\n//   //             className=\"search-input\"\n//   //           />\n//   //           <input\n//   //             type=\"text\"\n//   //             placeholder=\"Search jobs by city\"\n//   //             value={citySearchQuery}\n//   //             onChange={event => setCitySearchQuery(event.target.value)}\n//   //             className=\"search-input\"\n//   //           />\n//   //         </div>\n//   //         <ul className=\"jobs-list\">\n//   //           {filteredJobs.map((job, index) => (\n//   //             <li key={index} className=\"job-item\">\n//   //               <h2 className=\"company-name\">{job.company}</h2>\n//   //               <p className=\"job-title\">{job.job}</p>\n//   //               <p className=\"job-location\">{job.city}</p>\n//   //               {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n//   //               <p className=\"job-date\">{job.date}</p>\n//   //               <p className=\"job-link\">\n//   //                 <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n//   //                   {job.link}\n//   //                 </a>\n//   //               </p>\n//   //               <p className=\"job-description\">{job.description}</p>\n//   //             </li>\n//   //           ))}\n//   //         </ul>\n//   //       </div>\n//   //     )}\n//   //   </div>\n\n//   // );\n\n//   const jobsPerPage = 10;\n\n//   const JobList = ({ jobs }) => {\n//     const [currentPage, setCurrentPage] = useState(1);\n//     const [selectedJob, setSelectedJob] = useState(null);\n  \n//     // Calculate total number of pages\n//     const totalPages = Math.ceil(jobs.length / jobsPerPage);\n  \n//     // Get jobs for the current page\n//     const indexOfLastJob = currentPage * jobsPerPage;\n//     const indexOfFirstJob = indexOfLastJob - jobsPerPage;\n//     const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n  \n//     // Handle pagination\n//     const handlePageClick = (pageNumber) => {\n//       setCurrentPage(pageNumber);\n//       setSelectedJob(null);\n//     };\n  \n//     // Handle drill-down\n//     const handleJobClick = (job) => {\n//       setSelectedJob(job);\n//     };\n  \n//     return (\n//       <div className=\"job-list-container\">\n//         <h1 className=\"job-list-title\">Job Listings</h1>\n//         {selectedJob ? (\n//           <div className=\"job-details\">\n//             <h2>{selectedJob.title}</h2>\n//             <p>{selectedJob.company}</p>\n//             <p>{selectedJob.city}</p>\n//             <p>{selectedJob.date}</p>\n//             <p>{selectedJob.rating}</p>\n//             <button onClick={() => setSelectedJob(null)}>Back</button>\n//           </div>\n//         ) : (\n//           <div>\n//             <ul className=\"job-list\">\n//               {currentJobs.map((job) => (\n//                 <li\n//                   key={job.id}\n//                   className=\"job-list-item\"\n//                   onClick={() => handleJobClick(job)}\n//                 >\n//                   <h3>{job.title}</h3>\n//                   <p>{job.company}</p>\n//                   <p>{job.city}</p>\n//                 </li>\n//               ))}\n//             </ul>\n//             <div className=\"pagination\">\n//               {Array.from({ length: totalPages }, (_, index) => index + 1).map(\n//                 (pageNumber) => (\n//                   <button\n//                     key={pageNumber}\n//                     onClick={() => handlePageClick(pageNumber)}\n//                     className={currentPage === pageNumber ? 'active' : ''}\n//                   >\n//                     {pageNumber}\n//                   </button>\n//                 )\n//               )}\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   };\n\n// return (\n//   jobs?<JobList jobs={jobs}/>:<div>wait...</div>\n// )\n// }\n\n// export default JobsPage;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './JobsPage.css';\nimport starImage from './star.avif';\nimport {CollapsableCard} from \"./CollapsableCard.jsx\"\nimport {CardsTable} from \"./CardsTable.jsx\"\nimport { blue } from '@mui/material/colors';\n\nfunction JobsPage() {\n  const [jobs, setJobs] = useState([]);\n  const [companySearchQuery, setCompanySearchQuery] = useState('');\n  const [jobTitleSearchQuery, setJobTitleSearchQuery] = useState('');\n  const [citySearchQuery, setCitySearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  useEffect(() => {\n    setIsLoading(true)\n    axios.post('/viewjobs')\n      .then(response => {\n        if (response.data.success) {\n          setJobs(response.data.total_list);\n          setIsLoading(false);\n        } else {\n          console.log('Error fetching jobs:', response.data.message);\n        }\n      })\n      .catch(error => {\n        console.log('Error fetching jobs:', error.message);\n      });\n  }, []);\n\n  const filteredJobs = jobs.filter(job =>\n    job.company.toLowerCase().includes(companySearchQuery.toLowerCase()) &&\n    job.job.toLowerCase().includes(jobTitleSearchQuery.toLowerCase()) &&\n    job.city.toLowerCase().includes(citySearchQuery.toLowerCase())\n  );\n\n  function collapsed(job){\n    return (<div style={{textAlign:\"center\"}} >\n    {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n    <p className=\"job-date\">{job.date}</p>\n    <p className=\"job-link\">\n      <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        {`${job.link.slice(0, 30)}...`}\n      </a>\n    </p>\n    <p className=\"job-description\" style={{margin: \"0 2rem 2rem\"}}>{job.description}</p>\n    </div>)\n  }\n\n  const dataAsCards = filteredJobs.map((job, index) => {\n    return {\n      content: <div style={{textAlign:\"center\"}}>\n                    <h2 className=\"job-title\">{job.job}</h2>\n                    <p>{job.company}</p>\n                    <p className=\"job-location\">{job.city}</p></div>,\n      collapsableContent: collapsed(job)\n    }\n  })\n\n  return (\n    <div>\n      <h1 className=\"title\">JOBOT Jobs</h1>\n      { isLoading ?  <p className=\"loading\">Loading...</p> :(\n      <div>\n      <div className=\"w-50 d-flex mx-auto align-items-center justify-cotnent-center\">\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by company name\"\n              value={companySearchQuery}\n              onChange={event => setCompanySearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by title\"\n              value={jobTitleSearchQuery}\n              onChange={event => setJobTitleSearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by city\"\n              value={citySearchQuery}\n              onChange={event => setCitySearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n      </div>\n      <div>\n      <CardsTable data={dataAsCards} />\n      </div>\n      </div>) }\n      {/* {isLoading ? (\n        <p className=\"loading\">Loading...</p>\n      ) : (\n        <div className=\"jobs-page\">\n          <div className=\"search-container\">\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by company name\"\n              value={companySearchQuery}\n              onChange={event => setCompanySearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by title\"\n              value={jobTitleSearchQuery}\n              onChange={event => setJobTitleSearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search jobs by city\"\n              value={citySearchQuery}\n              onChange={event => setCitySearchQuery(event.target.value)}\n              className=\"search-input\"\n            />\n          </div>\n          <ul className=\"jobs-list\">\n            {filteredJobs.map((job, index) => (\n              <li key={index} className=\"job-item\">\n                <h2 className=\"company-name\">{job.company}</h2>\n                <p className=\"job-title\">{job.job}</p>\n                <p className=\"job-location\">{job.city}</p>\n                {job.rating&&<p className=\"job-rating\"><span><img className=\"star\" src={starImage} alt=\"Star\" /></span> {job.rating}</p>}\n                <p className=\"job-date\">{job.date}</p>\n                <p className=\"job-link\">\n                  <a href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {job.link}\n                  </a>\n                </p>\n                <p className=\"job-description\">{job.description}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )} */}\n    </div>\n\n  );\n}\n\nexport default JobsPage;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,gBAAgB;AACvB,OAAOC,SAAS,MAAM,aAAa;AACnC,SAAQC,eAAe,QAAO,uBAAuB;AACrD,SAAQC,UAAU,QAAO,kBAAkB;AAC3C,SAASC,IAAI,QAAQ,sBAAsB;AAAC;AAE5C,SAASC,QAAQ,GAAG;EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACY,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGb,QAAQ,CAAC,EAAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}