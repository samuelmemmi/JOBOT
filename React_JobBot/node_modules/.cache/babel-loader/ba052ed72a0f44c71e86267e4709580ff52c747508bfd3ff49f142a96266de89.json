{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rachel\\\\source\\\\repos\\\\JOBOT\\\\JOBOT\\\\React_JobBot\\\\src\\\\pages\\\\adminArea\\\\viewChatFlow.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\n\n// const TreeNode = ({ node }) => {\n//   const [isExpanded, setExpanded] = useState(false);\n//   return (\n//     <ul>\n//       <li>\n//         {node.title+\": \"}\n//         {node.text}\n//         {node.children && node.children.length > 0 && (\n//           <button onClick={() => setExpanded(!isExpanded)}>\n//             {isExpanded ? 'Collapse' : 'Expand'}\n//           </button>\n//         )}\n//       </li>\n//       {isExpanded &&\n//         node.children.map((childNode, index) => (\n//           <TreeNode key={index} node={childNode} />\n//         ))}\n//     </ul>\n//   );\n// };\n\n// const Tree = ({ data }) => {\n//   return <TreeNode node={data} />;\n// };\n\n// const ViewChatFlow = () => {\n//   return (\n//     <div>\n//       <Tree data={chatFlow} />\n//     </div>\n//   );\n// };\n\n// export default ViewChatFlow;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CheckboxGroup() {\n  _s();\n  const [isChecked, setIsChecked] = useState({\n    option1: false,\n    option2: false,\n    option3: false\n  });\n  const handleCheckboxChange = event => {\n    const {\n      name,\n      checked\n    } = event.target;\n    setIsChecked({\n      ...isChecked,\n      [name]: checked\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: \"option1\",\n        checked: isChecked.option1,\n        onChange: handleCheckboxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), \"Option 1\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: \"option2\",\n        checked: isChecked.option2,\n        onChange: handleCheckboxChange,\n        disabled: isChecked.option1 // disable if option1 is checked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), \"Option 2\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: \"option3\",\n        checked: isChecked.option3,\n        onChange: handleCheckboxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), \"Option 3\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(CheckboxGroup, \"RtunmwX74nND3JoXABcHoGjfP/4=\");\n_c = CheckboxGroup;\nexport default CheckboxGroup;\nvar _c;\n$RefreshReg$(_c, \"CheckboxGroup\");","map":{"version":3,"names":["React","useState","CheckboxGroup","isChecked","setIsChecked","option1","option2","option3","handleCheckboxChange","event","name","checked","target"],"sources":["C:/Users/Rachel/source/repos/JOBOT/JOBOT/React_JobBot/src/pages/adminArea/viewChatFlow.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\r\n\r\n// const TreeNode = ({ node }) => {\r\n//   const [isExpanded, setExpanded] = useState(false);\r\n//   return (\r\n//     <ul>\r\n//       <li>\r\n//         {node.title+\": \"}\r\n//         {node.text}\r\n//         {node.children && node.children.length > 0 && (\r\n//           <button onClick={() => setExpanded(!isExpanded)}>\r\n//             {isExpanded ? 'Collapse' : 'Expand'}\r\n//           </button>\r\n//         )}\r\n//       </li>\r\n//       {isExpanded &&\r\n//         node.children.map((childNode, index) => (\r\n//           <TreeNode key={index} node={childNode} />\r\n//         ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n\r\n// const Tree = ({ data }) => {\r\n//   return <TreeNode node={data} />;\r\n// };\r\n\r\n// const ViewChatFlow = () => {\r\n//   return (\r\n//     <div>\r\n//       <Tree data={chatFlow} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewChatFlow;\r\n\r\nimport React, { useState } from 'react';\r\n\r\nfunction CheckboxGroup() {\r\n  const [isChecked, setIsChecked] = useState({\r\n    option1: false,\r\n    option2: false,\r\n    option3: false,\r\n  });\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    const { name, checked } = event.target;\r\n    setIsChecked({\r\n      ...isChecked,\r\n      [name]: checked,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"option1\"\r\n          checked={isChecked.option1}\r\n          onChange={handleCheckboxChange}\r\n        />\r\n        Option 1\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"option2\"\r\n          checked={isChecked.option2}\r\n          onChange={handleCheckboxChange}\r\n          disabled={isChecked.option1} // disable if option1 is checked\r\n        />\r\n        Option 2\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"option3\"\r\n          checked={isChecked.option3}\r\n          onChange={handleCheckboxChange}\r\n        />\r\n        Option 3\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckboxGroup;"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,SAASC,aAAa,GAAG;EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGH,QAAQ,CAAC;IACzCI,OAAO,EAAE,KAAK;IACdC,OAAO,EAAE,KAAK;IACdC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAMC,oBAAoB,GAAIC,KAAK,IAAK;IACtC,MAAM;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGF,KAAK,CAACG,MAAM;IACtCR,YAAY,CAAC;MACX,GAAGD,SAAS;MACZ,CAACO,IAAI,GAAGC;IACV,CAAC,CAAC;EACJ,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,wBACE;QACE,IAAI,EAAC,UAAU;QACf,IAAI,EAAC,SAAS;QACd,OAAO,EAAER,SAAS,CAACE,OAAQ;QAC3B,QAAQ,EAAEG;MAAqB;QAAA;QAAA;QAAA;MAAA,QAC/B,YAEJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAAQ,eACR;MAAA,wBACE;QACE,IAAI,EAAC,UAAU;QACf,IAAI,EAAC,SAAS;QACd,OAAO,EAAEL,SAAS,CAACG,OAAQ;QAC3B,QAAQ,EAAEE,oBAAqB;QAC/B,QAAQ,EAAEL,SAAS,CAACE,OAAQ,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QAC7B,YAEJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAAQ,eACR;MAAA,wBACE;QACE,IAAI,EAAC,UAAU;QACf,IAAI,EAAC,SAAS;QACd,OAAO,EAAEF,SAAS,CAACI,OAAQ;QAC3B,QAAQ,EAAEC;MAAqB;QAAA;QAAA;QAAA;MAAA,QAC/B,YAEJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV;AAAC,GA/CQN,aAAa;AAAA,KAAbA,aAAa;AAiDtB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}