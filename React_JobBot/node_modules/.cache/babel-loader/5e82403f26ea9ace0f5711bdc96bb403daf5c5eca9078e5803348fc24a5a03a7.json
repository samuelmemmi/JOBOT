{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rachel\\\\source\\\\repos\\\\JOBOT\\\\JOBOT\\\\React_JobBot\\\\src\\\\pages\\\\adminArea\\\\viewChatFlow.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// // import { SvgUri } from 'react-native-svg';\n// // import { ReactComponent as Logo } from \"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\";\n\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\nimport './EditableList.css';\n\n// const TreeNode = ({ nod }) => {\n//   const [isExpanded, setExpanded] = useState(false);\n//     const [node, setNode] = useState(nod.text)\n\n//   const handleEdit = (text) => {\n//     setNode({...node, text:{text}});\n//   }\n\n//   return (\n//     <ul className=\"editable-list\">\n//       <li>\n//         {node+\": \"}<br/>\n//         {/* {node.text} */}\n//         <input\n//         className=\"textContent\"\n//         type=\"text\"\n//         value={node}\n//         onChange={(e) => handleEdit(node, e.target.value)}/>\n//         <br/>\n//         {node.children && node.children.length > 0 && (\n//           <>\n//               <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\n//               {isExpanded ? 'Collapse' : 'Expand'}\n//               </button>\n//           </>\n//         )}\n//         {/* <button className=\"edit-button\">Edit</button> */}\n//       </li>\n//       {isExpanded &&\n//         node.children.map((childNode, index) => (\n//           <>\n//           {setNode(childNode)}\n//           <TreeNode key={index} nod={childNode} />\n//           </>\n\n//         ))}\n//     </ul>\n//   );\n// };\n\n// const Tree = ({ data }) => {\n//   return (\n//   <>\n//   <h2 className=\"title\">Editable Chat flow</h2>\n//   {/* <SvgUri\n//     width=\"100%\"\n//     height=\"100%\"\n//     uri=\"./flowTry.svg\"\n//   /> */}\n//     {/* <div className=\"App\">\n//       <img src=\"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\" alt=\"Your SVG\" />\n//     </div> */}\n//   <TreeNode nod={data} />;\n//   </>\n//   )\n// };\n\n// const ViewChatFlow = () => {\n//   return (\n//     <div>\n//       <Tree data={chatFlow} />\n//     </div>\n//   );\n// };\n\n// export default ViewChatFlow;\n//above Mine\n\n// import React, { useState } from 'react';\n// import './EditableList.css';\n\n// function EditableList() {\n//   const [items, setItems] = useState([\n//     { id: 1, text: 'Item 1' },\n//     { id: 2, text: 'Item 2' },\n//     { id: 3, text: 'Item 3' },\n//   ]);\n\n//   const handleEdit = (id, text) => {\n//     setItems(\n//       items.map((item) => {\n//         if (item.id === id) {\n//           return { ...item, text };\n//         } else {\n//           return item;\n//         }\n//       })\n//     );\n//   };\n\n//   const handleDelete = (id) => {\n//     setItems(items.filter((item) => item.id !== id));\n//   };\n\n//   const handleAdd = () => {\n//     const newItem = {\n//       id: Math.max(...items.map((item) => item.id)) + 1,\n//       text: '',\n//     };\n//     setItems([...items, newItem]);\n//   };\n\n//   return (\n//     <div className=\"editable-list\">\n//       <h2>Editable List</h2>\n//       <ul>\n//         {items.map((item) => (\n//           <li key={item.id}>\n//             <input\n//               type=\"text\"\n//               value={item.text}\n//               onChange={(e) => handleEdit(item.id, e.target.value)}\n//             />\n//             <button onClick={() => handleDelete(item.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//       <button className=\"add-button\" onClick={handleAdd}>\n//         Add Item\n//       </button>\n//     </div>\n//   );\n\n// }\n\n// export default EditableList;\n\n//Below New\n\nimport React, { useState } from 'react';\nimport chatFlow from '../chatBotLogic/convert_tree_to_json.js';\nimport \"./h.css\";\n\n// const treeObject = {\n//   text: \"Top Level\",\n//   children: [\n//     {\n//       text: \"Child 1\",\n//       children: [\n//         {\n//           text: \"Grandchild 1\",\n//           children: []\n//         },\n//         {\n//           text: \"Grandchild 2\",\n//           children: []\n//         }\n//       ]\n//     },\n//     {\n//       text: \"Child 2\",\n//       children: [\n//         {\n//           text: \"Grandchild 3\",\n//           children: []\n//         },\n//         {\n//           text: \"Grandchild 4\",\n//           children: []\n//         }\n//       ]\n//     }\n//   ]\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EditableTree = _ref => {\n  _s();\n  let {\n    text,\n    children\n  } = _ref;\n  const [editedText, setEditedText] = useState(text);\n  const [isExpanded, setExpanded] = useState(false);\n  const handleTextChange = event => {\n    setEditedText(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"person\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editedText,\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this), children && children.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          onClick: () => setExpanded(!isExpanded),\n          children: isExpanded ? 'Collapse' : 'Expand'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), isExpanded && children && children.length > 0 && children.map((child, index) => /*#__PURE__*/_jsxDEV(EditableTree, {\n      text: child.text,\n      children: child.children\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(EditableTree, \"D9pMn2AgBOX5sPhrheKSCcnPqkQ=\");\n_c = EditableTree;\nconst ViewChatFlow = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(EditableTree, {\n      text: chatFlow.text,\n      children: chatFlow.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ViewChatFlow;\nexport default ViewChatFlow;\nvar _c, _c2;\n$RefreshReg$(_c, \"EditableTree\");\n$RefreshReg$(_c2, \"ViewChatFlow\");","map":{"version":3,"names":["React","useState","chatFlow","EditableTree","text","children","editedText","setEditedText","isExpanded","setExpanded","handleTextChange","event","target","value","length","map","child","index","ViewChatFlow"],"sources":["C:/Users/Rachel/source/repos/JOBOT/JOBOT/React_JobBot/src/pages/adminArea/viewChatFlow.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// // import { SvgUri } from 'react-native-svg';\r\n// // import { ReactComponent as Logo } from \"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\";\r\n\r\n\r\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\r\nimport './EditableList.css';\r\n\r\n\r\n// const TreeNode = ({ nod }) => {\r\n//   const [isExpanded, setExpanded] = useState(false);\r\n//     const [node, setNode] = useState(nod.text)\r\n\r\n//   const handleEdit = (text) => {\r\n//     setNode({...node, text:{text}});\r\n//   }\r\n\r\n//   return (\r\n//     <ul className=\"editable-list\">\r\n//       <li>\r\n//         {node+\": \"}<br/>\r\n//         {/* {node.text} */}\r\n//         <input\r\n//         className=\"textContent\"\r\n//         type=\"text\"\r\n//         value={node}\r\n//         onChange={(e) => handleEdit(node, e.target.value)}/>\r\n//         <br/>\r\n//         {node.children && node.children.length > 0 && (\r\n//           <>\r\n//               <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\r\n//               {isExpanded ? 'Collapse' : 'Expand'}\r\n//               </button>\r\n//           </>\r\n//         )}\r\n//         {/* <button className=\"edit-button\">Edit</button> */}\r\n//       </li>\r\n//       {isExpanded &&\r\n//         node.children.map((childNode, index) => (\r\n//           <>\r\n//           {setNode(childNode)}\r\n//           <TreeNode key={index} nod={childNode} />\r\n//           </>\r\n\r\n//         ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n\r\n// const Tree = ({ data }) => {\r\n//   return (\r\n//   <>\r\n//   <h2 className=\"title\">Editable Chat flow</h2>\r\n//   {/* <SvgUri\r\n//     width=\"100%\"\r\n//     height=\"100%\"\r\n//     uri=\"./flowTry.svg\"\r\n//   /> */}\r\n//     {/* <div className=\"App\">\r\n//       <img src=\"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\" alt=\"Your SVG\" />\r\n//     </div> */}\r\n//   <TreeNode nod={data} />;\r\n//   </>\r\n//   )\r\n// };\r\n\r\n// const ViewChatFlow = () => {\r\n//   return (\r\n//     <div>\r\n//       <Tree data={chatFlow} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewChatFlow;\r\n//above Mine\r\n\r\n// import React, { useState } from 'react';\r\n// import './EditableList.css';\r\n\r\n// function EditableList() {\r\n//   const [items, setItems] = useState([\r\n//     { id: 1, text: 'Item 1' },\r\n//     { id: 2, text: 'Item 2' },\r\n//     { id: 3, text: 'Item 3' },\r\n//   ]);\r\n\r\n//   const handleEdit = (id, text) => {\r\n//     setItems(\r\n//       items.map((item) => {\r\n//         if (item.id === id) {\r\n//           return { ...item, text };\r\n//         } else {\r\n//           return item;\r\n//         }\r\n//       })\r\n//     );\r\n//   };\r\n\r\n//   const handleDelete = (id) => {\r\n//     setItems(items.filter((item) => item.id !== id));\r\n//   };\r\n\r\n//   const handleAdd = () => {\r\n//     const newItem = {\r\n//       id: Math.max(...items.map((item) => item.id)) + 1,\r\n//       text: '',\r\n//     };\r\n//     setItems([...items, newItem]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"editable-list\">\r\n//       <h2>Editable List</h2>\r\n//       <ul>\r\n//         {items.map((item) => (\r\n//           <li key={item.id}>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={item.text}\r\n//               onChange={(e) => handleEdit(item.id, e.target.value)}\r\n//             />\r\n//             <button onClick={() => handleDelete(item.id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <button className=\"add-button\" onClick={handleAdd}>\r\n//         Add Item\r\n//       </button>\r\n//     </div>\r\n//   );\r\n\r\n// }\r\n\r\n// export default EditableList;\r\n\r\n//Below New\r\n\r\nimport React, { useState } from 'react';\r\nimport chatFlow from '../chatBotLogic/convert_tree_to_json.js';\r\nimport \"./h.css\"\r\n\r\n\r\n// const treeObject = {\r\n//   text: \"Top Level\",\r\n//   children: [\r\n//     {\r\n//       text: \"Child 1\",\r\n//       children: [\r\n//         {\r\n//           text: \"Grandchild 1\",\r\n//           children: []\r\n//         },\r\n//         {\r\n//           text: \"Grandchild 2\",\r\n//           children: []\r\n//         }\r\n//       ]\r\n//     },\r\n//     {\r\n//       text: \"Child 2\",\r\n//       children: [\r\n//         {\r\n//           text: \"Grandchild 3\",\r\n//           children: []\r\n//         },\r\n//         {\r\n//           text: \"Grandchild 4\",\r\n//           children: []\r\n//         }\r\n//       ]\r\n//     }\r\n//   ]\r\n// };\r\n\r\nconst EditableTree = ({ text, children }) => {\r\n  const [editedText, setEditedText] = useState(text);\r\n  const [isExpanded, setExpanded] = useState(false);\r\n\r\n\r\n  const handleTextChange = (event) => {\r\n    setEditedText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      <li className=\"person\">\r\n      <input type=\"text\" value={editedText} onChange={handleTextChange} />\r\n      \r\n      <br/>\r\n\r\n      {children && children.length > 0 && (\r\n      <>\r\n          <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\r\n          {isExpanded ? 'Collapse' : 'Expand'}\r\n          </button>\r\n      </>\r\n      )}\r\n\r\n      </li>\r\n      {isExpanded && children&&children.length > 0&&(children.map((child, index) => (\r\n        <EditableTree\r\n          key={index}\r\n          text={child.text}\r\n          children={child.children}\r\n        />\r\n      )))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst ViewChatFlow = () => {\r\n  return (\r\n    <div>\r\n      <EditableTree text={chatFlow.text} children={chatFlow.children} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewChatFlow;\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;;AAGA;AACA,OAAO,oBAAoB;;AAG3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,yCAAyC;AAC9D,OAAO,SAAS;;AAGhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA,MAAMC,YAAY,GAAG,QAAwB;EAAA;EAAA,IAAvB;IAAEC,IAAI;IAAEC;EAAS,CAAC;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAACG,IAAI,CAAC;EAClD,MAAM,CAACI,UAAU,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAGjD,MAAMS,gBAAgB,GAAIC,KAAK,IAAK;IAClCJ,aAAa,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,oBACE;IAAA,wBACE;MAAI,SAAS,EAAC,QAAQ;MAAA,wBACtB;QAAO,IAAI,EAAC,MAAM;QAAC,KAAK,EAAEP,UAAW;QAAC,QAAQ,EAAEI;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAG,eAEpE;QAAA;QAAA;QAAA;MAAA,QAAK,EAEJL,QAAQ,IAAIA,QAAQ,CAACS,MAAM,GAAG,CAAC,iBAChC;QAAA,uBACI;UAAQ,SAAS,EAAC,YAAY;UAAC,OAAO,EAAE,MAAML,WAAW,CAAC,CAACD,UAAU,CAAE;UAAA,UACtEA,UAAU,GAAG,UAAU,GAAG;QAAQ;UAAA;UAAA;UAAA;QAAA;MAC1B,iBAEZ;IAAA;MAAA;MAAA;MAAA;IAAA,QAEI,EACJA,UAAU,IAAIH,QAAQ,IAAEA,QAAQ,CAACS,MAAM,GAAG,CAAC,IAAGT,QAAQ,CAACU,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvE,QAAC,YAAY;MAEX,IAAI,EAAED,KAAK,CAACZ,IAAK;MACjB,QAAQ,EAAEY,KAAK,CAACX;IAAS,GAFpBY,KAAK;MAAA;MAAA;MAAA;IAAA,QAIb,CAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAET,CAAC;AAAC,GAlCId,YAAY;AAAA,KAAZA,YAAY;AAoClB,MAAMe,YAAY,GAAG,MAAM;EACzB,oBACE;IAAA,uBACE,QAAC,YAAY;MAAC,IAAI,EAAEhB,QAAQ,CAACE,IAAK;MAAC,QAAQ,EAAEF,QAAQ,CAACG;IAAS;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEV,CAAC;AAAC,MANIa,YAAY;AAQlB,eAAeA,YAAY;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}