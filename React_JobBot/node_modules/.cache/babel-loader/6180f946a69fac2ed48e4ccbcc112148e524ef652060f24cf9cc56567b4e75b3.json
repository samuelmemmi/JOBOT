{"ast":null,"code":"import axios from \"axios\";\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.greet = () => {\n      const message = this.createChatBotMessage(\"Hello friend.\");\n      this.addMessageToState(message);\n    };\n    this.handleField = (node, opt) => {\n      const message = this.createChatBotMessage(node.getNextResponse().children[0].children[1].text, {\n        widget: \"JobTitles\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        field: opt\n      });\n      node.setNextResponse(node.getNextResponse().children[0].children[1]);\n      this.addMessageToState(message);\n    };\n    this.handleOtherField = (node, opt) => {\n      const message = this.createChatBotMessage(node.getNextResponse().children[0].children[0].text, {\n        widget: \"approval\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        field: opt\n      });\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message);\n    };\n    this.handleJobTitle = (node, opts) => {\n      const message = this.createChatBotMessage(node.getNextResponse().children[0].text, {\n        widget: \"companies\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        'JobTitles': opts\n      });\n      node.setNextResponse(node.getNextResponse().children[0]);\n      this.addMessageToState(message);\n    };\n    this.handleCompany = (node, opts) => {\n      const message1 = this.createChatBotMessage(node.getNextResponse().children[0].text);\n      this.addMessageToState(message1);\n      const message2 = this.createChatBotMessage(node.getNextResponse().children[0].children[0].text, {\n        widget: \"areas\"\n      });\n      node.setSelected({\n        ...node.getSelected(),\n        companies: opts\n      });\n      node.setNextResponse(node.getNextResponse().children[0].children[0]);\n      this.addMessageToState(message2);\n    };\n    this.addMessageToState = message => {\n      this.setState(prevState => {\n        return {\n          ...prevState,\n          messages: [...prevState.messages, message]\n        };\n      });\n    };\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  handleApproval(node, opt) {\n    const message = this.createChatBotMessage(node.getNextResponse().children[0].text);\n    node.setSelected({\n      ...node.getSelected(),\n      approval: opt\n    });\n    node.setNextResponse(node.getNextResponse().children[0]);\n    this.addMessageToState(message);\n  }\n  handleArea(node, opts) {\n    const message1 = this.createChatBotMessage(node.getNextResponse().children[0].text);\n    this.addMessageToState(message1);\n    const message2 = this.createChatBotMessage(node.getNextResponse().children[0].children[0].text, {\n      widget: \"jobTypes\"\n    });\n    node.setSelected({\n      ...node.getSelected(),\n      areas: opts\n    });\n    node.setNextResponse(node.getNextResponse().children[0].children[0]);\n    this.addMessageToState(message2);\n  }\n  handleJobType(node, opts) {\n    const message = this.createChatBotMessage(node.getNextResponse().children[0].text, {\n      widget: \"\"\n    });\n    node.setSelected({\n      ...node.getSelected(),\n      'job Types': opts\n    });\n    node.setNextResponse(node.getNextResponse().children[0]);\n    this.addMessageToState(message);\n    //server\n    var responses = node.getSelected();\n    axios.post(\"/getfirstjobs\", {\n      responses: responses\n    }, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => {\n      if (response.data.success) {\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\n        // Add a message for each job to the chatbot's message history\n        response.data.list_jobs.forEach(job => {\n          const jobMessage = this.createChatBotMessage(`Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}\\nDescription: ${job.description}`);\n          this.addMessageToState(jobMessage);\n        });\n      } else {\n        console.log(\"Error getting matching jobs: \", response.data.message);\n      }\n    }).catch(err => {\n      console.log(\"Error getting matching jobs: \", err.message);\n    });\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["axios","ActionProvider","constructor","createChatBotMessage","setStateFunc","greet","message","addMessageToState","handleField","node","opt","getNextResponse","children","text","widget","setSelected","getSelected","field","setNextResponse","handleOtherField","handleJobTitle","opts","handleCompany","message1","message2","companies","setState","prevState","messages","handleApproval","approval","handleArea","areas","handleJobType","responses","post","headers","then","response","data","success","console","log","list_jobs","forEach","job","jobMessage","company","city","description","catch","err"],"sources":["/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/ActionProvider.js"],"sourcesContent":["import axios from \"axios\";\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n  greet = () => {\n    const message = this.createChatBotMessage(\"Hello friend.\");\n    this.addMessageToState(message);\n  };\n\n  handleField = (node,opt) => {\n    const message = this.createChatBotMessage(\n      node.getNextResponse().children[0].children[1].text,\n      {\n        widget: \"JobTitles\",\n      }\n    );\n    node.setSelected({...node.getSelected(),field:opt})\n    node.setNextResponse(node.getNextResponse().children[0].children[1])\n    this.addMessageToState(message);\n  };\n\n  handleOtherField = (node,opt)=>{\n    const message = this.createChatBotMessage(\n      node.getNextResponse().children[0].children[0].text,\n      {\n        widget: \"approval\",\n      }\n    );\n    node.setSelected({...node.getSelected(),field:opt});\n    node.setNextResponse(node.getNextResponse().children[0].children[0])\n    this.addMessageToState(message);\n  }\n\n  handleApproval(node,opt){\n    const message = this.createChatBotMessage(node.getNextResponse().children[0].text);\n    node.setSelected({...node.getSelected(),approval:opt});\n    node.setNextResponse(node.getNextResponse().children[0])\n    this.addMessageToState(message);\n  }\n\n  handleJobTitle = (node,opts) => {\n    const message = this.createChatBotMessage(\n      node.getNextResponse().children[0].text,\n      {\n        widget: \"companies\",\n      }\n    );\n    node.setSelected({...node.getSelected(),'JobTitles':opts})\n    node.setNextResponse(node.getNextResponse().children[0])\n    this.addMessageToState(message);\n  };\n\n\n  handleCompany = (node,opts) => {\n    const message1=this.createChatBotMessage(node.getNextResponse().children[0].text);\n    this.addMessageToState(message1);\n    const message2 = this.createChatBotMessage(\n      node.getNextResponse().children[0].children[0].text,\n      {\n        widget: \"areas\",\n      }\n    );\n    node.setSelected({...node.getSelected(),companies:opts})\n    node.setNextResponse(node.getNextResponse().children[0].children[0])\n    this.addMessageToState(message2);\n  };\n\n  handleArea(node,opts){\n    const message1=this.createChatBotMessage(node.getNextResponse().children[0].text);\n    this.addMessageToState(message1);\n    const message2 = this.createChatBotMessage(\n      node.getNextResponse().children[0].children[0].text,\n      {\n        widget: \"jobTypes\",\n      }\n    );\n    node.setSelected({...node.getSelected(), areas:opts})\n    node.setNextResponse(node.getNextResponse().children[0].children[0])\n    this.addMessageToState(message2);\n  }\n\n  handleJobType(node,opts){\n    const message = this.createChatBotMessage(\n      node.getNextResponse().children[0].text,\n      {\n        widget: \"\",\n      }\n    );\n    node.setSelected({...node.getSelected(),'job Types':opts})\n    node.setNextResponse(node.getNextResponse().children[0])\n    this.addMessageToState(message);\n    //server\n    var responses = node.getSelected()\n    axios.post(\"/getfirstjobs\", {\n      responses: responses\n    }, {\n      headers: {\n      'Content-type': 'application/json; charset=UTF-8' } \n    })\n    .then((response) => {\n      if (response.data.success) {\n        console.log(\"Server returned matching jobs:\", response.data.list_jobs);\n        // Add a message for each job to the chatbot's message history\n        response.data.list_jobs.forEach((job) => {\n          const jobMessage = this.createChatBotMessage(\n            `Job title: ${job.job}\\nCompany: ${job.company}\\nLocation: ${job.city}\\nDescription: ${job.description}`\n          );\n          this.addMessageToState(jobMessage);\n        });\n      } else {\n        console.log(\"Error getting matching jobs: \", response.data.message);\n      }\n    })\n    .catch((err) => {\n      console.log(\"Error getting matching jobs: \", err.message);\n    });\n\n\n  }\n\n\n  addMessageToState = (message) => {\n    this.setState((prevState) =>{\n      return {\n      ...prevState,\n      messages: [...prevState.messages, message],\n      };\n    });\n  };\n\n}\n\nexport default ActionProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}