{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rachel\\\\source\\\\repos\\\\JOBOT\\\\JOBOT\\\\React_JobBot\\\\src\\\\pages\\\\adminArea\\\\viewChatFlow.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// // import { SvgUri } from 'react-native-svg';\n// // import { ReactComponent as Logo } from \"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\";\n\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\n\n// const TreeNode = ({ nod }) => {\n//   const [isExpanded, setExpanded] = useState(false);\n//     const [node, setNode] = useState(nod.text)\n\n//   const handleEdit = (text) => {\n//     setNode({...node, text:{text}});\n//   }\n\n//   return (\n//     <ul className=\"editable-list\">\n//       <li>\n//         {node+\": \"}<br/>\n//         {/* {node.text} */}\n//         <input\n//         className=\"textContent\"\n//         type=\"text\"\n//         value={node}\n//         onChange={(e) => handleEdit(node, e.target.value)}/>\n//         <br/>\n//         {node.children && node.children.length > 0 && (\n//           <>\n//               <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\n//               {isExpanded ? 'Collapse' : 'Expand'}\n//               </button>\n//           </>\n//         )}\n//         {/* <button className=\"edit-button\">Edit</button> */}\n//       </li>\n//       {isExpanded &&\n//         node.children.map((childNode, index) => (\n//           <>\n//           {setNode(childNode)}\n//           <TreeNode key={index} nod={childNode} />\n//           </>\n\n//         ))}\n//     </ul>\n//   );\n// };\n\n// const Tree = ({ data }) => {\n//   return (\n//   <>\n//   <h2 className=\"title\">Editable Chat flow</h2>\n//   {/* <SvgUri\n//     width=\"100%\"\n//     height=\"100%\"\n//     uri=\"./flowTry.svg\"\n//   /> */}\n//     {/* <div className=\"App\">\n//       <img src=\"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\" alt=\"Your SVG\" />\n//     </div> */}\n//   <TreeNode nod={data} />;\n//   </>\n//   )\n// };\n\n// const ViewChatFlow = () => {\n//   return (\n//     <div>\n//       <Tree data={chatFlow} />\n//     </div>\n//   );\n// };\n\n// export default ViewChatFlow;\n//above Mine\n\n// import React, { useState } from 'react';\n// import './EditableList.css';\n\n// function EditableList() {\n//   const [items, setItems] = useState([\n//     { id: 1, text: 'Item 1' },\n//     { id: 2, text: 'Item 2' },\n//     { id: 3, text: 'Item 3' },\n//   ]);\n\n//   const handleEdit = (id, text) => {\n//     setItems(\n//       items.map((item) => {\n//         if (item.id === id) {\n//           return { ...item, text };\n//         } else {\n//           return item;\n//         }\n//       })\n//     );\n//   };\n\n//   const handleDelete = (id) => {\n//     setItems(items.filter((item) => item.id !== id));\n//   };\n\n//   const handleAdd = () => {\n//     const newItem = {\n//       id: Math.max(...items.map((item) => item.id)) + 1,\n//       text: '',\n//     };\n//     setItems([...items, newItem]);\n//   };\n\n//   return (\n//     <div className=\"editable-list\">\n//       <h2>Editable List</h2>\n//       <ul>\n//         {items.map((item) => (\n//           <li key={item.id}>\n//             <input\n//               type=\"text\"\n//               value={item.text}\n//               onChange={(e) => handleEdit(item.id, e.target.value)}\n//             />\n//             <button onClick={() => handleDelete(item.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//       <button className=\"add-button\" onClick={handleAdd}>\n//         Add Item\n//       </button>\n//     </div>\n//   );\n\n// }\n\n// export default EditableList;\n\n//Below New\n\n// const treeObject = {\n//   text: \"Top Level\",\n//   children: [\n//     {\n//       text: \"Child 1\",\n//       children: [\n//         {\n//           text: \"Grandchild 1\",\n//           children: []\n//         },\n//         {\n//           text: \"Grandchild 2\",\n//           children: []\n//         }\n//       ]\n//     },\n//     {\n//       text: \"Child 2\",\n//       children: [\n//         {\n//           text: \"Grandchild 3\",\n//           children: []\n//         },\n//         {\n//           text: \"Grandchild 4\",\n//           children: []\n//         }\n//       ]\n//     }\n//   ]\n// };\n\n//COPY-ON-WRITE\nimport React, { useState, useEffect } from 'react';\n// import produce from \"immer\";\n\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\n// import \"./h.css\"\n// import './EditableList.css';\n\n// const EditableTree = ({ text, children, description }) => {\n//   const [editedText, setEditedText] = useState(text);\n//   const [isExpanded, setExpanded] = useState(false);\n//   const [isFinishEdit, setFinishEdit]= useState(false);\n\n//   const handleTextChange = (event) => {\n//     if(isFinishEdit){\n//       setEditedText(event.target.value);\n//     }\n//   };\n\n//   return (\n//     <ul>\n//       <li className='vertix'>\n\n//       <input className=\"age\" type=\"text\" value={description} />\n\n//       <input className=\"person\" type=\"text\" value={editedText} onChange={handleTextChange} />\n\n//       {/* <br/> */}\n\n//       <button className=\"add-button\" onClick={() => setFinishEdit(!isFinishEdit)}>\n//           {isFinishEdit ? 'Finish Edit' : 'Edit Formulation'}\n//       </button>\n\n//       {children && children.length > 0 && (\n//       <>\n//           <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\n//           {isExpanded ? 'Collapse' : 'Expand'}\n//           </button>\n//       </>\n//       )}\n\n//       </li>\n//       {isExpanded && children&&children.length > 0&&(children.map((child, index) => (\n//         <EditableTree\n//           key={index}\n//           text={child.text}\n//           children={child.children}\n//           description={child.title}\n//         />\n//       )))}\n//     </ul>\n//   );\n// };\n\n// const ViewChatFlow = () => {\n//   return (\n//     <div className=\"pedigree-tree\">\n//       <EditableTree text={chatFlow.text} children={chatFlow.children} description={chatFlow.title} />\n//       {chatFlow.text}\n//     </div>\n//   );\n// };\n\n// export default ViewChatFlow;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ViewChatFlow() {\n  _s();\n  const [myObject, setMyObject] = useState({\n    h: \"i\"\n  });\n  useEffect(() => {\n    setMyObject(require('./decisionTree.json'));\n  }, []);\n\n  // const renderObject = (obj) => {\n  //   return (\n  //     <div>\n  //       <input\n  //         type=\"text\"\n  //         value={obj.text}\n  //         onChange={(e) => {\n  //           setMyObject(\n  //             produce(myObject, (draft) => {\n  //               draft.text = e.target.value;\n  //             })\n  //           );\n  //         }}\n  //       />\n  //       {obj.children&&obj.children.length>0&&(obj.children.map((child) => {\n  //         return renderObject(child);\n  //       }))}\n  //     </div>\n  //   );\n  // };\n\n  const renderObject = obj => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: obj.text,\n        onChange: e => {\n          obj.text = e.target.value;\n          setMyObject({\n            ...myObject\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), obj.children && obj.children.length > 0 && obj.children.map(child => {\n        return renderObject(child);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this);\n  };\n  const exportObject = () => {\n    const json = JSON.stringify(myObject);\n    console.log(json);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderObject(myObject), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportObject,\n      children: \"Export\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n}\n_s(ViewChatFlow, \"9zwTKwP+55t+1x2/+WOZA0bD+Ws=\");\n_c = ViewChatFlow;\nexport default ViewChatFlow;\nvar _c;\n$RefreshReg$(_c, \"ViewChatFlow\");","map":{"version":3,"names":["React","useState","useEffect","ViewChatFlow","myObject","setMyObject","h","require","renderObject","obj","text","e","target","value","children","length","map","child","exportObject","json","JSON","stringify","console","log"],"sources":["C:/Users/Rachel/source/repos/JOBOT/JOBOT/React_JobBot/src/pages/adminArea/viewChatFlow.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// // import { SvgUri } from 'react-native-svg';\r\n// // import { ReactComponent as Logo } from \"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\";\r\n\r\n\r\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\r\n\r\n\r\n// const TreeNode = ({ nod }) => {\r\n//   const [isExpanded, setExpanded] = useState(false);\r\n//     const [node, setNode] = useState(nod.text)\r\n\r\n//   const handleEdit = (text) => {\r\n//     setNode({...node, text:{text}});\r\n//   }\r\n\r\n//   return (\r\n//     <ul className=\"editable-list\">\r\n//       <li>\r\n//         {node+\": \"}<br/>\r\n//         {/* {node.text} */}\r\n//         <input\r\n//         className=\"textContent\"\r\n//         type=\"text\"\r\n//         value={node}\r\n//         onChange={(e) => handleEdit(node, e.target.value)}/>\r\n//         <br/>\r\n//         {node.children && node.children.length > 0 && (\r\n//           <>\r\n//               <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\r\n//               {isExpanded ? 'Collapse' : 'Expand'}\r\n//               </button>\r\n//           </>\r\n//         )}\r\n//         {/* <button className=\"edit-button\">Edit</button> */}\r\n//       </li>\r\n//       {isExpanded &&\r\n//         node.children.map((childNode, index) => (\r\n//           <>\r\n//           {setNode(childNode)}\r\n//           <TreeNode key={index} nod={childNode} />\r\n//           </>\r\n\r\n//         ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n\r\n// const Tree = ({ data }) => {\r\n//   return (\r\n//   <>\r\n//   <h2 className=\"title\">Editable Chat flow</h2>\r\n//   {/* <SvgUri\r\n//     width=\"100%\"\r\n//     height=\"100%\"\r\n//     uri=\"./flowTry.svg\"\r\n//   /> */}\r\n//     {/* <div className=\"App\">\r\n//       <img src=\"./JOBOT/React_JobBot/src/pages/adminArea/flowTry.svg\" alt=\"Your SVG\" />\r\n//     </div> */}\r\n//   <TreeNode nod={data} />;\r\n//   </>\r\n//   )\r\n// };\r\n\r\n// const ViewChatFlow = () => {\r\n//   return (\r\n//     <div>\r\n//       <Tree data={chatFlow} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewChatFlow;\r\n//above Mine\r\n\r\n// import React, { useState } from 'react';\r\n// import './EditableList.css';\r\n\r\n// function EditableList() {\r\n//   const [items, setItems] = useState([\r\n//     { id: 1, text: 'Item 1' },\r\n//     { id: 2, text: 'Item 2' },\r\n//     { id: 3, text: 'Item 3' },\r\n//   ]);\r\n\r\n//   const handleEdit = (id, text) => {\r\n//     setItems(\r\n//       items.map((item) => {\r\n//         if (item.id === id) {\r\n//           return { ...item, text };\r\n//         } else {\r\n//           return item;\r\n//         }\r\n//       })\r\n//     );\r\n//   };\r\n\r\n//   const handleDelete = (id) => {\r\n//     setItems(items.filter((item) => item.id !== id));\r\n//   };\r\n\r\n//   const handleAdd = () => {\r\n//     const newItem = {\r\n//       id: Math.max(...items.map((item) => item.id)) + 1,\r\n//       text: '',\r\n//     };\r\n//     setItems([...items, newItem]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"editable-list\">\r\n//       <h2>Editable List</h2>\r\n//       <ul>\r\n//         {items.map((item) => (\r\n//           <li key={item.id}>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={item.text}\r\n//               onChange={(e) => handleEdit(item.id, e.target.value)}\r\n//             />\r\n//             <button onClick={() => handleDelete(item.id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <button className=\"add-button\" onClick={handleAdd}>\r\n//         Add Item\r\n//       </button>\r\n//     </div>\r\n//   );\r\n\r\n// }\r\n\r\n// export default EditableList;\r\n\r\n//Below New\r\n\r\n\r\n\r\n\r\n// const treeObject = {\r\n//   text: \"Top Level\",\r\n//   children: [\r\n//     {\r\n//       text: \"Child 1\",\r\n//       children: [\r\n//         {\r\n//           text: \"Grandchild 1\",\r\n//           children: []\r\n//         },\r\n//         {\r\n//           text: \"Grandchild 2\",\r\n//           children: []\r\n//         }\r\n//       ]\r\n//     },\r\n//     {\r\n//       text: \"Child 2\",\r\n//       children: [\r\n//         {\r\n//           text: \"Grandchild 3\",\r\n//           children: []\r\n//         },\r\n//         {\r\n//           text: \"Grandchild 4\",\r\n//           children: []\r\n//         }\r\n//       ]\r\n//     }\r\n//   ]\r\n// };\r\n\r\n//COPY-ON-WRITE\r\nimport React, { useState, useEffect } from 'react';\r\n// import produce from \"immer\";\r\n\r\n// import chatFlow from '../chatBotLogic/convert_tree_to_json.js';\r\n// import \"./h.css\"\r\n// import './EditableList.css';\r\n\r\n// const EditableTree = ({ text, children, description }) => {\r\n//   const [editedText, setEditedText] = useState(text);\r\n//   const [isExpanded, setExpanded] = useState(false);\r\n//   const [isFinishEdit, setFinishEdit]= useState(false);\r\n\r\n\r\n//   const handleTextChange = (event) => {\r\n//     if(isFinishEdit){\r\n//       setEditedText(event.target.value);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <ul>\r\n//       <li className='vertix'>\r\n\r\n//       <input className=\"age\" type=\"text\" value={description} />\r\n\r\n//       <input className=\"person\" type=\"text\" value={editedText} onChange={handleTextChange} />\r\n      \r\n//       {/* <br/> */}\r\n\r\n//       <button className=\"add-button\" onClick={() => setFinishEdit(!isFinishEdit)}>\r\n//           {isFinishEdit ? 'Finish Edit' : 'Edit Formulation'}\r\n//       </button>\r\n\r\n//       {children && children.length > 0 && (\r\n//       <>\r\n//           <button className=\"add-button\" onClick={() => setExpanded(!isExpanded)}>\r\n//           {isExpanded ? 'Collapse' : 'Expand'}\r\n//           </button>\r\n//       </>\r\n//       )}\r\n\r\n//       </li>\r\n//       {isExpanded && children&&children.length > 0&&(children.map((child, index) => (\r\n//         <EditableTree\r\n//           key={index}\r\n//           text={child.text}\r\n//           children={child.children}\r\n//           description={child.title}\r\n//         />\r\n//       )))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n// const ViewChatFlow = () => {\r\n//   return (\r\n//     <div className=\"pedigree-tree\">\r\n//       <EditableTree text={chatFlow.text} children={chatFlow.children} description={chatFlow.title} />\r\n//       {chatFlow.text}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewChatFlow;\r\n\r\nfunction ViewChatFlow() {\r\n  const [myObject, setMyObject] = useState({h:\"i\"});\r\n\r\n  useEffect(()=>{\r\n    setMyObject(require('./decisionTree.json'))\r\n  },[]);\r\n\r\n\r\n  // const renderObject = (obj) => {\r\n  //   return (\r\n  //     <div>\r\n  //       <input\r\n  //         type=\"text\"\r\n  //         value={obj.text}\r\n  //         onChange={(e) => {\r\n  //           setMyObject(\r\n  //             produce(myObject, (draft) => {\r\n  //               draft.text = e.target.value;\r\n  //             })\r\n  //           );\r\n  //         }}\r\n  //       />\r\n  //       {obj.children&&obj.children.length>0&&(obj.children.map((child) => {\r\n  //         return renderObject(child);\r\n  //       }))}\r\n  //     </div>\r\n  //   );\r\n  // };\r\n\r\n    const renderObject = (obj) => {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={obj.text}\r\n          onChange={(e) => {\r\n            obj.text = e.target.value;\r\n            setMyObject({ ...myObject });\r\n          }}\r\n        />\r\n        {obj.children&&obj.children.length>0&&(obj.children.map((child) => {\r\n          return renderObject(child);\r\n        }))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const exportObject = () => {\r\n    const json = JSON.stringify(myObject);\r\n    console.log(json);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {renderObject(myObject)}\r\n      <button onClick={exportObject}>Export</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewChatFlow;\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA,SAASC,YAAY,GAAG;EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC;IAACK,CAAC,EAAC;EAAG,CAAC,CAAC;EAEjDJ,SAAS,CAAC,MAAI;IACZG,WAAW,CAACE,OAAO,CAAC,qBAAqB,CAAC,CAAC;EAC7C,CAAC,EAAC,EAAE,CAAC;;EAGL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE,MAAMC,YAAY,GAAIC,GAAG,IAAK;IAC9B,oBACE;MAAA,wBACE;QACE,IAAI,EAAC,MAAM;QACX,KAAK,EAAEA,GAAG,CAACC,IAAK;QAChB,QAAQ,EAAGC,CAAC,IAAK;UACfF,GAAG,CAACC,IAAI,GAAGC,CAAC,CAACC,MAAM,CAACC,KAAK;UACzBR,WAAW,CAAC;YAAE,GAAGD;UAAS,CAAC,CAAC;QAC9B;MAAE;QAAA;QAAA;QAAA;MAAA,QACF,EACDK,GAAG,CAACK,QAAQ,IAAEL,GAAG,CAACK,QAAQ,CAACC,MAAM,GAAC,CAAC,IAAGN,GAAG,CAACK,QAAQ,CAACE,GAAG,CAAEC,KAAK,IAAK;QACjE,OAAOT,YAAY,CAACS,KAAK,CAAC;MAC5B,CAAC,CAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QACC;EAEV,CAAC;EAED,MAAMC,YAAY,GAAG,MAAM;IACzB,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACjB,QAAQ,CAAC;IACrCkB,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;EACnB,CAAC;EAED,oBACE;IAAA,WACGX,YAAY,CAACJ,QAAQ,CAAC,eACvB;MAAQ,OAAO,EAAEc,YAAa;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAC1C;AAEV;AAAC,GA1DQf,YAAY;AAAA,KAAZA,YAAY;AA4DrB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}