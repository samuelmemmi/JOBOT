{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/config.js\";\nimport React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport dec_tree from \"./getFlowText.js\";\nimport FieldOptions from \"./components/Options/FieldOptions\";\nimport Quiz from \"./components/Quiz/Quiz\";\nimport Approval from \"./components/Options/Approval\";\nimport JobTitles from \"./components/Options/JobTitles\";\nimport Companies from \"./components/Options/Companies\";\nimport Areas from \"./components/Options/Areas\";\nimport JobTypes from \"./components/Options/JobTypes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  botName: \"JOBOT\",\n  initialMessages: [createChatBotMessage(dec_tree.getNextResponse().text), createChatBotMessage(dec_tree.getNextResponse().children[0].text, {\n    widget: \"fieldOptions\"\n    // delay:2000\n  })],\n\n  // state: {\n  //   nodes: [dec_tree],\n  // },\n\n  widgets: [{\n    widgetName: \"fieldOptions\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(FieldOptions, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 30\n    }, this),\n    props: {\n      node: dec_tree\n    }\n    // mapStateToProps: [\n    //   \"nodes\",\n    // ]\n  }, {\n    widgetName: \"javascriptQuiz\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Quiz, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 30\n    }, this),\n    props: {\n      questions: [{\n        question: \"What is closure?\",\n        answer: \"Closure is a way for a function to retain access to it's enclosing function scope after the execution of that function is finished.\",\n        id: 1\n      }, {\n        question: \"Explain prototypal inheritance\",\n        answer: \"Prototypal inheritance is a link between an object and an object store that holds shared properties. If a property is not found on the host object, javascript will check the prototype object.\",\n        id: 2\n      }]\n    }\n  }, {\n    widgetName: \"approval\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Approval, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 30\n    }, this),\n    props: {\n      node: dec_tree\n    }\n    // mapStateToProps: [\n    //   \"nodes\",\n    // ]\n  }, {\n    widgetName: \"JobTitles\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(JobTitles, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 30\n    }, this),\n    props: {\n      node: dec_tree\n    }\n  }, {\n    widgetName: \"companies\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Companies, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 30\n    }, this),\n    props: {\n      node: dec_tree\n    }\n  }, {\n    widgetName: \"areas\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(Areas, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 30\n    }, this),\n    props: {\n      node: dec_tree\n    }\n  }, {\n    widgetName: \"jobTypes\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(JobTypes, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 30\n    }, this),\n    props: {\n      node: dec_tree\n    }\n  }],\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: '#376B7E'\n    },\n    chatButton: {\n      backgroundColor: '#376B7E'\n    }\n  }\n};\nexport default config;","map":{"version":3,"names":["React","createChatBotMessage","dec_tree","FieldOptions","Quiz","Approval","JobTitles","Companies","Areas","JobTypes","config","botName","initialMessages","getNextResponse","text","children","widget","widgets","widgetName","widgetFunc","props","node","questions","question","answer","id","customStyles","botMessageBox","backgroundColor","chatButton"],"sources":["/Users/macbook/Desktop/Chatbot/JOBOT/React_JobBot/src/pages/chatBotLogic/config.js"],"sourcesContent":["import React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\n\nimport dec_tree from \"./getFlowText.js\"\nimport FieldOptions from \"./components/Options/FieldOptions\";\nimport Quiz from \"./components/Quiz/Quiz\";\nimport Approval from \"./components/Options/Approval\";\nimport JobTitles from \"./components/Options/JobTitles\";\nimport Companies from \"./components/Options/Companies\";\nimport Areas from \"./components/Options/Areas\";\nimport JobTypes from \"./components/Options/JobTypes\";\n\n\nconst config = {\n  botName: \"JOBOT\",\n  initialMessages: [\n    createChatBotMessage(dec_tree.getNextResponse().text),\n    createChatBotMessage(dec_tree.getNextResponse().children[0].text, {\n      widget: \"fieldOptions\",\n      // delay:2000\n    }),\n  ],\n\n  // state: {\n  //   nodes: [dec_tree],\n  // },\n\n  widgets: [\n    {\n      widgetName: \"fieldOptions\",\n      widgetFunc: (props) => <FieldOptions {...props} />,\n      props: {\n        node:dec_tree\n      }\n      // mapStateToProps: [\n      //   \"nodes\",\n      // ]\n    },\n    {\n      widgetName: \"javascriptQuiz\",\n      widgetFunc: (props) => <Quiz {...props} />,\n      props: {\n        questions: [\n          {\n            question: \"What is closure?\",\n            answer:\n              \"Closure is a way for a function to retain access to it's enclosing function scope after the execution of that function is finished.\",\n            id: 1,\n          },\n          {\n            question: \"Explain prototypal inheritance\",\n            answer:\n              \"Prototypal inheritance is a link between an object and an object store that holds shared properties. If a property is not found on the host object, javascript will check the prototype object.\",\n            id: 2,\n          },\n        ],\n      },\n    },\n    {\n      widgetName: \"approval\",\n      widgetFunc: (props) => <Approval {...props} />,\n      props: {\n        node:dec_tree\n      }\n      // mapStateToProps: [\n      //   \"nodes\",\n      // ]\n    },\n    {\n      widgetName: \"JobTitles\",\n      widgetFunc: (props) => <JobTitles {...props} />,\n      props: {\n        node:dec_tree\n      }\n    },\n    {\n      widgetName: \"companies\",\n      widgetFunc: (props) => <Companies {...props} />,\n      props: {\n        node:dec_tree\n      }\n    },\n    {\n      widgetName: \"areas\",\n      widgetFunc: (props) => <Areas {...props} />,\n      props: {\n        node:dec_tree\n      }\n    },\n    {\n      widgetName: \"jobTypes\",\n      widgetFunc: (props) => <JobTypes {...props} />,\n      props: {\n        node:dec_tree\n      }\n    }\n  ],\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: '#376B7E',\n    },\n    chatButton: {\n      backgroundColor: '#376B7E',\n    },\n  },\n};\n\nexport default config;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,QAAQ,mBAAmB;AAExD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,SAAS,MAAM,gCAAgC;AACtD,OAAOC,SAAS,MAAM,gCAAgC;AACtD,OAAOC,KAAK,MAAM,4BAA4B;AAC9C,OAAOC,QAAQ,MAAM,+BAA+B;AAAC;AAGrD,MAAMC,MAAM,GAAG;EACbC,OAAO,EAAE,OAAO;EAChBC,eAAe,EAAE,CACfX,oBAAoB,CAACC,QAAQ,CAACW,eAAe,EAAE,CAACC,IAAI,CAAC,EACrDb,oBAAoB,CAACC,QAAQ,CAACW,eAAe,EAAE,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACD,IAAI,EAAE;IAChEE,MAAM,EAAE;IACR;EACF,CAAC,CAAC,CACH;;EAED;EACA;EACA;;EAEAC,OAAO,EAAE,CACP;IACEC,UAAU,EAAE,cAAc;IAC1BC,UAAU,EAAGC,KAAK,iBAAK,QAAC,YAAY;MAAA,GAAKA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAI;IAClDA,KAAK,EAAE;MACLC,IAAI,EAACnB;IACP;IACA;IACA;IACA;EACF,CAAC,EACD;IACEgB,UAAU,EAAE,gBAAgB;IAC5BC,UAAU,EAAGC,KAAK,iBAAK,QAAC,IAAI;MAAA,GAAKA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAI;IAC1CA,KAAK,EAAE;MACLE,SAAS,EAAE,CACT;QACEC,QAAQ,EAAE,kBAAkB;QAC5BC,MAAM,EACJ,qIAAqI;QACvIC,EAAE,EAAE;MACN,CAAC,EACD;QACEF,QAAQ,EAAE,gCAAgC;QAC1CC,MAAM,EACJ,iMAAiM;QACnMC,EAAE,EAAE;MACN,CAAC;IAEL;EACF,CAAC,EACD;IACEP,UAAU,EAAE,UAAU;IACtBC,UAAU,EAAGC,KAAK,iBAAK,QAAC,QAAQ;MAAA,GAAKA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAI;IAC9CA,KAAK,EAAE;MACLC,IAAI,EAACnB;IACP;IACA;IACA;IACA;EACF,CAAC,EACD;IACEgB,UAAU,EAAE,WAAW;IACvBC,UAAU,EAAGC,KAAK,iBAAK,QAAC,SAAS;MAAA,GAAKA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAI;IAC/CA,KAAK,EAAE;MACLC,IAAI,EAACnB;IACP;EACF,CAAC,EACD;IACEgB,UAAU,EAAE,WAAW;IACvBC,UAAU,EAAGC,KAAK,iBAAK,QAAC,SAAS;MAAA,GAAKA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAI;IAC/CA,KAAK,EAAE;MACLC,IAAI,EAACnB;IACP;EACF,CAAC,EACD;IACEgB,UAAU,EAAE,OAAO;IACnBC,UAAU,EAAGC,KAAK,iBAAK,QAAC,KAAK;MAAA,GAAKA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAI;IAC3CA,KAAK,EAAE;MACLC,IAAI,EAACnB;IACP;EACF,CAAC,EACD;IACEgB,UAAU,EAAE,UAAU;IACtBC,UAAU,EAAGC,KAAK,iBAAK,QAAC,QAAQ;MAAA,GAAKA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAI;IAC9CA,KAAK,EAAE;MACLC,IAAI,EAACnB;IACP;EACF,CAAC,CACF;EACDwB,YAAY,EAAE;IACZC,aAAa,EAAE;MACbC,eAAe,EAAE;IACnB,CAAC;IACDC,UAAU,EAAE;MACVD,eAAe,EAAE;IACnB;EACF;AACF,CAAC;AAED,eAAelB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}